{
  "openapi": "3.0.1",
  "info": {
    "title": "i-Vertix Web RestAPI",
    "description": "# New features\n+ Added endpoint to deploy services in a host based on associated host template(s)\n# Updated features\n+ Added host_category filter to /monitoring/hostgroups endpoint\n+ Added new filters for the /monitoring/hosts/categories endpoint\n+ Added new filters for the /monitoring/services/categories endpoint\n+ Remove snmp_community property from the hosts and host templates listing endpoints\n+ Added new filters to the /monitoring/servicegroups endpoint\n+ Added new filters for /monitoring/resources /monitoring/resources/hosts related to Open Tickets\n+ Added new key 'extra' that contains extra data from modules installed for resources endpoints\n+ Update /configuration/contacts/groups endpoint by adding new listing properties\n+ Content-type changed from application/json to multipart/form-data for dashboard partial update endpoint which is now a POST and not a PATCH\n+ Added new 'thumbnail' key to dashboard listing endpoint, that contains thumbnail information\n+ Added new 'thumbnail' key to dashboard update payload endpoint, that contains thumbnail information\n+ Added new 'thumbnail_data' key to dashboard update payload endpoint, that contains thumbnail contents\n+\n# Information\nAll dates are in **ISO 8601** format\n# Authentication\nThere are two modes of authentication:\n* By token: after identification with your login credentials\n* By cookie: by reusing a valid session ID\n",
    "x-logo": {
      "url": "/img/logo-monitoring-text.png"
    },
    "contact": {
      "name": "i-Vertix",
      "url": "https://www.i-vertix.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "24.10"
  },
  "servers": [
    {
      "url": "{protocol}://{server}:{port}/centreon/api/{version}",
      "variables": {
        "protocol": {
          "enum": [
            "http",
            "https"
          ],
          "default": "http",
          "description": "HTTP schema"
        },
        "server": {
          "default": "localhost",
          "description": "IP address or hostname of i-Vertix monitoring server"
        },
        "port": {
          "default": "80",
          "description": "Port used by HTTP server"
        },
        "version": {
          "default": "v24.10",
          "description": "Version of the API"
        }
      }
    }
  ],
  "security": [
    {
      "Token": []
    },
    {
      "Cookie": []
    }
  ],
  "tags": [
    {
      "name": "Acknowledgement"
    },
    {
      "name": "Administration"
    },
    {
      "name": "Authentication",
      "description": "Login and logout endpoints to retrieve authentication token"
    },
    {
      "name": "Command"
    },
    {
      "name": "Contact group"
    },
    {
      "name": "Downtime"
    },
    {
      "name": "Gorgone"
    },
    {
      "name": "Host"
    },
    {
      "name": "Host category"
    },
    {
      "name": "Host group"
    },
    {
      "name": "Meta service"
    },
    {
      "name": "Host severity"
    },
    {
      "name": "Host template"
    },
    {
      "name": "Media"
    },
    {
      "name": "Monitoring server"
    },
    {
      "name": "Proxy"
    },
    {
      "name": "Service"
    },
    {
      "name": "Service group"
    },
    {
      "name": "Service category"
    },
    {
      "name": "Severity"
    },
    {
      "name": "Time period"
    },
    {
      "name": "Topology"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "Entry point to retrieve an authentication token.",
        "security": [],
        "requestBody": {
          "description": "Authentication schema",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginAuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Entry point to delete an existing authentication token.",
        "security": [
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutAuthenticationResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/authentication/users/{alias}/password": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user password",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "Alias of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "old_password": {
                    "type": "string",
                    "description": "Old user password",
                    "example": "changeme!2021"
                  },
                  "new_password": {
                    "type": "string",
                    "description": "New user password",
                    "example": "changeme!2022"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/authentication/providers/configurations": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Providers Configurations",
        "description": "Endpoint to list active existing providers configuration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Id of configuration",
                        "example": 1
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of provider",
                        "example": "local"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of provider",
                        "example": "local"
                      },
                      "authentication_uri": {
                        "type": "string",
                        "description": "Provider Uri used to proceed authentication",
                        "example": "/centreon/authentication/providers/configurations/local"
                      },
                      "is_active": {
                        "type": "boolean",
                        "description": "Provider active or not",
                        "example": true
                      },
                      "is_forced": {
                        "type": "boolean",
                        "description": "Provider forced or not",
                        "example": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authentication/providers/configurations/{provider_configuration_name}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/providerConfigurationName"
          }
        ],
        "summary": "Authentication to provider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "login": {
                    "type": "string",
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "example": "changeme"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "redirect_uri": {
                      "type": "string",
                      "example": "/centreon/main.php?p=50113&o=ldap"
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Found"
          }
        }
      }
    },
    "/authentication/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout Session",
        "description": "Entry point to delete an existing session token.",
        "security": [
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutAuthenticationResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/additional-connector-configurations": {
      "post": {
        "tags": [
          "Additional Connector Configuration"
        ],
        "summary": "Add an Additional Connector Configuration (ACC)",
        "description": "Add an Additional Connector Configuration (ACC)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAccRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddAccResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Additional Connector Configuration"
        ],
        "summary": "List Additional Connector Configurations (ACC)",
        "description": "Return all ACCs.\n\nThe available parameters to **search** / **sort_by** are:\n\n* name\n* type\n* poller.id\n* poller.name\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindAccsResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/additional-connector-configurations/{acc_id}": {
      "delete": {
        "tags": [
          "Additional Connector Configuration"
        ],
        "summary": "Delete an Additional Connector Configuration (ACC)",
        "description": "Delete an Additional Connector Configuration (ACC)",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccId"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Additional Connector Configuration"
        ],
        "summary": "Find an Additional Connector Configuration (ACC)",
        "description": "Find an Additional Connector Configuration (ACC)",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAccResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Additional Connector Configuration"
        ],
        "summary": "Update an Additional Connector Configuration (ACC)",
        "description": "Update an Additional Connector Configuration (ACC)",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/agent-configurations": {
      "post": {
        "tags": [
          "Poller/agent configuration"
        ],
        "summary": "Add a poller/agent configuration",
        "description": "Add a poller/agent configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAcRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddAcResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Poller/agent configuration"
        ],
        "summary": "Get all poller/agent configurations",
        "description": "Get all poller/agent configurations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindAcsResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/agent-configurations/{ac_id}": {
      "delete": {
        "tags": [
          "Poller/agent configuration"
        ],
        "summary": "Delete a poller/agent configuration",
        "description": "Delete a poller/agent configuration",
        "parameters": [
          {
            "$ref": "#/components/parameters/AgentConfigurationId"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Poller/agent configuration"
        ],
        "summary": "Update a poller/agent configuration",
        "description": "Update a poller/agent configuration",
        "parameters": [
          {
            "$ref": "#/components/parameters/AgentConfigurationId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAcRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Poller/agent configuration"
        ],
        "summary": "Get a poller/agent configuration",
        "description": "Get a poller/agent configuration",
        "parameters": [
          {
            "$ref": "#/components/parameters/AgentConfigurationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAcResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/agent-configurations/{ac_id}/pollers/{poller_id}": {
      "delete": {
        "tags": [
          "Poller/agent configuration"
        ],
        "summary": "Delete a poller/agent configuration's link to a poller",
        "parameters": [
          {
            "$ref": "#/components/parameters/AgentConfigurationId"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/broker/{brokerId}/{tag}": {
      "post": {
        "tags": [
          "Broker"
        ],
        "summary": "Add a Broker input/output",
        "description": "Add a Broker input/output configuration",
        "parameters": [
          {
            "$ref": "#/components/parameters/BrokerId"
          },
          {
            "in": "path",
            "name": "tag",
            "description": "The configuration tag",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "inputs",
                "outputs"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBrokerInputOutputRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBrokerInputOutputResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/broker/{brokerId}/outputs/{outputId}/file": {
      "put": {
        "tags": [
          "Broker"
        ],
        "summary": "Update a broker stream connector output file",
        "description": "Create a configuration file with provided JSON content and update the output configuration accordingly\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/BrokerId"
          },
          {
            "$ref": "#/components/parameters/OutputId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "file_content"
                ],
                "properties": {
                  "file_content": {
                    "type": "string",
                    "description": "Content of the file to be created. Must be a valid JSON encoded string.",
                    "example": "{\"test\": \"hello world\"}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "Path of the created file",
                      "example": "/some/path/my-new-file.json"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/commands": {
      "get": {
        "tags": [
          "Command"
        ],
        "summary": "Find all commands",
        "description": "Return all command configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* type\n* is_locked\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindCommandsResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Command"
        ],
        "summary": "Add a command",
        "description": "Add a command configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCommandRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCommandResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/graphs/templates": {
      "get": {
        "tags": [
          "Graph Template"
        ],
        "summary": "Find all graph templates",
        "description": "Return all graph template configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindGraphTemplatesResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/connectors": {
      "get": {
        "tags": [
          "Connector"
        ],
        "summary": "Find all connectors",
        "description": "Return all connector configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* command.id\n* command.name\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindConnectorsResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/{host_id}": {
      "delete": {
        "tags": [
          "Host"
        ],
        "summary": "Delete a host configuration",
        "description": "Delete a host configuration\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId-2"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Host"
        ],
        "summary": "Partially update a host configuration",
        "description": "Partially update a host configuration.\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId-2"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateHostRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/templates": {
      "get": {
        "tags": [
          "Host template"
        ],
        "summary": "Find all host template configurations",
        "description": "Return all host template configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_locked\n\nChanges in 23.10 :\n\n* `check_interval` was renamed `normal_check_interval:`\n* `active_checks_status` was renamed `active_check_enabled`\n* `passive_checks_status` was renamed `passive_check_enabled`\n* `notifications_status` was renamed `notification_enabled`\n* `url_notes` was renamed `note_url`\n* `note` was renamed `note`\n* `icon` was renamed `icon_id` and is no longer an object but the image ID\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindHostTemplateResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Host template"
        ],
        "summary": "Create a host template configuration",
        "description": "Create a host template configuration\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddHostTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddHostTemplateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/templates/{host_template_id}": {
      "delete": {
        "tags": [
          "Host template"
        ],
        "summary": "Delete a host template configuration",
        "description": "Delete a host template configuration\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostTemplateId"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Host template"
        ],
        "summary": "Partially update a host template configuration",
        "description": "Partially update a host template configuration.\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostTemplateId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateHostTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts": {
      "get": {
        "tags": [
          "Host"
        ],
        "summary": "Find all host configurations",
        "description": "Return all host configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* address\n* poller.id\n* poller.name\n* category.id\n* category.name\n* severity.id\n* severity.name\n* group.id\n* group.name\n* is_activated\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindHostsResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Host"
        ],
        "summary": "Create a host configuration",
        "description": "Create a host configuration\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddHostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddHostResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/categories": {
      "get": {
        "tags": [
          "Host category"
        ],
        "summary": "List host categories",
        "description": "List of host category configurations\n\nThe available parameters to **search** / **sort_by** are:\n* id\n* name\n* alias\n* is_activated\n* hostgroup.name\n* hostgroup.id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.Host.Category"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Host category"
        ],
        "summary": "Create a host category",
        "description": "Create a host category\n\nThis endpoint does NOT update the ACL rights with the new host category\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.Host.Category.Add"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/categories/{host_category_id}": {
      "get": {
        "tags": [
          "Host category"
        ],
        "summary": "Get a host category",
        "description": "Get a host category configuration\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostCategoryId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration.Host.Category"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Host category"
        ],
        "summary": "Update a host category",
        "description": "Update a host category\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostCategoryId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.Host.Category.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Host category"
        ],
        "summary": "Delete a host category",
        "description": "Delete a host category configuration\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostCategoryId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/{host_id}/services/deploy": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Add services to a host based on associated host template",
        "description": "Add services to a host based on associated host template\n",
        "responses": {
          "201": {
            "description": "Objects created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "services": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeployServiceResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/categories": {
      "get": {
        "tags": [
          "Service category"
        ],
        "summary": "List service categories",
        "description": "List of service category configurations\n\nThe available parameters to **search** / **sort_by** are:\n* id\n* name\n* alias\n* is_activated\n* host.id\n* host.name\n* hostgroup.id\n* hostgroup.name\n* hostcategory.id\n* hostcategory.name\n* servicegroup.id\n* servicegroup.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.Host.Category"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Service category"
        ],
        "summary": "Create a service category",
        "description": "Create a service category\n\nThis endpoint does NOT update the ACL rights with the new service category\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.Service.Category.Add"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/categories/{service_category_id}": {
      "delete": {
        "tags": [
          "Host category"
        ],
        "summary": "Delete a service category",
        "description": "Delete a service category configuration\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ServiceCategoryId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/templates": {
      "get": {
        "tags": [
          "Service template"
        ],
        "summary": "Find all service template",
        "description": "Return all service template configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_locked\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceTemplate"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Service template"
        ],
        "summary": "Add a service template",
        "description": "Add a service template configuration.\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "required": [
                      "name",
                      "alias"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/NewServiceTemplate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddServiceTemplateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/templates/{service_template_id}": {
      "delete": {
        "tags": [
          "Service template"
        ],
        "summary": "Delete a service template",
        "description": "Delete a service template configuration",
        "parameters": [
          {
            "$ref": "#/components/parameters/ServiceTemplateId"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Service template"
        ],
        "summary": "Partial update of a service template",
        "description": "Partial update of a service template configuration\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ServiceTemplateId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateServiceTemplate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/{service_id}": {
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Delete a service",
        "description": "Delete a service configuration",
        "parameters": [
          {
            "$ref": "#/components/parameters/ServiceId-2"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Service"
        ],
        "summary": "Partial update of a service",
        "description": "Partial update of a service configuration\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ServiceId-2"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateServiceRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Add a service",
        "description": "Add a service configuration\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "required": [
                      "name",
                      "host_id"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/AddServiceRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddServiceResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find all services",
        "description": "Return all service configurations.\n\nThe available parameters to **search** by are:\n\n* name\n* host.id\n* host.name\n* category.id\n* category.name\n* severity.id\n* severity.name\n* group.id\n* group.name\n* hostgroup.id\n* hostgroup.name\n* hostcategory.id\n* hostcategory.name\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindServicesResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/services/categories": {
      "get": {
        "tags": [
          "Service category"
        ],
        "summary": "List all real-time service categories",
        "description": "List of all service categories in real-time context\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* host.id\n* host.name\n* host_group.id\n* host_group.name\n* host_category.id\n* host_category.name\n* service_group.id\n* service_group.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.Category"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/severities": {
      "get": {
        "tags": [
          "Host severity"
        ],
        "summary": "List all host severities",
        "description": "List of all host severity configurations\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* level\n* is_activated\n\nChanges in 23.04 :\n\n* `icon` was renamed `icon_id` and is no longer an object but the image ID\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.Host.Severity"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Host severity"
        ],
        "summary": "Create a host severity",
        "description": "Create a host severity\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "host-severity-name"
                  },
                  "alias": {
                    "type": "string",
                    "example": "host-severity-alias"
                  },
                  "level": {
                    "type": "integer",
                    "example": 2
                  },
                  "icon_id": {
                    "type": "integer",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/severities/{host_severity_id}": {
      "delete": {
        "tags": [
          "Host severity"
        ],
        "summary": "Delete a host severity",
        "description": "Delete a host severity configuration\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostSeverityId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Host severity"
        ],
        "summary": "Get a host severity",
        "description": "Get a host severity configuration\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration.Host.Severity"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Host severity"
        ],
        "summary": "Update a host severity",
        "description": "Update a host severity\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostSeverityId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.Host.Severity.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/groups": {
      "get": {
        "tags": [
          "Host group"
        ],
        "summary": "List all host groups",
        "description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n* hostcategory.id\n* hostcategory.name\n\nChanges in 23.04 :\n\n* `icon` was renamed `icon_id` and is no longer an object but the image ID\n* `icon_map` was renamed `icon_map_id` and is no longer an object but the image ID\n\n*This endpoint has a specific behaviour on Cloud environments.*\n*Please check the dedicated Cloud API documentation.*\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.Host.Group"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Host group"
        ],
        "summary": "Add a host group",
        "description": "Add a new host group configuration.\n\nMandatory body properties are:\n\n* name\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.Host.Group.Add"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration.Host.Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/groups/{hostgroup_id}": {
      "get": {
        "tags": [
          "Host group"
        ],
        "summary": "Get a host group",
        "description": "`internal`\n\nGet host group.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostGroupId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration.Host.Group"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Host group"
        ],
        "summary": "Delete a host group",
        "description": "`internal`\n\nDelete host group.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostGroupId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Host group"
        ],
        "summary": "Update a host group",
        "description": "`internal`\n\nUpdate host group.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostGroupId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.Host.Group.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/groups": {
      "get": {
        "tags": [
          "Service group"
        ],
        "summary": "List all service groups",
        "description": "Return all service group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n* host.id\n* host.name\n* hostgroup.id\n* hostgroup.name\n* hostcategory.id\n* hostcategory.name\n* servicecategory.id\n* servicecategory.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.Service.Group"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Service group"
        ],
        "summary": "Add a service group",
        "description": "Add a new service group configuration.\n\nMandatory body properties are:\n\n* name\n* alias\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.Service.Group.Add"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration.Service.Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/groups/{servicegroup_id}": {
      "delete": {
        "tags": [
          "Service group"
        ],
        "summary": "Delete a host group",
        "description": "`internal`\n\nDelete service group.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ServiceGroupId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/severities": {
      "get": {
        "tags": [
          "Service severity"
        ],
        "summary": "List all service severities",
        "description": "List of all service severity configurations\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* level\n* is_activated\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SeverityResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Service severity"
        ],
        "summary": "Create a service severity",
        "description": "Create a service severity\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeverityRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeverityResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/services/severities/{service_severity_id}": {
      "delete": {
        "tags": [
          "Service severity"
        ],
        "summary": "Delete a service severity",
        "description": "Delete a service severity configuration\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/SeverityId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Service severity"
        ],
        "summary": "Update a service severity",
        "description": "Update a service severity configuration\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/SeverityId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeverityRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/icons": {
      "get": {
        "tags": [
          "Icons"
        ],
        "summary": "List all icons",
        "description": "List all configured icons.\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "id of the icon",
                            "example": 1
                          },
                          "directory": {
                            "type": "string",
                            "description": "directory of the icon",
                            "example": "ppm"
                          },
                          "name": {
                            "type": "string",
                            "description": "name of the icon",
                            "example": "operatingsystems-linux-snmp-linux-128.png"
                          },
                          "url": {
                            "type": "string",
                            "description": "url to get the icon",
                            "example": "/centreon/img/media/ppm/operatingsystems-linux-snmp-linux-128.png"
                          }
                        }
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/medias": {
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Create a media",
        "description": "Create a media\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddMediaRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMediaResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Find all media configurations",
        "description": "Return all media configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* filename\n* directory\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindMediasResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/medias/{media_id}/content": {
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Update the media content on the file system",
        "description": "Updates on the file system the contents of the file linked to the provided media ID\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMediaRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMediaResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/proxy": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Display the default configuration of the proxy",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration.Proxy"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update the default configuration of the proxy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.Proxy"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/monitoring-servers": {
      "get": {
        "tags": [
          "Monitoring server"
        ],
        "summary": "List all monitoring servers configurations",
        "description": "List all monitoring servers configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * name\n  * is_localhost\n  * address\n  * is_activate\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.MonitoringServerMain"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/monitoring-servers/{monitoring_server_id}/generate": {
      "get": {
        "tags": [
          "Monitoring server"
        ],
        "summary": "Generate the configuration of the monitoring server",
        "description": "Generate and move the configuration files of the monitoring server\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/MonitoringServerId"
          }
        ],
        "responses": {
          "204": {
            "description": "Generation OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/monitoring-servers/{monitoring_server_id}/reload": {
      "get": {
        "tags": [
          "Monitoring server"
        ],
        "summary": "Reload the configuration of the monitoring server",
        "description": "Reload the configuration files of the monitoring server\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/MonitoringServerId"
          }
        ],
        "responses": {
          "204": {
            "description": "Reload OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/monitoring-servers/{monitoring_server_id}/generate-and-reload": {
      "get": {
        "tags": [
          "Monitoring server"
        ],
        "summary": "Generate and reload the configuration of the monitoring server",
        "description": "Generate, move and reload the configuration files of the monitoring server\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/MonitoringServerId"
          }
        ],
        "responses": {
          "204": {
            "description": "Generation and reload OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/monitoring-servers/generate": {
      "get": {
        "tags": [
          "Monitoring server"
        ],
        "summary": "Generate the configuration for all monitoring servers",
        "description": "Generate and move the configuration files for all monitoring servers.\n\nThe process will stop at the first error.\n",
        "responses": {
          "204": {
            "description": "Generation OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/monitoring-servers/reload": {
      "get": {
        "tags": [
          "Monitoring server"
        ],
        "summary": "Reload the configuration for all monitoring servers",
        "description": "Reload the configuration files for all monitoring servers.\n\nThe process will stop at the first error.\n",
        "responses": {
          "204": {
            "description": "Reload OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/monitoring-servers/generate-and-reload": {
      "get": {
        "tags": [
          "Monitoring server"
        ],
        "summary": "Generate and reload the configuration for all monitoring servers",
        "description": "Generate, move and reload the configuration files for all monitoring servers.\n\nThe process will stop at the first error.\n",
        "responses": {
          "204": {
            "description": "Generation and reload OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/metaservices": {
      "get": {
        "tags": [
          "Meta service"
        ],
        "summary": "List all meta services configurations",
        "description": "List all meta services configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * name\n  * is_activate\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.MetaServices"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/metaservices/{meta_id}": {
      "get": {
        "tags": [
          "Meta service"
        ],
        "summary": "Get a meta service",
        "description": "Get a meta service configuration by its id",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration.MetaServices"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/metaservices/{meta_id}/metrics": {
      "get": {
        "tags": [
          "Meta service"
        ],
        "summary": "List all meta service metrics",
        "description": "List all meta services metrics from realtime.\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * name\n  * service_description\n  * host_name\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          },
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.MetaServiceMetric"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/{host_id}/notification-policy": {
      "get": {
        "tags": [
          "Notification Policy"
        ],
        "summary": "Get notification policy of a host",
        "description": "Return the notified contacts and contact groups of a host.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationPolicy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/hosts/{host_id}/services/{service_id}/notification-policy": {
      "get": {
        "tags": [
          "Notification Policy"
        ],
        "summary": "Get notification policy of a service",
        "description": "Return the notified contacts and contact groups of a service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationPolicy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/metaservices/{meta_id}/notification-policy": {
      "get": {
        "tags": [
          "Notification Policy"
        ],
        "summary": "Get notification policy of a meta service",
        "description": "Return the notified contacts and contact groups of a meta service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationPolicy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/servers": {
      "get": {
        "tags": [
          "Monitoring server"
        ],
        "summary": "List all real time monitoring servers",
        "description": "List all monitoring servers configured and stored in real time.\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * name\n  * running\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.Servers"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/acl/actions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List allowed actions",
        "description": "List allowed actions of the current user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "object",
                      "properties": {
                        "check": {
                          "type": "boolean",
                          "description": "if check is allowed on host",
                          "example": true
                        },
                        "acknowledgement": {
                          "type": "boolean",
                          "description": "if acknowledgement is allowed on host",
                          "example": true
                        },
                        "downtime": {
                          "type": "boolean",
                          "description": "if downtime is allowed on host",
                          "example": false
                        }
                      }
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "check": {
                          "type": "boolean",
                          "description": "if check is allowed on service",
                          "example": true
                        },
                        "acknowledgement": {
                          "type": "boolean",
                          "description": "if acknowledgement is allowed on service",
                          "example": true
                        },
                        "downtime": {
                          "type": "boolean",
                          "description": "if downtime is allowed on service",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/timeperiods": {
      "get": {
        "tags": [
          "Time period"
        ],
        "summary": "Get all time periods",
        "description": "Get list of all time periods\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindTimePeriodResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Time period"
        ],
        "summary": "Create a new time period",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTimePeriodRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Time period created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindTimePeriodResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/timeperiods/{id}": {
      "delete": {
        "tags": [
          "Time period"
        ],
        "summary": "Delete a time period",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the time period to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Time period deleted"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Time period"
        ],
        "summary": "Get a time period",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Time period ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration.TimePeriod"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Time period"
        ],
        "summary": "Update a time period",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the time period to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration.NewTimePeriod"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Time period updated"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get configured users",
        "description": "Get list of configured users\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* alias\n* name\n* email\n* is_admin\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User.Listing"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/users/current/parameters": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List user parameters",
        "description": "List configured parameters for the current user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentParameters.Get"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update a user",
        "description": "Update a user\n\nThe available parameters to be updated are :\n\n* theme\n* user_interface_density\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentParameters.Patch"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User updated"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/contacts/templates": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List contact templates",
        "description": "List configured contact templates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.ContactTemplate"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/contacts/groups": {
      "get": {
        "tags": [
          "Contact group"
        ],
        "summary": "List contact groups",
        "description": "Return all contact groups.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* type\n* comments\n* is_activated\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FindContactGroupsResponse"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "List all dashboards",
        "description": "Return all dashboard configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* created_by\n* created_at\n* updated_at\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Dashboard.Listing"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Add a dashboard",
        "description": "Add a new dashboard configuration.\n\nMandatory body properties are:\n\n* name\n\n`Since Centreon web 23.10`\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard.Add"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.Listing"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards/{dashboard_id}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get a dashboard",
        "description": "Return one dashboard configuration.\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/DashboardId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.Find"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Partial update of a dashboard",
        "description": "`Since Centreon web 23.10`\n\nPartial update dashboard.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/DashboardId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard.PartialUpdate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Delete a dashboard",
        "description": "Delete one dashboard configuration.\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/DashboardId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards/{dashboard_id}/favorites": {
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Unset dashboard from current user favorites",
        "description": "Unset dashboard from current user favorites\n\n`Since Centreon Web 24.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/DashboardId"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards/favorites": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "List all dashboards set as favorite for the current user",
        "description": "Return all dashboard configurations that were marked as favorite for the current user.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* created_by\n* created_at\n* updated_at\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Dashboard.Listing"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Set dashboard as favorite for the current user",
        "description": "Set dashboard as favorite for the current user\n\n`Since Centreon Web 24.10`\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard.AddAsFavorite"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards/{dashboard_id}/shares": {
      "put": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Update all the contact and contact groups shares of a dashboard",
        "description": "Update all the contact and contact groups shares of a dashboard.",
        "parameters": [
          {
            "$ref": "#/components/parameters/DashboardId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareDashboardRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Delete the contact access right of a dashboard",
        "description": "Delete the contact access right of a dashboard.\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/DashboardId"
          },
          {
            "$ref": "#/components/parameters/ContactId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards/{dashboard_id}/access_rights/contacts/{contact_id}": {
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Delete the contact access right of a dashboard",
        "description": "Delete the contact access right of a dashboard.\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/DashboardId"
          },
          {
            "$ref": "#/components/parameters/ContactId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards/{dashboard_id}/access_rights/contactgroups/{contact_group_id}": {
      "delete": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Delete the contact group access right of a dashboard",
        "description": "Delete the contact access right of a dashboard.\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/DashboardId"
          },
          {
            "$ref": "#/components/parameters/ContactGroupId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards/contacts": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "List all contacts for the sharing modal of a dashboard",
        "description": "Return all contacts for the sharing modal of a dashboard.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Contact ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Contact name"
                          },
                          "email": {
                            "type": "string",
                            "description": "Contact email"
                          },
                          "most_permissive_role": {
                            "type": "string",
                            "description": "Most Permissive role on dashboards"
                          }
                        }
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/dashboards/contactgroups": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "List all contact groups for the sharing modal of a dashboard",
        "description": "Return all contact groups for the sharing modal of a dashboard.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n\n`Since Centreon web 23.10`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Contact group ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Contact group name"
                          },
                          "most_permissive_role": {
                            "type": "string",
                            "description": "Most Permissive role on dashboards"
                          }
                        }
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/dashboard/metrics/performances": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "List metrics",
        "description": "Get list of all metrics\n\nThe available parameters to **search** / **sort_by** are:\nAND\n* hostgroup.id\n* hostcategory.id\n* host.id\n* servicegroup.id\n* servicecategory.id\n* service.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Dashboard.MetricsPerformances"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/dashboard/metrics/performances/data": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "List metrics",
        "parameters": [
          {
            "$ref": "#/components/parameters/Start"
          },
          {
            "$ref": "#/components/parameters/End"
          },
          {
            "$ref": "#/components/parameters/MetricNames"
          }
        ],
        "description": "Get data for given metrics\n\nThe available parameters to **search** / **sort_by** are:\nAND\n* hostgroup.id\n* hostcategory.id\n* host.id\n* servicegroup.id\n* servicecategory.id\n* service.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.MetricsPerformancesData"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/dashboard/metrics/top": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "List the Top/Bottom resources for given metric",
        "description": "List the Top/Bottom resources for given metric",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetricName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.MetricsTop"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/hosts": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "List all resources by their parents",
        "description": "List all the resources in real-time monitoring by their parents : parent -> resources.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* fqdn\n* type\n* status_code\n* status\n* action_url\n* notes_label\n* notes_url\n* parent_name\n* parent_status\n* in_downtime\n* in_flapping\n* acknowledged\n* last_status_change\n* tries\n* last_check\n* information\n* monitoring_server_name\n* status_types\n\nOnly for **searching**:\n\n---\n\n* h.name\n* h.alias\n* h.address\n* h.fqdn\n* s.description\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          },
          {
            "$ref": "#/components/parameters/FilterType"
          },
          {
            "$ref": "#/components/parameters/FilterState"
          },
          {
            "$ref": "#/components/parameters/FilterStatus"
          },
          {
            "$ref": "#/components/parameters/FilterHostgroupName"
          },
          {
            "$ref": "#/components/parameters/FilterServicegroupName"
          },
          {
            "$ref": "#/components/parameters/FilterServiceCategoryName"
          },
          {
            "$ref": "#/components/parameters/FilterHostCategoryName"
          },
          {
            "$ref": "#/components/parameters/FilterHostSeverityName"
          },
          {
            "$ref": "#/components/parameters/FilterServiceSeverityName"
          },
          {
            "$ref": "#/components/parameters/FilterHostSeverityLevel"
          },
          {
            "$ref": "#/components/parameters/FilterServiceSeverityLevel"
          },
          {
            "$ref": "#/components/parameters/FilterMonitoringServerName"
          },
          {
            "$ref": "#/components/parameters/FilterStatusTypes"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ResourcesByParent"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/configuration/access-groups": {
      "get": {
        "tags": [
          "Access Control"
        ],
        "summary": "List access groups",
        "description": "List access groups available for a user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Configuration.AccessGroup"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/filters/{page_name}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List user filters by page",
        "description": "`internal`\n\nList user filters saved for a given page.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterPageName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User.Filter"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "User filters"
        ],
        "summary": "Add user filter",
        "description": "`internal`\n\nAdd user filter for a given page.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterPageName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "filter name",
                    "example": "my filter 1"
                  },
                  "criterias": {
                    "type": "array",
                    "description": "list of filter criterias",
                    "items": {
                      "type": "object",
                      "example": {
                        "type": "text",
                        "name": "field1",
                        "value": "search value 1"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/filters/{page_name}/{filter_id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Detailed user filter",
        "description": "`internal`\n\nGet detailed information of a user filter for a given page.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterPageName"
          },
          {
            "$ref": "#/components/parameters/FilterId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "User filters"
        ],
        "summary": "Update user filter",
        "description": "`internal`\n\nUpdate user filter for a given page.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterPageName"
          },
          {
            "$ref": "#/components/parameters/FilterId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User.Filter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "User filters"
        ],
        "summary": "Patch user filter",
        "description": "`internal`\n\nPatch user filter order for a given page.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterPageName"
          },
          {
            "$ref": "#/components/parameters/FilterId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "order"
                ],
                "properties": {
                  "order": {
                    "type": "integer",
                    "description": "filter order",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "User filters"
        ],
        "summary": "Delete user filter",
        "description": "`internal`\n\nDelete user filter for a given page.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterPageName"
          },
          {
            "$ref": "#/components/parameters/FilterId"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "List all resources including hosts and services",
        "description": "List all the resources in real-time monitoring : hosts and services.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* fqdn\n* type\n* status_code\n* status\n* action_url\n* notes_label\n* notes_url\n* parent_name\n* parent_status\n* in_downtime\n* acknowledged\n* last_status_change\n* tries\n* last_check\n* information\n* monitoring_server_name\n* status_types\n\nOnly for **searching**:\n\n---\n\n* h.name\n* h.alias\n* h.address\n* h.fqdn\n* s.description\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterType"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterState"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterStatus"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterHostgroupName"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterServicegroupName"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterServiceCategoryName"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterHostCategoryName"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterHostSeverityName"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterServiceSeverityName"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterHostSeverityLevel"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterServiceSeverityLevel"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterMonitoringServerName"
          },
          {
            "$ref": "#/components/parameters/ResourceFilterStatusTypes"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.ResourceMain"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/hosts/{host_id}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Get a Host resource type detail",
        "description": "Return the full detail of a resource typed Host.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceHostDetail"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/HostNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/hosts/{host_id}/services/{service_id}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Get a Service resource type detail",
        "description": "Return the full detail of a resource typed Service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceServiceDetail"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundHostOrService"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts": {
      "get": {
        "tags": [
          "Host"
        ],
        "summary": "List all hosts",
        "description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ShowService"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.HostMain"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}": {
      "get": {
        "tags": [
          "Host"
        ],
        "summary": "Get a host",
        "description": "Return a single host with full details and some details about its services.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitoring.HostFull"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/status": {
      "get": {
        "tags": [
          "Host"
        ],
        "summary": "Count hosts by status",
        "description": "Count hosts by their status (UP/DOWN/UNREACHABLE/PENDING)\n\nThe available parameters to **search** / **sort_by** are:\n\n* name\n* status\n* service.name\n* service.id\n* host_category.name\n* host_category.id\n* host_group.name\n* host_group.id\n* service_group.name\n* service_group.id\n* service_category.name\n* service_category.id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostsStatus"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/services/status": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Count services by status",
        "description": "Count services by their status (OK/WARNING/CRITICAL/UNKNOWN/PENDING)\n\nThe available parameters to **search** / **sort_by** are:\n\n* name\n* status\n* host.name\n* host.id\n* host_category.name\n* host_category.id\n* host_group.name\n* host_group.id\n* service_group.name\n* service_group.id\n* service_category.name\n* service_category.id\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesStatus"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/services": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List all services",
        "description": "List all the services in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* host_group.id\n* service.display_name\n* service.description\n* service.is_acknowledged\n* service.output\n* service.state\n* service_group.id\n* poller.id\n* service.downtime\n* service.criticality\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Monitoring.ServiceMain"
                          },
                          {
                            "$ref": "#/components/schemas/Monitoring.ServiceWithHost"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/services/names": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List all services unique names",
        "description": "List all the services in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* name\n* host.id\n* host.name\n* host_group.id\n* host_group.name\n* host_category.id\n* host_category.name\n* service_group.id\n* service_group.name\n* service_category.id\n* service_category.name\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Cpu"
                          }
                        }
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List services related to a host",
        "description": "List all services related to a host in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* service.id\n* service.description\n* service.display_name\n* service_group.id\n* service.is_acknowledged\n* service.state\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.ServiceMain"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get a service",
        "description": "Return a single service with full details.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitoring.ServiceFull"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/servicegroups": {
      "get": {
        "tags": [
          "Service group"
        ],
        "summary": "Get service groups by host id and service id",
        "description": "Return a list of service groups for host-service pair.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitoring.ServiceGroup"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/hostgroups": {
      "get": {
        "tags": [
          "Host group"
        ],
        "summary": "List all host groups by host id",
        "description": "List all the host groups in real-time monitoring by host id\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Monitoring.HostGroup"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/categories": {
      "get": {
        "tags": [
          "Host category"
        ],
        "summary": "List all real-time host categories",
        "description": "List of all host categories in real-time context\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* host_group.id\n* host_group.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.Category"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hostgroups": {
      "get": {
        "tags": [
          "Host group"
        ],
        "summary": "List all host groups",
        "description": "List all the host groups in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.display_name\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host_category.id\n* host_category.name\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ShowHost"
          },
          {
            "$ref": "#/components/parameters/ShowService"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Monitoring.HostGroup"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/servicegroups": {
      "get": {
        "tags": [
          "Service group"
        ],
        "summary": "List all service groups",
        "description": "List all the service groups in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.display_name\n* host.state\n* poller.id\n* service.id\n* service.name\n* service.display_name\n* host_group.id\n* host_group.name\n* host_categories.id\n* host_categories.name\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ShowService"
          },
          {
            "$ref": "#/components/parameters/ShowHost"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Monitoring.ServiceGroup"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/severities/service": {
      "get": {
        "tags": [
          "Severity"
        ],
        "summary": "List all service severities from the realtime",
        "description": "List all the service severities in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* name\n* level\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Monitoring.Severity"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/severities/host": {
      "get": {
        "tags": [
          "Severity"
        ],
        "summary": "List all host severities from real-time data",
        "description": "List all the host severities in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* name\n* level\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Monitoring.Severity"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/acknowledgements": {
      "get": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "List all acknowledgements",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Acknowledgement.Host"
                          },
                          {
                            "$ref": "#/components/schemas/Acknowledgement.Service"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/acknowledgements": {
      "delete": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Massively disacknowledge resources",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Acknowledgement.Disacknowledge.Bulk"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/acknowledgements/{acknowledgement_id}": {
      "get": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Display one acknowledgement",
        "description": "Display one acknowledgement.",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcknowledgementId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Acknowledgement.Service"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/acknowledgements": {
      "get": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "List all hosts acknowledgements",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Acknowledgement.Host"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Add an acknowledgement on multiple hosts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Acknowledgement.Hosts.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Commands Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/services/acknowledgements": {
      "get": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "List all services acknowledgements",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Acknowledgement.Service"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Add an acknowledgement on multiple services",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Acknowledgement.Services.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Commands Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/acknowledgements": {
      "get": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "List all acknowledgements of a host",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          },
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Acknowledgement.Host"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Add an acknowledgement on chosen host",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Acknowledgement.Host.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Cancel an acknowledgement on a host",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/acknowledgements": {
      "get": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "List all acknowledgements of a service",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          },
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Acknowledgement.Service"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Add an acknowledgement on chosen service",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Acknowledgement.Service.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Cancel an acknowledgement on a service",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/metaservices/{meta_id}/acknowledgements": {
      "get": {
        "tags": [
          "Acknowledgement",
          "Meta service"
        ],
        "summary": "List all acknowledgements of a metaservice",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          },
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Acknowledgement.Service"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Add an acknowledgement on chosen metaservice",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Acknowledgement.Service.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Cancel an acknowledgement on a metaservice",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/downtimes": {
      "get": {
        "tags": [
          "Downtime"
        ],
        "summary": "List all downtimes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "description": "List all downtimes\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * entry_time\n  * is_cancelled\n  * comment\n  * deletion_time\n  * duration\n  * end_time\n  * is_fixed\n  * start_time\n  * host.id\n  * host.name\n  * host.alias\n  * host.address\n  * host.display_name\n  * host.state\n  * poller.id\n  * contact.id\n  * contact.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Downtime.Service"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/downtimes/{downtime_id}": {
      "get": {
        "tags": [
          "Downtime"
        ],
        "summary": "Display one downtime",
        "description": "Display one downtime.",
        "parameters": [
          {
            "$ref": "#/components/parameters/DowntimeId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Downtime.Service"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Downtime"
        ],
        "summary": "Cancel a downtime",
        "description": "Cancel a downtime.",
        "parameters": [
          {
            "$ref": "#/components/parameters/DowntimeId"
          }
        ],
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/downtimes": {
      "get": {
        "tags": [
          "Downtime"
        ],
        "summary": "List all hosts downtimes",
        "description": "List all downtimes of hosts\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * entry_time\n  * is_cancelled\n  * comment\n  * deletion_time\n  * duration\n  * end_time\n  * is_fixed\n  * start_time\n  * host.id\n  * host.name\n  * host.alias\n  * host.address\n  * host.display_name\n  * host.state\n  * poller.id\n  * contact.id\n  * contact.name\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Downtime.Host"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Downtime"
        ],
        "summary": "Add an downtime on multiple hosts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Downtime.Hosts.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Commands Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/services/downtimes": {
      "get": {
        "tags": [
          "Downtime"
        ],
        "summary": "List all services downtimes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "description": "List all downtimes of services\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * entry_time\n  * is_cancelled\n  * comment\n  * deletion_time\n  * duration\n  * end_time\n  * is_fixed\n  * start_time\n  * host.id\n  * host.name\n  * host.alias\n  * host.address\n  * host.display_name\n  * host.state\n  * poller.id\n  * contact.id\n  * contact.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Downtime.Service"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Downtime"
        ],
        "summary": "Add an downtime on multiple services",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Downtime.Services.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Commands Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/downtimes": {
      "get": {
        "tags": [
          "Downtime"
        ],
        "summary": "List all downtimes of a host",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ShowService"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "description": "List all downtimes of a host.\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * entry_time\n  * is_cancelled\n  * comment\n  * deletion_time\n  * duration\n  * end_time\n  * is_fixed\n  * start_time\n  * contact.id\n  * contact.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Downtime.Host"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Downtime"
        ],
        "summary": "Add a downtime on a host",
        "description": "Add a downtime on a host.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Downtime.Host.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/downtimes": {
      "get": {
        "tags": [
          "Downtime"
        ],
        "summary": "List all downtimes of a service",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          },
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "description": "List all downtimes of a service.\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * entry_time\n  * is_cancelled\n  * comment\n  * deletion_time\n  * duration\n  * end_time\n  * is_fixed\n  * start_time\n  * contact.id\n  * contact.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Downtime.Service"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Downtime"
        ],
        "summary": "Add a downtime on a service",
        "description": "Add a downtime on a service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Downtime.Service.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/metaservices/{meta_id}/downtimes": {
      "get": {
        "tags": [
          "Downtime",
          "Meta service"
        ],
        "summary": "List all downtimes of a metaservice",
        "parameters": [
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          },
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "description": "List all downtimes of a service.\n\nThe available parameters to **search** / **sort_by** are:\n\n  * id\n  * entry_time\n  * is_cancelled\n  * comment\n  * deletion_time\n  * duration\n  * end_time\n  * is_fixed\n  * start_time\n  * contact.id\n  * contact.name\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Downtime.Service"
                          }
                        ]
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Downtime"
        ],
        "summary": "Add a downtime on a metaservice",
        "description": "Add a downtime on a metaservice.",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Downtime.Service.Add"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/check": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Check multiple hosts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Check.Hosts"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Commands Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/services/check": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Check multiple services",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Check.Services"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Commands Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/check": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Check host",
        "description": "Schedule immediate check on chosen host",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Check.Host"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/check": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Check service",
        "description": "Schedule immediate check on chosen service",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Check.Service"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Host or service not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/metaservices/{meta_id}/check": {
      "post": {
        "tags": [
          "Check",
          "Meta service"
        ],
        "summary": "Check metaservice",
        "description": "Schedule immediate check on chosen metaservice",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Check.Service"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Host or service not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/check": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Check resources",
        "description": "Schedule immediate check on chosen resources",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Check.Resources"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Host or service not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/submit": {
      "post": {
        "tags": [
          "Submit"
        ],
        "summary": "Submit a result to a single host",
        "description": "Submit a result (check status, output and perfdata) to a single host",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitResult.Host"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Host not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/submit": {
      "post": {
        "tags": [
          "Submit"
        ],
        "summary": "Submit a result to a single service",
        "description": "Submit a result (check status, output and perfdata) to a single service",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitResult.Service"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Host or service not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/metaservices/{meta_id}/submit": {
      "post": {
        "tags": [
          "Submit",
          "Meta service"
        ],
        "summary": "Submit a result to a single metaservice",
        "description": "Submit a result (check status, output and perfdata) to a single metaservice",
        "parameters": [
          {
            "$ref": "#/components/parameters/MetaId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitResult.Service"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Host or service not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/submit": {
      "post": {
        "tags": [
          "Submit"
        ],
        "summary": "Submit result to resources",
        "description": "Submit a result (check status, output and perfdata) to resources",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitResult.Resources"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Host or service not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/comments": {
      "post": {
        "tags": [
          "Comment"
        ],
        "summary": "Add comment to resources",
        "description": "Add at least one comment to a single or to multiple resources",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment.Resources"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Host or service not found"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "List all metrics of a service",
        "description": "List all of the metrics of a services with their threshold and current value",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId-2"
          },
          {
            "$ref": "#/components/parameters/ServiceId-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metric"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/metrics/start/{start}/end/{end}": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get service metrics",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          },
          {
            "$ref": "#/components/parameters/MetricStartDate"
          },
          {
            "$ref": "#/components/parameters/MetricEndDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "global": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "title of the graph",
                          "example": "graph title"
                        },
                        "start": {
                          "type": "integer",
                          "description": "timestamp of the start interval",
                          "example": 1594504800
                        },
                        "end": {
                          "type": "integer",
                          "description": "timestamp of the end interval",
                          "example": 1594591200
                        },
                        "vertical-label": {
                          "type": "string",
                          "description": "vertical label (should not be used cause multiple y-axis possible)",
                          "example": "Value"
                        },
                        "base": {
                          "type": "string",
                          "description": "base scale",
                          "example": "1024"
                        },
                        "width": {
                          "type": "string",
                          "description": "width of the graph (should not be used)",
                          "example": "550"
                        },
                        "height": {
                          "type": "string",
                          "description": "height of the graph (should not be used)",
                          "example": "140"
                        },
                        "lower-limit": {
                          "type": "string",
                          "description": "lower value of the graph",
                          "example": "0"
                        },
                        "scaled": {
                          "type": "integer",
                          "description": "if the graph needs to be automatically scaled",
                          "example": 1
                        },
                        "multiple_services": {
                          "type": "boolean",
                          "description": "if multiple services are selected (always false)",
                          "example": false
                        }
                      }
                    },
                    "metrics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index_id": {
                            "type": "string",
                            "description": "index id in centreon_storage.index_data table",
                            "example": "4"
                          },
                          "metric_id": {
                            "type": "string",
                            "description": "metric id in centreon_storage.metrics table",
                            "example": "29"
                          },
                          "metric": {
                            "type": "string",
                            "description": "name of the metric",
                            "example": "cpu"
                          },
                          "metric_legend": {
                            "type": "string",
                            "description": "name of the metric in legend",
                            "example": "cpu"
                          },
                          "unit": {
                            "type": "string",
                            "description": "metric unit",
                            "example": "%"
                          },
                          "hidden": {
                            "type": "integer",
                            "description": "if the metric is hidden",
                            "example": 0
                          },
                          "min": {
                            "type": "string",
                            "description": "min value",
                            "example": "0"
                          },
                          "max": {
                            "type": "string",
                            "description": "max value",
                            "example": "100"
                          },
                          "virtual": {
                            "type": "integer",
                            "description": "if the metric is virtual",
                            "example": 0
                          },
                          "ds_data": {
                            "type": "object",
                            "description": "metric line properties",
                            "properties": {
                              "ds_min": {
                                "type": "string",
                                "description": "minimum value",
                                "example": "1"
                              },
                              "ds_max": {
                                "type": "string",
                                "description": "maximum value",
                                "example": "1"
                              },
                              "ds_minmax_int": {
                                "type": "string",
                                "nullable": true,
                                "description": "unknown",
                                "example": null
                              },
                              "ds_last": {
                                "type": "string",
                                "description": "last value",
                                "example": "1"
                              },
                              "ds_average": {
                                "type": "string",
                                "description": "average value",
                                "example": "1"
                              },
                              "ds_total": {
                                "type": "string",
                                "nullable": true,
                                "description": "unknown",
                                "example": null
                              },
                              "ds_tickness": {
                                "type": "string",
                                "description": "unknown",
                                "example": "1"
                              },
                              "ds_color_line_mode": {
                                "type": "string",
                                "description": "unknown",
                                "example": "1"
                              },
                              "ds_color_line": {
                                "type": "string",
                                "description": "color of the line",
                                "example": "#666600"
                              }
                            }
                          },
                          "legend": {
                            "type": "string",
                            "description": "metric name in legend",
                            "example": "cpu (%)"
                          },
                          "stack": {
                            "type": "integer",
                            "description": "if the metric is stacked with other metrics",
                            "example": 0
                          },
                          "warn": {
                            "type": "string",
                            "nullable": true,
                            "description": "warning threshold",
                            "example": null
                          },
                          "warn_low": {
                            "type": "string",
                            "nullable": true,
                            "description": "low warning threshold",
                            "example": null
                          },
                          "crit": {
                            "type": "string",
                            "nullable": true,
                            "description": "critical threshold",
                            "example": null
                          },
                          "crit_low": {
                            "type": "string",
                            "nullable": true,
                            "description": "low critical threshold",
                            "example": null
                          },
                          "ds_color_area_warn": {
                            "type": "string",
                            "description": "color of the area under warning threshold",
                            "example": "#ff9a13"
                          },
                          "ds_color_area_crit": {
                            "type": "string",
                            "description": "color of the area under critical threshold",
                            "example": "#e00b3d"
                          },
                          "ds_order": {
                            "type": "integer",
                            "description": "order used for stacking",
                            "example": 0
                          },
                          "data": {
                            "type": "array",
                            "items": {
                              "type": "number",
                              "description": "value of the metric"
                            },
                            "example": [
                              1,
                              null,
                              1
                            ]
                          },
                          "prints": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "description": "label to display in legend",
                                "example": "Last:1.00"
                              }
                            }
                          },
                          "last_value": {
                            "type": "number",
                            "nullable": true,
                            "description": "last value",
                            "example": 5
                          },
                          "minimum_value": {
                            "type": "number",
                            "nullable": true,
                            "description": "minimum value",
                            "example": 0
                          },
                          "maximum_value": {
                            "type": "number",
                            "nullable": true,
                            "description": "maximum value",
                            "example": 10
                          },
                          "average_value": {
                            "type": "number",
                            "nullable": true,
                            "description": "average value",
                            "example": 5.64
                          }
                        }
                      }
                    },
                    "times": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "timestamp",
                        "description": "timestamp of the tick"
                      },
                      "example": [
                        "1594505100",
                        "1594505400",
                        "1594505700"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundHostOrService"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/status/start/{start}/end/{end}": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get service status data",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          },
          {
            "$ref": "#/components/parameters/MetricStartDate"
          },
          {
            "$ref": "#/components/parameters/MetricEndDate"
          }
        ],
        "description": "Get status data from a service between given interval",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "critical": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "start time (timestamp)",
                            "example": "1581987121"
                          },
                          "end": {
                            "type": "string",
                            "description": "end time (timestamp)",
                            "example": "1581987181"
                          }
                        }
                      }
                    },
                    "warning": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "start time (timestamp)",
                            "example": "1581987121"
                          },
                          "end": {
                            "type": "string",
                            "description": "end time (timestamp)",
                            "example": "1581987181"
                          }
                        }
                      }
                    },
                    "ok": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "start time (timestamp)",
                            "example": "1581987121"
                          },
                          "end": {
                            "type": "string",
                            "description": "end time (timestamp)",
                            "example": "1581987181"
                          }
                        }
                      }
                    },
                    "unknown": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "start time (timestamp)",
                            "example": "1581987121"
                          },
                          "end": {
                            "type": "string",
                            "description": "end time (timestamp)",
                            "example": "1581987181"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundHostOrService"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/metrics/performance": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get service performance data",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          },
          {
            "in": "query",
            "name": "start",
            "required": false,
            "description": "Start date of metrics (default date is 24 hours in the past)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-18T00:00:00"
            }
          },
          {
            "in": "query",
            "name": "end",
            "required": false,
            "description": "End date of metrics (default date is current date)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-19T00:00:00"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "base": {
                      "type": "string",
                      "description": "base scale",
                      "example": 1024
                    },
                    "metrics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index_id": {
                            "type": "string",
                            "description": "index id in centreon_storage.index_data table",
                            "example": "4"
                          },
                          "metric_id": {
                            "type": "string",
                            "description": "metric id in centreon_storage.metrics table",
                            "example": "29"
                          },
                          "metric": {
                            "type": "string",
                            "description": "name of the metric",
                            "example": "cpu"
                          },
                          "metric_legend": {
                            "type": "string",
                            "description": "name of the metric in legend",
                            "example": "cpu"
                          },
                          "unit": {
                            "type": "string",
                            "description": "metric unit",
                            "example": "%"
                          },
                          "hidden": {
                            "type": "integer",
                            "description": "if the metric is hidden",
                            "example": 0
                          },
                          "min": {
                            "type": "string",
                            "description": "min value",
                            "example": "0"
                          },
                          "max": {
                            "type": "string",
                            "description": "max value",
                            "example": "100"
                          },
                          "virtual": {
                            "type": "integer",
                            "description": "if the metric is virtual",
                            "example": 0
                          },
                          "ds_data": {
                            "type": "object",
                            "description": "metric line properties",
                            "properties": {
                              "ds_min": {
                                "type": "string",
                                "description": "minimum value",
                                "example": "1"
                              },
                              "ds_max": {
                                "type": "string",
                                "description": "maximum value",
                                "example": "1"
                              },
                              "ds_minmax_int": {
                                "type": "string",
                                "nullable": true,
                                "description": "unknown",
                                "example": null
                              },
                              "ds_last": {
                                "type": "string",
                                "description": "last value",
                                "example": "1"
                              },
                              "ds_average": {
                                "type": "string",
                                "description": "average value",
                                "example": "1"
                              },
                              "ds_total": {
                                "type": "string",
                                "nullable": true,
                                "description": "unknown",
                                "example": null
                              },
                              "ds_tickness": {
                                "type": "string",
                                "description": "unknown",
                                "example": "1"
                              },
                              "ds_color_line_mode": {
                                "type": "string",
                                "description": "unknown",
                                "example": "1"
                              },
                              "ds_color_line": {
                                "type": "string",
                                "description": "color of the line",
                                "example": "#666600"
                              }
                            }
                          },
                          "legend": {
                            "type": "string",
                            "description": "metric name in legend",
                            "example": "cpu (%)"
                          },
                          "stack": {
                            "type": "integer",
                            "description": "if the metric is stacked with other metrics",
                            "example": 0
                          },
                          "warn": {
                            "type": "string",
                            "nullable": true,
                            "description": "warning threshold",
                            "example": null
                          },
                          "warn_low": {
                            "type": "string",
                            "nullable": true,
                            "description": "low warning threshold",
                            "example": null
                          },
                          "crit": {
                            "type": "string",
                            "nullable": true,
                            "description": "critical threshold",
                            "example": null
                          },
                          "crit_low": {
                            "type": "string",
                            "nullable": true,
                            "description": "low critical threshold",
                            "example": null
                          },
                          "ds_color_area_warn": {
                            "type": "string",
                            "description": "color of the area under warning threshold",
                            "example": "#ff9a13"
                          },
                          "ds_color_area_crit": {
                            "type": "string",
                            "description": "color of the area under critical threshold",
                            "example": "#e00b3d"
                          },
                          "ds_order": {
                            "type": "integer",
                            "description": "order used for stacking",
                            "example": 0
                          },
                          "data": {
                            "type": "array",
                            "items": {
                              "type": "number",
                              "format": "float",
                              "description": "value of the metric"
                            },
                            "example": [
                              1,
                              null,
                              1
                            ]
                          },
                          "prints": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "description": "label to display in legend",
                                "example": "Last:1.00"
                              }
                            }
                          },
                          "minimum_value": {
                            "type": "number",
                            "format": "float",
                            "description": "minimum value",
                            "example": 1
                          },
                          "maximum_value": {
                            "type": "number",
                            "format": "float",
                            "description": "maximum value",
                            "example": 1
                          }
                        }
                      }
                    },
                    "times": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "timestamp",
                        "description": "datetime of the tick"
                      },
                      "example": [
                        "1690965300"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundHostOrService"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/metrics/performance/download": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Download performance data as csv file",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          },
          {
            "in": "query",
            "name": "start_date",
            "required": true,
            "description": "Start date of metrics (date format should be in ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-01-01T00:00:22Z"
            }
          },
          {
            "in": "query",
            "name": "end",
            "required": true,
            "description": "End date of metrics (date format should be in ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2023-01-01T00:00:00Z"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A CSV file containg performance data",
            "content": {
              "application/force-download": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/metrics/status": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get service status data",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          },
          {
            "in": "query",
            "name": "start",
            "required": false,
            "description": "Start date of metrics (default date is 24 hours in the past)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-18T00:00:00"
            }
          },
          {
            "in": "query",
            "name": "end",
            "required": false,
            "description": "End date of metrics (default date is current date)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-19T00:00:00"
            }
          }
        ],
        "description": "Get status data from a service between given interval",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "critical": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "start time (timestamp)",
                            "example": "1581987121"
                          },
                          "end": {
                            "type": "string",
                            "description": "end time (timestamp)",
                            "example": "1581987181"
                          }
                        }
                      }
                    },
                    "warning": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "start time (timestamp)",
                            "example": "1581987121"
                          },
                          "end": {
                            "type": "string",
                            "description": "end time (timestamp)",
                            "example": "1581987181"
                          }
                        }
                      }
                    },
                    "ok": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "start time (timestamp)",
                            "example": "1581987121"
                          },
                          "end": {
                            "type": "string",
                            "description": "end time (timestamp)",
                            "example": "1581987181"
                          }
                        }
                      }
                    },
                    "unknown": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "start time (timestamp)",
                            "example": "1581987121"
                          },
                          "end": {
                            "type": "string",
                            "description": "end time (timestamp)",
                            "example": "1581987181"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundHostOrService"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/timeline": {
      "get": {
        "tags": [
          "Timeline"
        ],
        "summary": "Get host timeline",
        "description": "List all events for a given host\n\nThe available parameters to **search** / **sort_by** are:\n\n* type\n* content\n* date\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.TimelineEvent"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/hosts/{host_id}/services/{service_id}/timeline": {
      "get": {
        "tags": [
          "Timeline"
        ],
        "summary": "Get service timeline",
        "description": "List all events for a given service\n\nThe available parameters to **search** / **sort_by** are:\n\n* type\n* content\n* date\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/HostId"
          },
          {
            "$ref": "#/components/parameters/ServiceId"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/SortBy"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Monitoring.TimelineEvent"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/acknowledge": {
      "post": {
        "tags": [
          "Acknowledgement"
        ],
        "summary": "Acknowledge multiple resources",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Acknowledgement.Bulk"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/monitoring/resources/downtime": {
      "post": {
        "tags": [
          "Downtime"
        ],
        "summary": "Set downtime for multiple resources",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Downtime.Bulk"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command Sent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/platform": {
      "patch": {
        "tags": [
          "Platform"
        ],
        "summary": "Update a platform information",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Platform.Full"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Platform updated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/platform/features": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "List feature flags",
        "description": "List feature flags",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_cloud_platform": {
                      "type": "boolean"
                    },
                    "feature_flags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/platform/versions": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "List versions of web, widgets and modules",
        "description": "List versions of web, widgets and modules",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "web": {
                      "$ref": "#/components/schemas/Version"
                    },
                    "widgets": {
                      "$ref": "#/components/schemas/Version"
                    },
                    "modules": {
                      "$ref": "#/components/schemas/Version"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/platform/updates": {
      "post": {
        "tags": [
          "Platform"
        ],
        "summary": "Fully update the platform",
        "description": "Update Centreon web component and installed modules / widgets\n",
        "requestBody": {
          "required": false
        },
        "responses": {
          "204": {
            "description": "Platform updated"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/platform/installation/status": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "Get monitoring components versions",
        "description": "Get installation status and available versions of components",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "is_installed",
                    "has_upgrade_available"
                  ],
                  "properties": {
                    "is_installed": {
                      "type": "boolean",
                      "description": "Installation status of component",
                      "example": true
                    },
                    "has_upgrade_available": {
                      "type": "boolean",
                      "description": "upgrade available or not\n",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "monitoring is not properly installed"
          }
        }
      }
    },
    "/platform/topology": {
      "post": {
        "tags": [
          "Topology"
        ],
        "summary": "Register to platform topology",
        "description": "Register a server to the platform topology",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Topology.Register"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Topology"
        ],
        "summary": "Get a platform topology",
        "description": "Get a platform topology in Json Graph Format",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "graph",
                    "nodes",
                    "edges"
                  ],
                  "properties": {
                    "graph": {
                      "type": "object",
                      "description": "General informations about schema",
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "type of Json Graph",
                          "example": "centreon-topology"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "string",
                              "description": "Version of the topology",
                              "example": "1.0.0"
                            }
                          }
                        },
                        "nodes": {
                          "type": "object",
                          "minItems": 1,
                          "properties": {
                            "id": {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Server Type of a platform",
                                  "example": "central"
                                },
                                "label": {
                                  "type": "string",
                                  "description": "logical name of a platform",
                                  "example": "Central"
                                },
                                "metadata": {
                                  "type": "object",
                                  "properties": {
                                    "centreon-id": {
                                      "type": "string",
                                      "description": "id of a platform as known in centreon database",
                                      "example": "1"
                                    },
                                    "hostname": {
                                      "type": "string",
                                      "description": "physical name of a platform",
                                      "example": "localhost.localdomain"
                                    },
                                    "address": {
                                      "type": "string",
                                      "description": "address of a platform",
                                      "example": "192.168.0.1"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "edges": {
                          "type": "array",
                          "minItems": 0,
                          "items": {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string",
                                "description": "children platform id as known in the topology",
                                "example": "91"
                              },
                              "relation": {
                                "type": "string",
                                "description": "broker communication type",
                                "example": "peer_retention"
                              },
                              "target": {
                                "type": "string",
                                "description": "parent platform id as known in the topology",
                                "example": "1"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/platform/topology/{poller_id}": {
      "delete": {
        "tags": [
          "Topology"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PollerId"
          }
        ],
        "summary": "Delete a Platform",
        "description": "Delete a platform from the topology",
        "responses": {
          "204": {
            "description": "Platform deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/gorgone/pollers/{poller_id}/responses/{token}": {
      "get": {
        "tags": [
          "Gorgone"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PollerId"
          },
          {
            "$ref": "#/components/parameters/GorgoneToken"
          }
        ],
        "summary": "Gorgone poller responses token",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/Gorgone.Response"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/gorgone/pollers/{poller_id}/commands/{command_name}": {
      "post": {
        "tags": [
          "Gorgone"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PollerId"
          },
          {
            "$ref": "#/components/parameters/CommandName"
          }
        ],
        "summary": "Gorgone command on specific poller",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "Token used to retrieve the data linked to the command"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/authentication/providers/local": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "get local provider configuration with password security policy",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationLocalProvider"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "update local provider configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationLocalProvider"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/authentication/providers/openid": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "get openid provider configuration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadAuthenticationOpenIdProvider"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "update openid provider configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAuthenticationOpenIdProvider"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Configuration updated"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Administration"
        ],
        "summary": "partially update openid provider configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateAuthenticationOpenIdProvider"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Configuration updated"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/authentication/providers/saml": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get SAML provider configuration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadAuthenticationSAMLProvider"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Update SAML provider configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WriteAuthenticationSAMLProvider"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Configuration updated"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/authentication/providers/web-sso": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "get web-sso provider configuration information",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationWebSSOProvider"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "update web-sso provider configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationWebSSOProvider"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Configuration updated"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/tokens": {
      "get": {
        "tags": [
          "Authentication token"
        ],
        "summary": "Find all API authentication tokens",
        "description": "Return all API authentication tokens.\n\nThe available parameters to **search** / **sort_by** are:\n\n* token_name\n* user.id\n* user.name\n* creator.id\n* creator.name\n* creation_date\n* expiration_date\n* is_revoked\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit-2"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Search-2"
          },
          {
            "$ref": "#/components/parameters/SortBy-2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Token"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta-2"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Authentication token"
        ],
        "summary": "Add an API authentication token",
        "description": "Add an API authentication token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "required": [
                      "name",
                      "user_id",
                      "expiration_date"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/NewToken"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/tokens/{token_name}": {
      "delete": {
        "tags": [
          "Authentication token"
        ],
        "summary": "Delete an API token",
        "description": "Delete an API token\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/TokenName"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/tokens/{token_name}/users/{user_id}": {
      "delete": {
        "tags": [
          "Authentication token"
        ],
        "summary": "Delete an API token",
        "description": "Delete an API token\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/TokenName"
          },
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Authentication token"
        ],
        "summary": "Partially update an API authentication token",
        "description": "Partially update an authentication token.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/TokenName"
          },
          {
            "$ref": "#/components/parameters/UserId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RevokeToken"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/parameters": {
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Administration parameters",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "monitoring_default_downtime_duration": {
                      "type": "integer",
                      "description": "Default downtime duration",
                      "example": 3600
                    },
                    "monitoring_default_refresh_interval": {
                      "type": "integer",
                      "description": "Default monitoring refresh interval",
                      "example": 15
                    },
                    "monitoring_default_acknowledgement_persistent": {
                      "type": "boolean",
                      "description": "Default monitoring acknowledgement persistent option",
                      "example": true
                    },
                    "monitoring_default_acknowledgement_sticky": {
                      "type": "boolean",
                      "description": "Default monitoring acknowledgement sticky option",
                      "example": true
                    },
                    "monitoring_default_acknowledgement_notify": {
                      "type": "boolean",
                      "description": "Default monitoring acknowledgement notify option",
                      "example": true
                    },
                    "monitoring_default_acknowledgement_force_active_checks": {
                      "type": "boolean",
                      "description": "Default monitoring acknowledgement force active checks option",
                      "example": true
                    },
                    "monitoring_default_acknowledgement_with_services": {
                      "type": "boolean",
                      "description": "Default monitoring acknowledgement with services option",
                      "example": true
                    },
                    "monitoring_default_downtime_fixed": {
                      "type": "boolean",
                      "description": "Default monitoring downtime fixed option",
                      "example": true
                    },
                    "monitoring_default_downtime_with_services": {
                      "type": "boolean",
                      "description": "Default set downtimes on services attached to hosts option",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/administration/vaults/configurations": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Update or create vault configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVaultConfiguration"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Administration"
        ],
        "summary": "Delete vault configuration",
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get vault configuration details",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVaultConfiguration"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Token": {
        "description": "The use of the API requires a security token.\n\nTo retrieve it, you will need to authenticate yourself with your login credentials.\n\nThe token will be deleted if it has not been used for more than one hour.\n",
        "type": "apiKey",
        "name": "X-AUTH-TOKEN",
        "in": "header"
      },
      "Cookie": {
        "description": "If you have already connected on the i-Vertix monitoring interface, you can reused the PHPSESSID cookie.\nThe cookie will be valid as long as the connection to the monitoring system is maintained.\n",
        "type": "apiKey",
        "name": "PHPSESSID",
        "in": "cookie"
      }
    },
    "parameters": {
      "Search": {
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
      },
      "Limit": {
        "in": "query",
        "name": "limit",
        "required": false,
        "description": "Number of items per pages",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10,
          "example": 20
        }
      },
      "Page": {
        "in": "query",
        "name": "page",
        "required": false,
        "description": "Number of the requested page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1,
          "example": 4
        }
      },
      "SortBy": {
        "in": "query",
        "name": "sort_by",
        "required": false,
        "description": "Sort the resulted data by its properties",
        "schema": {
          "type": "string",
          "example": "{\"host.name\":\"ASC\"}"
        }
      },
      "MetricStartDate": {
        "in": "path",
        "name": "start",
        "required": true,
        "description": "Start date of metrics (default date is 24 hours in the past)",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-02-18T00:00:00"
        }
      },
      "MetricEndDate": {
        "in": "path",
        "name": "end",
        "required": true,
        "description": "End date of metrics (default date is current date)",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-02-19T00:00:00"
        }
      },
      "ResourceFilterType": {
        "in": "query",
        "name": "types",
        "required": false,
        "description": "Filter the resources by type",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"] where strings can be one of \"service\", \"host\", \"metaservice\"",
          "example": "[\"host\"]"
        }
      },
      "ResourceFilterState": {
        "in": "query",
        "name": "states",
        "required": false,
        "description": "Filter the resources by state",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"] where strings can be one of \"unhandled_problems\", \"resources_problems\", \"in_downtime\", \"acknowledged\", \"all\"",
          "example": "[\"in_downtime\", \"acknowledged\"]"
        }
      },
      "ResourceFilterStatus": {
        "in": "query",
        "name": "statuses",
        "required": false,
        "description": "Filter the resources by status",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"] where strings can be one of \"OK\", \"UP\", \"WARNING\", \"DOWN\", \"CRITICAL\", \"UNREACHABLE\", \"UNKNOWN\", \"PENDING\"",
          "example": "[\"OK\", \"UP\", \"PENDING\"]"
        }
      },
      "ResourceFilterHostgroupName": {
        "in": "query",
        "name": "hostgroup_names",
        "required": false,
        "description": "Filter the resources by host group names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"ESX-Paris\", \"ESX-London\"]"
        }
      },
      "ResourceFilterServicegroupName": {
        "in": "query",
        "name": "servicegroup_names",
        "required": false,
        "description": "Filter the resources by service group names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Memory-Services\", \"Ping-Services\"]"
        }
      },
      "ResourceFilterServiceCategoryName": {
        "in": "query",
        "name": "service_category_names",
        "required": false,
        "description": "Filter the resources by service category names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Ping\", \"CPUs\"]"
        }
      },
      "ResourceFilterHostCategoryName": {
        "in": "query",
        "name": "host_category_names",
        "required": false,
        "description": "Filter the resources by host category names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Linux\", \"Windows\"]"
        }
      },
      "ResourceFilterServiceSeverityName": {
        "in": "query",
        "name": "service_severity_names",
        "required": false,
        "description": "Filter the resources by service severity names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Ping\", \"CPUs\"]"
        }
      },
      "ResourceFilterHostSeverityName": {
        "in": "query",
        "name": "host_severity_names",
        "required": false,
        "description": "Filter the resources by host severity names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Linux\", \"Windows\"]"
        }
      },
      "ResourceFilterHostSeverityLevel": {
        "in": "query",
        "name": "host_severity_levels",
        "required": false,
        "description": "Filter the resources by host severity levels",
        "schema": {
          "type": "string",
          "pattern": "^\\[\\d+(,\\d+)*\\]$",
          "description": "should be in form [<int1>,<int2>,<int3>]",
          "example": "[50, 75]"
        }
      },
      "ResourceFilterServiceSeverityLevel": {
        "in": "query",
        "name": "service_severity_levels",
        "required": false,
        "description": "Filter the resources by service severity levels",
        "schema": {
          "type": "string",
          "pattern": "^\\[\\d+(,\\d+)*\\]$",
          "description": "should be in form [<int1>,<int2>,<int3>]",
          "example": "[50, 75]"
        }
      },
      "ResourceFilterMonitoringServerName": {
        "in": "query",
        "name": "monitoring_server_names",
        "required": false,
        "description": "Filter the resources by monitoring server names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Central\", \"Remote-Server-Paris\", \"Poller-Lyon\"]"
        }
      },
      "ResourceFilterStatusTypes": {
        "in": "query",
        "name": "status_types",
        "required": false,
        "description": "Filter the resources by status types",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"] where strings can be one of \"soft\", \"hard\"",
          "example": "[\"soft\"]"
        }
      },
      "ShowHost": {
        "in": "query",
        "name": "show_host",
        "description": "Allows to display hosts belonging to items",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "ShowService": {
        "in": "query",
        "name": "show_service",
        "description": "Allows to display services belonging to items",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "HostId": {
        "in": "path",
        "name": "host_id",
        "description": "ID of the host",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 12
        }
      },
      "HostGroupId": {
        "in": "path",
        "name": "hostgroup_id",
        "description": "ID of the host group",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "ServiceGroupId": {
        "in": "path",
        "name": "servicegroup_id",
        "description": "ID of the service group",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "ServiceId": {
        "in": "path",
        "name": "service_id",
        "description": "ID of the service",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "MetaId": {
        "in": "path",
        "name": "meta_id",
        "description": "ID of the meta service",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      },
      "MonitoringServerId": {
        "in": "path",
        "name": "monitoring_server_id",
        "description": "ID of the monitoring server (poller)",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      },
      "AcknowledgementId": {
        "in": "path",
        "name": "acknowledgement_id",
        "description": "ID of the acknowledgement",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 227
        }
      },
      "DowntimeId": {
        "in": "path",
        "name": "downtime_id",
        "description": "ID of the downtime",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 329
        }
      },
      "providerConfigurationName": {
        "in": "path",
        "name": "provider_configuration_name",
        "required": true,
        "schema": {
          "type": "string",
          "example": "local"
        }
      },
      "FilterPageName": {
        "in": "path",
        "name": "page_name",
        "description": "name of the page. Currently only 'events-view' is allowed.\n",
        "required": true,
        "schema": {
          "type": "string",
          "example": "events-view"
        }
      },
      "FilterId": {
        "in": "path",
        "name": "filter_id",
        "description": "id of the filter",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      },
      "PollerId": {
        "in": "path",
        "name": "poller_id",
        "description": "ID of the poller",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "GorgoneToken": {
        "in": "path",
        "name": "token",
        "description": "Gorgone Token",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CommandName": {
        "in": "path",
        "name": "command_name",
        "description": "Gorgone Command",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "HostCategoryId": {
        "in": "path",
        "name": "host_category_id",
        "description": "ID of existing host category configuration",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      },
      "HostSeverityId": {
        "in": "path",
        "name": "host_severity_id",
        "description": "ID of existing host severity configuration",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      },
      "ServiceCategoryId": {
        "in": "path",
        "name": "service_category_id",
        "description": "ID of existing service category configuration",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 1
        }
      },
      "Limit-2": {
        "in": "query",
        "name": "limit",
        "required": false,
        "description": "Number of items per page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10,
          "example": 20
        }
      },
      "Search-2": {
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Retrieve only data matching the defined search value.\nA simple search can be done like in the following example ``` search={\"host.name\":\"Central\"} ```\nA complex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n  * `$rg` → regex\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
      },
      "SortBy-2": {
        "in": "query",
        "name": "sort_by",
        "required": false,
        "description": "Sort the resulting data by its properties",
        "schema": {
          "type": "string",
          "example": "{\"host.name\":\"ASC\"}"
        }
      },
      "AccId": {
        "in": "path",
        "name": "acc_id",
        "required": true,
        "description": "Additional Connector Configuration ID",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 1
        }
      },
      "AgentConfigurationId": {
        "in": "path",
        "name": "ac_id",
        "required": true,
        "description": "Poller/agent configuration ID",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 1
        }
      },
      "BrokerId": {
        "in": "path",
        "name": "broker_id",
        "description": "ID of the broker configuration",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "OutputId": {
        "in": "path",
        "name": "output_id",
        "description": "ID of the broker configuration output",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "HostId-2": {
        "in": "path",
        "name": "host_id",
        "required": true,
        "description": "Host ID",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 1
        }
      },
      "HostTemplateId": {
        "in": "path",
        "name": "host_template_id",
        "required": true,
        "description": "Host template ID",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 1
        }
      },
      "ServiceTemplateId": {
        "in": "path",
        "name": "service_template_id",
        "required": true,
        "description": "Service template ID",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 1
        }
      },
      "ServiceId-2": {
        "in": "path",
        "name": "service_id",
        "required": true,
        "description": "Service ID",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 1
        }
      },
      "SeverityId": {
        "in": "path",
        "name": "service_severity_id",
        "required": true,
        "description": "Service severity ID",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 1
        }
      },
      "DashboardId": {
        "in": "path",
        "name": "dashboard_id",
        "description": "ID of the dashboard",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "ContactId": {
        "in": "path",
        "name": "contact_id",
        "description": "ID of the contact",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "ContactGroupId": {
        "in": "path",
        "name": "contact_group_id",
        "description": "ID of the contact group",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "example": 5
        }
      },
      "Start": {
        "in": "query",
        "name": "start",
        "required": true,
        "description": "Start date of metrics (default date is 24 hours in the past)",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-02-18T00:00:00"
        }
      },
      "End": {
        "in": "query",
        "name": "end",
        "required": true,
        "description": "End date of metrics (default date is current date)",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-02-19T00:00:00"
        }
      },
      "MetricNames": {
        "in": "query",
        "name": "metric_names",
        "required": true,
        "description": "List of metric names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\\w+(,\\w+)*\\]$",
          "description": "should be in form [<metricName1>,<metricName2>,<metricName3>]",
          "example": "[rta,pl]"
        }
      },
      "MetricName": {
        "in": "query",
        "name": "metric_name",
        "required": true,
        "description": "Name of the metric",
        "schema": {
          "type": "string",
          "example": "rta"
        }
      },
      "FilterType": {
        "in": "query",
        "name": "types",
        "required": false,
        "description": "Filter the resources by type",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"] where strings can be one of \"service\", \"host\", \"metaservice\"",
          "example": "[\"host\"]"
        }
      },
      "FilterState": {
        "in": "query",
        "name": "states",
        "required": false,
        "description": "Filter the resources by state",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"] where strings can be one of \"unhandled_problems\", \"resources_problems\", \"in_downtime\", \"acknowledged\", \"all\", \"in_flapping\"",
          "example": "[\"in_downtime\", \"acknowledged\"]"
        }
      },
      "FilterStatus": {
        "in": "query",
        "name": "statuses",
        "required": false,
        "description": "Filter the resources by status",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"] where strings can be one of \"OK\", \"UP\", \"WARNING\", \"DOWN\", \"CRITICAL\", \"UNREACHABLE\", \"UNKNOWN\", \"PENDING\"",
          "example": "[\"OK\", \"UP\", \"PENDING\"]"
        }
      },
      "FilterHostgroupName": {
        "in": "query",
        "name": "hostgroup_names",
        "required": false,
        "description": "Filter the resources by host group names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"ESX-Paris\", \"ESX-London\"]"
        }
      },
      "FilterServicegroupName": {
        "in": "query",
        "name": "servicegroup_names",
        "required": false,
        "description": "Filter the resources by service group names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Memory-Services\", \"Ping-Services\"]"
        }
      },
      "FilterServiceCategoryName": {
        "in": "query",
        "name": "service_category_names",
        "required": false,
        "description": "Filter the resources by service category names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Ping\", \"CPUs\"]"
        }
      },
      "FilterHostCategoryName": {
        "in": "query",
        "name": "host_category_names",
        "required": false,
        "description": "Filter the resources by host category names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Linux\", \"Windows\"]"
        }
      },
      "FilterHostSeverityName": {
        "in": "query",
        "name": "host_severity_names",
        "required": false,
        "description": "Filter the resources by host severity names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Linux\", \"Windows\"]"
        }
      },
      "FilterServiceSeverityName": {
        "in": "query",
        "name": "service_severity_names",
        "required": false,
        "description": "Filter the resources by service severity names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Ping\", \"CPUs\"]"
        }
      },
      "FilterHostSeverityLevel": {
        "in": "query",
        "name": "host_severity_levels",
        "required": false,
        "description": "Filter the resources by host severity levels",
        "schema": {
          "type": "string",
          "pattern": "^\\[\\d+(,\\d+)*\\]$",
          "description": "should be in form [<int1>,<int2>,<int3>]",
          "example": "[50, 75]"
        }
      },
      "FilterServiceSeverityLevel": {
        "in": "query",
        "name": "service_severity_levels",
        "required": false,
        "description": "Filter the resources by service severity levels",
        "schema": {
          "type": "string",
          "pattern": "^\\[\\d+(,\\d+)*\\]$",
          "description": "should be in form [<int1>,<int2>,<int3>]",
          "example": "[50, 75]"
        }
      },
      "FilterMonitoringServerName": {
        "in": "query",
        "name": "monitoring_server_names",
        "required": false,
        "description": "Filter the resources by monitoring server names",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"]",
          "example": "[\"Central\", \"Remote-Server-Paris\", \"Poller-Lyon\"]"
        }
      },
      "FilterStatusTypes": {
        "in": "query",
        "name": "status_types",
        "required": false,
        "description": "Filter the resources by status types",
        "schema": {
          "type": "string",
          "pattern": "^\\[\"[^\"]+\"(,\"[^\"]+\")*\\]$",
          "description": "should be in form [\"<str1>\",\"<str2>\"] where strings can be one of \"soft\", \"hard\"",
          "example": "[\"soft\"]"
        }
      },
      "TokenName": {
        "in": "path",
        "name": "token_name",
        "required": true,
        "description": "token name",
        "schema": {
          "type": "string",
          "example": "my-token-name"
        }
      },
      "UserId": {
        "in": "path",
        "name": "user_id",
        "required": true,
        "description": "User ID linked to the token",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 1
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 401
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Property 'name' not found"
                }
              }
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict. More details are specified in the response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "A platform using the name : 'myPoller' or address : '1.1.1.2' already exists"
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "You are not authorized to access this resource"
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found"
      },
      "HostNotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Host not found"
                }
              }
            }
          }
        }
      },
      "NotFoundHostOrService": {
        "description": "Host or service not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Host 12 not found"
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      },
      "NotFound-2": {
        "description": "Indicates that the server did not find the target resource.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Service not found"
                }
              }
            }
          }
        }
      },
      "Conflict-2": {
        "description": "Conflict. More details are specified in the response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "A platform using the name: 'myPoller' or address: '1.1.1.2' already exists"
                }
              }
            }
          }
        }
      },
      "NoContent": {
        "description": "Indicates that the server has successfully fulfilled the request and that there is no additional content to send \nin the response payload body.\n"
      },
      "UnprocessableContent": {
        "description": "Unprocessable Content\n\nThe server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int64",
                  "example": 422
                },
                "message": {
                  "type": "string",
                  "example": "id: This value should be of type integer\n"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "AuthenticationRequest": {
        "type": "object",
        "properties": {
          "security": {
            "type": "object",
            "properties": {
              "credentials": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string",
                    "description": "Login",
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password",
                    "example": "changeme"
                  }
                }
              }
            }
          }
        }
      },
      "LoginAuthenticationResponse": {
        "type": "object",
        "properties": {
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Contact ID",
                "example": 3
              },
              "name": {
                "type": "string",
                "description": "Contact name",
                "example": "Admin"
              },
              "alias": {
                "type": "string",
                "description": "Contact alias",
                "example": "admin"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Contact email",
                "example": "admin@localhost.com"
              },
              "is_admin": {
                "type": "boolean",
                "description": "Indicates whether it is an admin user or not",
                "example": true
              }
            }
          },
          "security": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Security authentication token",
                "example": "9ed937d3911d212eae59300ac6977352"
              }
            }
          }
        }
      },
      "LogoutAuthenticationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Successful logout"
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the pagined page",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "description": "Number of items per page",
            "example": 10
          },
          "search": {
            "type": "object",
            "description": "Search parameter passed to URL"
          },
          "sort_by": {
            "type": "object",
            "description": "Sort parameter passed to URL"
          },
          "total": {
            "type": "integer",
            "description": "Number of items found",
            "example": 1
          }
        }
      },
      "AuthenticationLocalProvider": {
        "type": "object",
        "required": [
          "password_security_policy"
        ],
        "properties": {
          "password_security_policy": {
            "type": "object",
            "required": [
              "password_min_length",
              "has_uppercase",
              "has_lowercase",
              "has_number",
              "has_special_character",
              "attempts",
              "blocking_duration",
              "password_expiration",
              "can_reuse_passwords",
              "delay_before_new_password"
            ],
            "properties": {
              "password_min_length": {
                "description": "minimum length of the password",
                "type": "integer",
                "minimum": 8,
                "maximum": 128,
                "default": 12
              },
              "has_uppercase": {
                "description": "if the password must contain uppercase character",
                "type": "boolean",
                "default": true
              },
              "has_lowercase": {
                "description": "if the password must contain lowercase character",
                "type": "boolean",
                "default": true
              },
              "has_number": {
                "description": "if the password must contain number",
                "type": "boolean",
                "default": true
              },
              "has_special_character": {
                "description": "if the password must contain special character",
                "type": "boolean",
                "default": true
              },
              "attempts": {
                "description": "login attempts before blocking",
                "type": "integer",
                "nullable": true,
                "minimum": 1,
                "maximum": 10,
                "default": 5
              },
              "blocking_duration": {
                "description": "blocking duration in seconds before new login attempt",
                "type": "integer",
                "nullable": true,
                "maximum": 604800,
                "default": 900
              },
              "password_expiration": {
                "description": "password expiration policy",
                "type": "object",
                "required": [
                  "expiration_delay",
                  "excluded_users"
                ],
                "properties": {
                  "expiration_delay": {
                    "description": "password expiration delay in seconds",
                    "type": "integer",
                    "nullable": true,
                    "minimum": 604800,
                    "maximum": 31557600,
                    "default": 15552000
                  },
                  "excluded_users": {
                    "description": "list of users without password expiration rule",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "user login",
                      "nullable": false,
                      "example": "admin",
                      "minLength": 1,
                      "maxLength": 255
                    }
                  }
                }
              },
              "can_reuse_passwords": {
                "description": "is allowed or not to reuse a password among 3 last",
                "type": "boolean",
                "default": false
              },
              "delay_before_new_password": {
                "description": "delay in seconds before a new password can be set",
                "type": "integer",
                "nullable": true,
                "minimum": 3600,
                "maximum": 604800,
                "default": 3600
              }
            }
          }
        }
      },
      "AuthenticationSAMLProvider": {
        "type": "object",
        "required": [
          "is_active",
          "is_forced",
          "remote_login_url",
          "entity_id_url",
          "certificate",
          "user_id_attribute",
          "contact_template",
          "email_bind_attribute",
          "fullname_bind_attribute",
          "logout_from"
        ],
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the provider is active or not",
            "example": true
          },
          "is_forced": {
            "type": "boolean",
            "description": "Indicates whether the provider is forced or not",
            "example": false
          },
          "remote_login_url": {
            "type": "string",
            "description": "Indicates the remote login URL",
            "example": "https://idp/saml"
          },
          "entity_id_url": {
            "type": "string",
            "description": "Indicates the issuer URL",
            "example": "https://idp/saml"
          },
          "certificate": {
            "type": "string",
            "description": "IDP certificate"
          },
          "user_id_attribute": {
            "type": "string",
            "description": ""
          },
          "logout_from": {
            "type": "boolean",
            "description": "Logout"
          },
          "logout_from_url": {
            "type": "string",
            "description": "Indicates the logout URL",
            "example": "https://idp/saml",
            "nullable": true
          },
          "auto_import": {
            "type": "boolean",
            "description": "Auto import user from external provider",
            "example": true
          },
          "contact_template": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Contact template ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Contact template name",
                "example": "Default"
              }
            }
          },
          "email_bind_attribute": {
            "type": "string",
            "description": "Email bind attribute",
            "example": "email",
            "nullable": true
          },
          "fullname_bind_attribute": {
            "type": "string",
            "description": "Fullname bind attribute",
            "example": "name",
            "nullable": true
          },
          "authentication_conditions": {
            "type": "object",
            "required": [
              "is_enabled",
              "attribute_path",
              "authorized_values"
            ],
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "example": "info.items.prop1"
              },
              "authorized_values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "groups_mapping": {
            "type": "object",
            "required": [
              "is_enabled",
              "attribute_path",
              "relations"
            ],
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "nullable": false,
                "example": "info.items.groups"
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "group_value": {
                      "type": "string",
                      "description": "Attribute group value",
                      "example": "group1"
                    }
                  }
                }
              }
            }
          },
          "roles_mapping": {
            "type": "object",
            "required": [
              "is_enabled",
              "apply_only_first_role",
              "attribute_path",
              "relations"
            ],
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "apply_only_first_role": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "example": "info.items.role"
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "claim_value": {
                      "type": "string",
                      "description": "Authorization claim value",
                      "example": "scope"
                    },
                    "priority": {
                      "type": "number",
                      "description": "priority of the role",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ReadAuthenticationSAMLProvider": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationSAMLProvider"
          },
          {
            "properties": {
              "groups_mapping": {
                "type": "object",
                "properties": {
                  "relations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "group_value": {
                          "type": "string",
                          "description": "Attribute group value",
                          "example": "group1"
                        },
                        "contact_group": {
                          "type": "object",
                          "description": "Contact group",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "Contact group ID",
                              "example": 1
                            },
                            "name": {
                              "type": "string",
                              "description": "Contact group name",
                              "example": "cg1"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "roles_mapping": {
                "type": "object",
                "properties": {
                  "relations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "claim_value": {
                          "type": "string",
                          "description": "Authorization claim value",
                          "example": "scope"
                        },
                        "access_group": {
                          "type": "object",
                          "description": "Access group",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "Access group ID",
                              "example": 1
                            },
                            "name": {
                              "type": "string",
                              "description": "Access group name",
                              "example": "Default"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "WriteAuthenticationSAMLProvider": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationSAMLProvider"
          },
          {
            "properties": {
              "groups_mapping": {
                "type": "object",
                "properties": {
                  "relations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "group_value": {
                          "type": "string",
                          "description": "Attribute group value",
                          "example": "group1"
                        },
                        "contact_group_id": {
                          "type": "integer",
                          "description": "Contact group id",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              },
              "roles_mapping": {
                "type": "object",
                "properties": {
                  "relations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "access_group_id": {
                          "type": "integer",
                          "description": "Access group id",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "AuthenticationWebSSOProvider": {
        "type": "object",
        "required": [
          "is_active",
          "is_forced",
          "trusted_client_addresses",
          "blacklist_client_addresses",
          "login_header_attribute",
          "pattern_matching_login",
          "pattern_replace_login"
        ],
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the provider is active or not",
            "example": true
          },
          "is_forced": {
            "type": "boolean",
            "description": "Indicates whether the provider is forced or not",
            "example": false
          },
          "trusted_client_addresses": {
            "type": "array",
            "description": "List of trusted client addresses",
            "items": {
              "type": "string",
              "description": "IP address",
              "example": "127.0.0.1"
            }
          },
          "blacklist_client_addresses": {
            "type": "array",
            "description": "List of blacklisted client addresses",
            "items": {
              "type": "string",
              "description": "IP address",
              "example": "127.0.0.1"
            }
          },
          "login_header_attribute": {
            "type": "string",
            "nullable": true,
            "description": "Header used to retrieve user's login",
            "example": "HTTP_AUTH_USER"
          },
          "pattern_matching_login": {
            "type": "string",
            "nullable": true,
            "description": "Pattern to search for in the login header attribute name",
            "example": "/@.*/"
          },
          "pattern_replace_login": {
            "type": "string",
            "nullable": true,
            "description": "String that will replace the string defined in the Pattern match login (regex) field",
            "example": "/@.*/"
          }
        }
      },
      "Comment.Resources": {
        "type": "object",
        "required": [
          "resources"
        ],
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "comment",
                "id"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "host",
                    "service"
                  ],
                  "description": "Type of resource",
                  "example": "service"
                },
                "id": {
                  "type": "integer",
                  "description": "Resource ID",
                  "example": 10
                },
                "parent": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Parent resource ID",
                      "example": 17
                    }
                  }
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Date of the comment (ISO8601)"
                },
                "comment": {
                  "type": "string",
                  "description": "Comment to add to the monitored resource",
                  "example": "Resource is not-OK but it is expected"
                }
              }
            }
          }
        }
      },
      "Configuration.Notification.GenericObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Configuration.Notification.Message": {
        "type": "object",
        "description": "Type and content of the notification",
        "properties": {
          "channel": {
            "type": "string",
            "enum": [
              "Slack",
              "Email",
              "Sms"
            ]
          },
          "subject": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Configuration.NewTimePeriod": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the time period",
            "example": "24x7"
          },
          "alias": {
            "type": "string",
            "description": "Alias of the time period",
            "example": "Always"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Configuration.TimePeriod.days"
            }
          },
          "templates": {
            "type": "array",
            "description": "IDs of the time periods used as a template",
            "items": {
              "type": "integer"
            }
          },
          "exceptions": {
            "type": "array",
            "description": "List of exceptions to the standard schedule",
            "items": {
              "$ref": "#/components/schemas/Configuration.TimePeriod.ExtraTimePeriod"
            }
          }
        }
      },
      "Configuration.TimePeriod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Time period ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the time period",
            "example": "24x7"
          },
          "alias": {
            "type": "string",
            "description": "Alias of the time period",
            "example": "Always"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Configuration.TimePeriod.days"
            }
          },
          "templates": {
            "type": "array",
            "description": "IDs of the time periods used as a template",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of the time periods used as a template",
                  "example": 1
                },
                "alias": {
                  "type": "string",
                  "description": "Alias of the time period",
                  "example": "Always"
                }
              }
            }
          },
          "exceptions": {
            "type": "array",
            "description": "List of exceptions to the standard schedule",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID of the extra period",
                      "example": 1
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/Configuration.TimePeriod.ExtraTimePeriod"
                }
              ]
            }
          }
        }
      },
      "Configuration.TimePeriod.days": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "description": "Number of the day (1=monday)",
            "example": 1,
            "minimum": 1,
            "maximum": 7
          },
          "time_range": {
            "type": "string",
            "description": "Time range for the day",
            "example": "00:00-06:00,07:00-08:00"
          }
        }
      },
      "Configuration.TimePeriod.ExtraTimePeriod": {
        "type": "object",
        "properties": {
          "day_range": {
            "type": "string",
            "description": "Directives, including weekdays, days of the month, and calendar dates\n\n* Calendar date (2008-01-01)\n* Specific month date (January 1st)\n* Generic month date (Day 15)\n* Offset weekday of specific month (2nd Tuesday in December)\n* Offset weekday (3rd Monday)\n* Normal weekday (Tuesday)\n",
            "example": "monday 1"
          },
          "time_range": {
            "type": "string",
            "description": "Time range for the day",
            "example": "00:00-06:00,07:00-08:00"
          }
        }
      },
      "Configuration.Host.Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Host category id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Host category name",
            "example": "host-category"
          },
          "alias": {
            "type": "string",
            "description": "Host category alias",
            "example": "host-category"
          },
          "is_activated": {
            "type": "boolean",
            "description": "is active or not (enable/disable)",
            "example": true
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "some comment"
          }
        }
      },
      "Configuration.Service.Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Service category ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Service category name",
            "example": "service-category"
          },
          "alias": {
            "type": "string",
            "description": "Service category alias",
            "example": "service-category"
          },
          "is_activated": {
            "type": "boolean",
            "description": "is active or not (enable/disable)",
            "example": true
          }
        }
      },
      "Configuration.Host.Category.Add": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Host category name",
            "example": "host-category"
          },
          "alias": {
            "type": "string",
            "description": "Host category alias",
            "example": "host-category"
          },
          "is_activated": {
            "type": "boolean",
            "description": "is active or not (enable/disable)",
            "example": true
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "some comment"
          }
        }
      },
      "Configuration.Service.Category.Add": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service category name",
            "example": "service-category"
          },
          "alias": {
            "type": "string",
            "description": "Service category alias",
            "example": "service-category"
          },
          "is_activated": {
            "type": "boolean",
            "description": "is active or not (enabled/disabled)",
            "example": true
          }
        }
      },
      "Configuration.Host.Severity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Host severity id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Host severity name",
            "example": "host-severity"
          },
          "alias": {
            "type": "string",
            "description": "Host severity alias",
            "example": "host-severity"
          },
          "level": {
            "type": "integer",
            "description": "Host severity priority",
            "example": 2
          },
          "icon_id": {
            "type": "integer",
            "description": "Define the image ID associated with this severity",
            "example": 1
          },
          "comment": {
            "type": "string",
            "description": "Host severity comment",
            "nullable": true
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether this host severity is enabled or not"
          }
        }
      },
      "Configuration.Host.Severity.Add": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Host severity name",
            "example": "host-severity"
          },
          "alias": {
            "type": "string",
            "description": "Host severity alias",
            "example": "host-severity"
          },
          "level": {
            "type": "integer",
            "description": "Host severity priority",
            "example": 2
          },
          "icon_id": {
            "type": "integer",
            "description": "Define the image ID associated with this severity",
            "example": 1
          },
          "comment": {
            "type": "string",
            "description": "Host severity comment",
            "nullable": true
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether this host severity is enabled or not"
          }
        }
      },
      "Configuration.Host.Template": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Configuration.Host.Template.Add"
          },
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Host template id",
                "example": 1
              },
              "is_locked": {
                "type": "boolean",
                "description": "Indicates whether the configuration is locked for editing or not"
              }
            }
          }
        ]
      },
      "Configuration.Host.Template.Add": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Host template name",
            "example": "generic-active-host"
          },
          "alias": {
            "type": "string",
            "description": "Host template alias",
            "example": "generic-active-host"
          },
          "snmp_community": {
            "type": "string",
            "nullable": true,
            "description": "Community of the SNMP agent"
          },
          "snmp_version": {
            "type": "string",
            "nullable": true,
            "enum": [
              1,
              "2c",
              3
            ],
            "description": "Version of the SNMP agent.\n\nThe value can be `1`, `2c` or `3`\n",
            "example": "2c"
          },
          "timezone_id": {
            "type": "integer",
            "description": "Timezone ID",
            "example": 1,
            "nullable": true
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID",
            "example": 1,
            "nullable": true
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID",
            "example": 1,
            "nullable": true
          },
          "check_command_args": {
            "type": "string",
            "description": "Check command arguments",
            "example": "!0!OK",
            "nullable": true
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Check command timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "max_check_attempts": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of times that monitoring engine will retry the host check command if it returns any non-OK state"
          },
          "check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of 'time units' between regularly scheduled checks of the host.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether the active checks is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLE\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Monitoring Engine)\n"
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether the passive checks is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLE\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Monitoring Engine)\n"
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications for this host are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLE\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Monitoring Engine)\n"
          },
          "notification_options": {
            "type": "integer",
            "description": "Define the states of the host for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `1` - DOWN\n* `2` - UNREACHABLE\n* `4` - RECOVERY\n* `8` - FLAPPING\n* `16` - DOWNTIME_SCHEDULED\n\nexample: A value equal to 5 corresponding to the selected options DOWN and RECOVERY\n",
            "example": 5
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this host - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "add_inherited_contact_group": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "add_inherited_contact": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this host enters a non-UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a duration of acknowledgement for this host."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLE\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Monitoring Engine)\n"
          },
          "freshness_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the freshness threshold (in seconds) for this host."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLE\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Monitoring Engine)\n"
          },
          "low_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the low state change threshold used in flap detection for this host"
          },
          "high_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the high state change threshold used in flap detection for this host"
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLE\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of the Monitoring Engine)\n"
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID",
            "example": 1,
            "nullable": true
          },
          "event_handler_command_args": {
            "type": "string",
            "description": "Event handler command arguments",
            "example": "!0!OK",
            "nullable": true
          },
          "note_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more information about the host."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional note."
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host."
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the image ID that should be associated with this host template",
            "example": 1
          },
          "icon_alternative": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Define an optional string that is used in the alternative description of the icon image"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Host template comments"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the host template is activated or not"
          }
        }
      },
      "Configuration.Host.Group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Configuration.Host.Group.Add"
          },
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Host group ID",
                "example": 1
              }
            }
          }
        ]
      },
      "Configuration.Host.Group.Add": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Host group name",
            "example": "MySQL-Servers"
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Host group alias",
            "example": "All MySQL Servers"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "maxLength": 255,
            "description": "Define an optional string of notes pertaining to the host group",
            "example": "my notes"
          },
          "notes_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 255,
            "description": "Define an optional URL that can be used to provide more information about the host group",
            "example": "notes url"
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 255,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host group. You will see the link to the action URL in the host group details",
            "example": "action url"
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the image ID that should be associated with this host group",
            "example": 1
          },
          "icon_map_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define an image ID that should be associated with this host group in the statusmap CGI in monitoring engine",
            "example": 1
          },
          "geo_coords": {
            "type": "string",
            "nullable": true,
            "maxLength": 32,
            "description": "Geographical coordinates use by i-Vertix Map module to position element on map",
            "example": "48.51,2.20"
          },
          "rrd": {
            "type": "integer",
            "nullable": true,
            "minimum": 1,
            "maximum": 2147483648,
            "description": "RRD retention duration in days of all the services that are in this host group",
            "example": 2
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Comments on this host group"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the host group is activated or not"
          }
        }
      },
      "Configuration.Service.Group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Configuration.Service.Group.Add"
          },
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Service group ID",
                "example": 1
              }
            }
          }
        ]
      },
      "Configuration.Service.Group.Add": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Service group name",
            "example": "MySQL-Servers"
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Service group alias",
            "example": "All MySQL Servers"
          },
          "geo_coords": {
            "type": "string",
            "nullable": true,
            "maxLength": 32,
            "description": "Geographical coordinates use by i-Vertix Map module to position element on map",
            "example": "48.51,2.20"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Comments on this service group"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the service group is activated or not"
          }
        }
      },
      "Configuration.ContactTemplate": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Contact template id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Contact template name",
            "example": "Contact Template"
          }
        }
      },
      "Configuration.AccessGroup": {
        "type": "object",
        "required": [
          "id",
          "name",
          "alias",
          "is_activated",
          "has_changed"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Access group id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Access group name",
            "example": "Access group"
          },
          "alias": {
            "type": "string",
            "description": "Access group alias",
            "example": "Access group alias"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the access group is activated or not"
          },
          "has_changed": {
            "type": "boolean",
            "description": "Indicates whether the access group has changed or not"
          }
        }
      },
      "Media.Image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Image id"
          },
          "name": {
            "type": "string",
            "description": "Image name",
            "maxLength": 255
          },
          "path": {
            "type": "string",
            "maxLength": 255,
            "description": "Image path"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Image comments"
          }
        }
      },
      "User.Filter": {
        "type": "object",
        "required": [
          "name",
          "criterias"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "filter id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "filter name",
            "example": "my filter 1"
          },
          "criterias": {
            "type": "array",
            "description": "list of filter criterias",
            "items": {
              "type": "object",
              "example": {
                "type": "text",
                "name": "field1",
                "value": "search value 1"
              }
            }
          },
          "order": {
            "type": "integer",
            "description": "filter order",
            "example": 1
          }
        }
      },
      "Configuration.MonitoringServerMain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the server",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "Name of the server",
            "example": "Central"
          },
          "address": {
            "type": "string",
            "description": "IP address of the server",
            "example": "127.0.0.1"
          },
          "is_localhost": {
            "type": "boolean",
            "description": "Indicates whether it's the localhost server",
            "example": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Indicates whether it's the default server",
            "example": true
          },
          "ssh_port": {
            "type": "integer",
            "description": "SSH port of the server",
            "example": 22
          },
          "last_restart": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last Engine restart request"
          },
          "engine_start_command": {
            "type": "string",
            "description": "System start command for Engine",
            "example": "service centengine start"
          },
          "engine_stop_command": {
            "type": "string",
            "description": "System stop command for Engine",
            "example": "service centengine stop"
          },
          "engine_restart_command": {
            "type": "string",
            "description": "System restart command for Engine",
            "example": "service centengine restart"
          },
          "engine_reload_command": {
            "type": "string",
            "description": "System reload command for Engine",
            "example": "service centengine reload"
          },
          "nagios_bin": {
            "type": "string",
            "description": "Full path of the Engine binary",
            "example": "/usr/sbin/centengine"
          },
          "nagiostats_bin": {
            "type": "string",
            "description": "Full path of the Engine statistics binary",
            "example": "/usr/sbin/centenginestats"
          },
          "broker_reload_command": {
            "type": "string",
            "description": "System reload command for Broker",
            "example": "service cbd reload"
          },
          "centreonbroker_cfg_path": {
            "type": "string",
            "description": "Full path of the Broker configuration",
            "example": "/etc/centreon-broker"
          },
          "centreonbroker_module_path": {
            "type": "string",
            "description": "Full path of the Broker module's libraries",
            "example": "/usr/share/centreon/lib/centreon-broker"
          },
          "centreonbroker_logs_path": {
            "type": "string",
            "description": "Full path of the Broker logs",
            "example": null
          },
          "centreonconnector_path": {
            "type": "string",
            "description": "Full path of the Engine connectors",
            "example": "/usr/lib64/centreon-connector"
          },
          "init_script_centreontrapd": {
            "type": "string",
            "description": "System name of Centreontrapd daemon",
            "example": "centreontrapd"
          },
          "snmp_trapd_path_conf": {
            "type": "string",
            "description": "Full path of the Centreontrapd daemon configuration",
            "example": "/etc/snmp/centreon_traps/"
          },
          "remote_id": {
            "type": "integer",
            "description": "ID of the master Remote Server linked to the server",
            "example": null
          },
          "remote_server_use_as_proxy": {
            "type": "boolean",
            "description": "Indicates whether Remote Servers are used as SSH proxies",
            "example": true
          },
          "is_updated": {
            "type": "boolean",
            "description": "Indicates whether the monitoring configuration has changed since last restart",
            "example": true
          },
          "is_activate": {
            "type": "boolean",
            "description": "Indicates whether the server configuration is activated",
            "example": true
          }
        }
      },
      "Configuration.MetaServices": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the meta service",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "Name of the meta service",
            "example": "TOTAL_FIREWALL_CONNECTIONS"
          },
          "output": {
            "type": "string",
            "description": "Output configured for the meta service",
            "example": "Number of connections: %d"
          },
          "calulation_type": {
            "type": "string",
            "description": "Function to be applied to calculate the meta service status.\n * average\n * minimum\n * maximum\n * sum\n",
            "example": "average"
          },
          "data_source_type": {
            "type": "string",
            "description": "Data source type of the meta service.\n * gauge\n * counter\n * derive\n * absolute\n",
            "default": "gauge",
            "example": "gauge"
          },
          "meta_select_mode": {
            "type": "integer",
            "description": "Selection mode for services to be considered for this meta service.\n  * 1 - Service list mod, mark selected services in the options on meta service list.\n  * 2 - SQL matching mod, specify a search string to be used in an SQL query\n",
            "default": 1,
            "example": 2
          },
          "regexp_string": {
            "type": "string",
            "description": "Search string to be used in a SQL LIKE query for service selection",
            "example": "%service_name%"
          },
          "metric": {
            "type": "string",
            "description": "Metric name used to measure meta service status",
            "example": "used"
          },
          "warning": {
            "type": "string",
            "description": "Absolute value for warning level",
            "example": "80"
          },
          "critical": {
            "type": "string",
            "description": "Absolute value for critical level",
            "example": "90"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the meta service configuration is activated",
            "example": true
          }
        }
      },
      "Monitoring.MetaServiceMetric": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the meta service metric",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "Name of the meta service metric",
            "example": "rta"
          },
          "unitName": {
            "type": "string",
            "description": "Name of the meta service metric unit",
            "example": "ms"
          },
          "currentValue": {
            "type": "number",
            "description": "Current value of the metric in the realtime",
            "example": 0.25
          },
          "resource": {
            "$ref": "#/components/schemas/Monitoring.ResourceMain"
          }
        }
      },
      "Monitoring.Servers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the server",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "Name of the server",
            "example": "Central"
          },
          "address": {
            "type": "string",
            "description": "IP address of the server",
            "example": "127.0.0.1",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the server",
            "example": "Central server",
            "nullable": true
          },
          "isRunning": {
            "type": "boolean",
            "description": "Indicates if the server is running or not",
            "example": true
          },
          "lastAlive": {
            "type": "integer",
            "description": "Timestamp of last time server was alive",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version of the server (centreon-engine)",
            "example": "20.10.0",
            "nullable": true
          }
        }
      },
      "Monitoring.Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Category Id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "Category name"
          }
        }
      },
      "Acknowledgement.Resource": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Short description of the acknowledgement",
            "example": "Acknowledged by admin"
          },
          "with_services": {
            "type": "boolean",
            "description": "Indicates whether or not we should acknowledge the host-related services.",
            "example": true,
            "default": true
          },
          "is_notify_contacts": {
            "type": "boolean",
            "description": "Indicates whether or not notification is sent to the contacts linked to the host or service.",
            "example": false,
            "default": true
          },
          "is_persistent_comment": {
            "type": "boolean",
            "description": "Indicates if the acknowledgment will be maintained in case a restart of the scheduler occurs.",
            "example": false,
            "default": true
          },
          "is_sticky": {
            "type": "boolean",
            "description": "Indicates if the acknowledgment will be maintained in case of non-OK status change.",
            "example": false,
            "default": true
          },
          "force_active_checks": {
            "type": "boolean",
            "description": "Indicates if after acknowledgement resource should be forced check",
            "example": false,
            "default": true
          }
        }
      },
      "Disacknowledgement.Resource": {
        "type": "object",
        "properties": {
          "with_services": {
            "type": "boolean",
            "description": "Indicates whether we should disacknowledge the host-related services",
            "example": true
          }
        }
      },
      "Acknowledgement.Bulk": {
        "type": "object",
        "properties": {
          "acknowledgement": {
            "$ref": "#/components/schemas/Acknowledgement.Resource"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Monitoring.Resource.Action"
            }
          }
        }
      },
      "Acknowledgement.Disacknowledge.Bulk": {
        "type": "object",
        "properties": {
          "disacknowledgement": {
            "$ref": "#/components/schemas/Disacknowledgement.Resource"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Monitoring.Resource.Action"
            }
          }
        }
      },
      "Acknowledgement.Host": {
        "type": "object",
        "nullable": true,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the acknowledgement",
            "example": 34
          },
          "author_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the contact who requested an acknowledgement",
            "example": 3
          },
          "author_name": {
            "type": "string",
            "description": "Name of the contact who requested an acknowledgement",
            "example": "admin"
          },
          "comment": {
            "type": "string",
            "description": "Short description of the acknowledgement",
            "example": "Acknowledged by admin"
          },
          "deletion_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the request for cancellation of the acknowledgement (ISO8601)"
          },
          "entry_time": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the request for acknowledgement (ISO8601)"
          },
          "host_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the host",
            "example": 12
          },
          "poller_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the poller",
            "example": 1
          },
          "is_notify_contacts": {
            "type": "boolean",
            "description": "Indicates whether notification is sent to the contacts linked to the host or service",
            "example": false
          },
          "is_persistent_comment": {
            "type": "boolean",
            "description": "Indicates whether acknowledgement is maintained in the case of a restart of the scheduler",
            "example": true
          },
          "is_sticky": {
            "type": "boolean",
            "description": "Indicates whether acknowledgement is maintained in the case of a change of status",
            "example": true
          },
          "state": {
            "type": "integer",
            "description": "State type\n * `1` - WARNING\n * `2` - CRITICAL\n * `3` - UNKNOWN\n",
            "example": 1
          }
        }
      },
      "Acknowledgement.Service": {
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Acknowledgement.Host"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "service_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the service",
                "example": 5
              }
            }
          }
        ]
      },
      "Acknowledgement.Host.Add": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Acknowledgement.Service.Add"
          },
          {
            "type": "object",
            "properties": {
              "with_services": {
                "type": "boolean",
                "description": "Indicates whether we should add the downtime on the host-related services",
                "example": true
              }
            }
          }
        ]
      },
      "Acknowledgement.Hosts.Add": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Acknowledgement.Host.Add"
            },
            {
              "$ref": "#/components/schemas/Bulk.Resource.Id"
            }
          ]
        }
      },
      "Acknowledgement.Service.Add": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Short description of the acknowledgement",
            "example": "Acknowledged by admin"
          },
          "is_notify_contacts": {
            "type": "boolean",
            "description": "Indicates whether notification is sent to the contacts linked to the host or service",
            "example": false
          },
          "is_persistent_comment": {
            "type": "boolean",
            "description": "Indicates whether acknowledgement is maintained in the case of a restart of the scheduler",
            "example": true
          },
          "is_sticky": {
            "type": "boolean",
            "description": "Indicates whether acknowledgement is maintained in the case of a change of status",
            "example": true
          }
        }
      },
      "Acknowledgement.Services.Add": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Acknowledgement.Service.Add"
            },
            {
              "$ref": "#/components/schemas/Bulk.Resource.Id"
            }
          ]
        }
      },
      "Downtime.Host.Add": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Downtime.Service.Add"
          },
          {
            "type": "object",
            "properties": {
              "with_services": {
                "type": "boolean",
                "description": "Indicates whether we should add the downtime on the host-related services",
                "example": true
              }
            }
          }
        ]
      },
      "Downtime.Hosts.Add": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Downtime.Host.Add"
            },
            {
              "$ref": "#/components/schemas/Bulk.Resource.Id"
            }
          ]
        }
      },
      "Downtime.Service.Add": {
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled start date of the downtime (ISO8601)"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled end date of the downtime (ISO8601)"
          },
          "is_fixed": {
            "type": "boolean",
            "description": "Indicates whether the downtime is fixed",
            "example": true
          },
          "duration": {
            "type": "integer",
            "description": "Downtime duration in seconds",
            "example": 3600
          },
          "comment": {
            "type": "string",
            "description": "Comment of the downtime",
            "example": "Downtime set by admin"
          }
        }
      },
      "Downtime.Services.Add": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Downtime.Service.Add"
            },
            {
              "$ref": "#/components/schemas/Bulk.Resource.Id"
            }
          ]
        }
      },
      "Downtime.Host": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the downtime",
            "example": 329
          },
          "author_id": {
            "type": "integer",
            "description": "ID of the contact who requested the downtime",
            "example": 3
          },
          "author_name": {
            "type": "string",
            "description": "Name of the contact who requested the downtime",
            "example": "admin"
          },
          "host_id": {
            "type": "integer",
            "description": "ID of the host on which the downtime is set",
            "example": 12
          },
          "comment": {
            "type": "string",
            "description": "Comment of the downtime",
            "example": "Downtime set by admin"
          },
          "duration": {
            "type": "integer",
            "description": "Downtime duration in seconds",
            "example": 7200
          },
          "entry_time": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the request to create the downtime (ISO8601)"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled start date of the downtime (ISO8601)"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled end date of the downtime (ISO8601)"
          },
          "deletion_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of cancellation of downtime (ISO8601)",
            "example": null
          },
          "actual_start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Start date of the downtime (ISO8601)"
          },
          "actual_end_time": {
            "type": "string",
            "format": "date-time",
            "description": "End date of the downtime (ISO8601)",
            "example": null
          },
          "is_started": {
            "type": "boolean",
            "description": "Indicates whether the downtime has started",
            "example": true
          },
          "is_cancelled": {
            "type": "boolean",
            "description": "Indicates whether the downtime has been cancelled",
            "example": false
          },
          "is_fixed": {
            "type": "boolean",
            "description": "Indicates whether the downtime is fixed",
            "example": true
          }
        }
      },
      "Downtime.Service": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Downtime.Host"
          },
          {
            "type": "object",
            "properties": {
              "service_id": {
                "type": "integer",
                "description": "ID of the service on which the downtime is set",
                "example": 5
              }
            }
          }
        ]
      },
      "Downtime.Resource": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Short description of the downtime",
            "example": "Downtime set by admin"
          },
          "with_services": {
            "type": "boolean",
            "description": "Indicates whether we should add the downtime on the host-related services",
            "example": true
          },
          "is_fixed": {
            "type": "boolean",
            "description": "Indicates whether the downtime is fixed",
            "example": true
          },
          "duration": {
            "type": "integer",
            "description": "Downtime duration in seconds",
            "example": 7200
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled start date of the downtime (ISO8601)"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled end date of the downtime (ISO8601)"
          }
        }
      },
      "Downtime.Bulk": {
        "type": "object",
        "properties": {
          "downtime": {
            "$ref": "#/components/schemas/Downtime.Resource"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Monitoring.Resource.Action"
            }
          }
        }
      },
      "Check.Host": {
        "type": "object",
        "properties": {
          "is_forced": {
            "type": "boolean",
            "description": "Indicates whether the check is forced (do not take into account the check timeperiod)",
            "example": true
          }
        }
      },
      "Check.Hosts": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Check.Host"
            },
            {
              "$ref": "#/components/schemas/Bulk.Resource.Id"
            }
          ]
        }
      },
      "Check.Service": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Check.Host"
          }
        ]
      },
      "Check.Services": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Check.Service"
            },
            {
              "$ref": "#/components/schemas/Bulk.Resource.Id"
            }
          ]
        }
      },
      "Check.Resources": {
        "type": "object",
        "properties": {
          "check": {
            "type": "object",
            "properties": {
              "is_forced": {
                "type": "boolean",
                "description": "If set to true check on resources will be forced (ignore check period)",
                "example": true
              }
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "host",
                    "service",
                    "metaservice"
                  ],
                  "description": "Type of resource",
                  "example": "service"
                },
                "id": {
                  "type": "integer",
                  "description": "Resource ID",
                  "example": 10
                },
                "parent": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Parent resource ID",
                      "example": 17
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SubmitResult.Host": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "enum": [
              0,
              1,
              2
            ],
            "description": "Host status code that can be submitted\n* `0` - UP\n* `1` - DOWN\n* `2` - UNREACHABLE\n",
            "example": 1
          },
          "output": {
            "type": "string",
            "nullable": true,
            "description": "Output result of the check sent",
            "example": "CRITICAL: Connection lost"
          },
          "performance_data": {
            "type": "string",
            "nullable": true,
            "description": "Performance data result of the check sent",
            "example": "'nbproc'=0;;1:1;0;"
          }
        }
      },
      "SubmitResult.Service": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "description": "Service status code that can be submitted\n* `0` - OK\n* `1` - WARNING\n* `2` - CRITICAL\n* `3` - UNKNOWN\n",
            "example": 2
          },
          "output": {
            "type": "string",
            "nullable": true,
            "description": "Output result of the check sent",
            "example": "CRITICAL: Memory exceeded "
          },
          "performance_data": {
            "type": "string",
            "nullable": true,
            "description": "Performance data result of the check sent",
            "example": "'used'=453849088B;;;0;1927262208"
          }
        }
      },
      "SubmitResult.Resources": {
        "type": "object",
        "required": [
          "resources"
        ],
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "status",
                "id"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "host",
                    "service",
                    "metaservice"
                  ],
                  "description": "Type of resource",
                  "example": "service"
                },
                "id": {
                  "type": "integer",
                  "description": "Resource ID",
                  "example": 10
                },
                "parent": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Parent resource ID",
                      "example": 17
                    }
                  }
                },
                "status": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2,
                    3
                  ],
                  "description": "Resource status code that can be submitted\n* `0` - OK or UP\n* `1` - WARNING or DOWN\n* `2` - CRITICAL or UNREACHABLE\n* `3` - UNKNOWN\n",
                  "example": 2
                },
                "output": {
                  "type": "string",
                  "nullable": true,
                  "description": "Output result of the check sent",
                  "example": "CRITICAL: Memory exceeded "
                },
                "performance_data": {
                  "type": "string",
                  "nullable": true,
                  "description": "Performance data result of the check sent",
                  "example": "'used'=453849088B;;;0;1927262208"
                }
              }
            }
          }
        }
      },
      "Monitoring.Resource.Action": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the resource",
            "example": "service|host"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the resource",
            "example": 12
          },
          "parent": {
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the parent resource",
                "example": 12
              }
            }
          }
        }
      },
      "Monitoring.ResourceMain": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Uniq ID of the resource",
            "example": "h13-s21"
          },
          "type": {
            "type": "string",
            "description": "Type of the resource",
            "example": "service|host"
          },
          "short_type": {
            "type": "string",
            "description": "Short name of the resource type",
            "example": "s|h"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the resource",
            "example": 12
          },
          "host_id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the host behind the resource",
            "example": 12
          },
          "service_id": {
            "type": "integer",
            "nullable": true,
            "format": "int32",
            "description": "ID of the service behind the resource",
            "example": 12
          },
          "name": {
            "type": "string",
            "description": "Resource name",
            "example": "Ping"
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "description": "Resource alias",
            "example": null
          },
          "fqdn": {
            "type": "string",
            "nullable": true,
            "description": "Resource fqdn",
            "example": null
          },
          "links": {
            "$ref": "#/components/schemas/Monitoring.ResourceLinks"
          },
          "monitoring_server_name": {
            "type": "string",
            "description": "Monitoring Server from which is monitored the Resource",
            "example": "Central"
          },
          "icon": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "description": "ID of the image",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "Name of the icon",
                "example": "memory"
              },
              "url": {
                "type": "string",
                "description": "Url of the icon",
                "example": "/media/memory.png"
              }
            }
          },
          "parent": {
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of the resource",
                "example": "service|host"
              },
              "short_type": {
                "type": "string",
                "description": "Short name of the resource type",
                "example": "s|h"
              },
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the parent resource",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "Parent resource name",
                "example": "Central"
              },
              "alias": {
                "type": "string",
                "nullable": true,
                "description": "Parent resource alias",
                "example": "Host"
              },
              "fqdn": {
                "type": "string",
                "description": "Parent resource fqdn",
                "example": "127.0.0.1"
              },
              "links": {
                "$ref": "#/components/schemas/Monitoring.ResourceLinks"
              },
              "status": {
                "$ref": "#/components/schemas/Monitoring.ResourceStatus"
              }
            }
          },
          "status": {
            "$ref": "#/components/schemas/Monitoring.ResourceStatus"
          },
          "is_in_downtime": {
            "type": "boolean",
            "description": "Indicates whether resource is in downtime",
            "example": false
          },
          "is_acknowledged": {
            "type": "boolean",
            "description": "Indicates whether resource is acknowledged",
            "example": false
          },
          "duration": {
            "type": "string",
            "nullable": true,
            "description": "Duration since last status change",
            "example": "2h 3m"
          },
          "last_status_change": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the last status change (ISO8601)"
          },
          "last_time_with_no_issue": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the last status change (ISO8601)"
          },
          "tries": {
            "type": "string",
            "nullable": true,
            "description": "Number of check tries",
            "example": "3/3 (H)"
          },
          "last_check": {
            "type": "string",
            "nullable": true,
            "description": "Duration since last check",
            "example": "1h 45m"
          },
          "information": {
            "type": "string",
            "nullable": true,
            "description": "Output of the resource",
            "example": "OK - Ping is ok"
          },
          "has_active_checks_enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates whether active checks are enabled",
            "example": true
          },
          "has_passive_checks_enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates whether passive checks are enabled",
            "example": true
          },
          "performance_data": {
            "type": "string",
            "nullable": true,
            "description": "Performance data result of the check sent",
            "example": "rta=0.025ms;200.000;400.000;0; rtmax=0.061ms;;;; rtmin=0.015ms;;;; pl=0%;20;50;0;100 "
          },
          "is_notification_enabled": {
            "type": "boolean",
            "description": "Indicates if notifications are enabled for the resource",
            "example": false
          },
          "severity": {
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of severity (host or service)",
                "example": "service"
              },
              "id": {
                "type": "integer",
                "description": "ID of the severity",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Name of the severity",
                "example": "Priority 1"
              },
              "icon": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "ID of the icon",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the icon",
                    "example": "applications-monitoring-centreon-central-centreon-128-2.png"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL for the icon",
                    "example": "/centreon/img/media/ppm/applications-monitoring-centreon-central-centreon-128-2.png"
                  }
                }
              }
            }
          },
          "extra": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "Monitoring.ResourceLinks": {
        "type": "object",
        "properties": {
          "uris": {
            "type": "object",
            "properties": {
              "configuration": {
                "type": "string",
                "nullable": true,
                "description": "configuration uri",
                "example": "/centreon/main.php?p=60101&o=c&host_id=11"
              },
              "logs": {
                "type": "string",
                "nullable": true,
                "description": "logs uri",
                "example": "/centreon/main.php?p=20301&h=11"
              },
              "reporting": {
                "type": "string",
                "nullable": true,
                "description": "reporting uri",
                "example": "/centreon/main.php?p=307&host=11"
              }
            }
          },
          "endpoints": {
            "type": "object",
            "properties": {
              "details": {
                "type": "string",
                "nullable": true,
                "description": "resource details endpoint",
                "example": "/centreon/api/latest/monitoring/resources/hosts/11"
              },
              "timeline": {
                "type": "string",
                "nullable": true,
                "description": "resource timeline endpoint",
                "example": "/centreon/api/latest/monitoring/hosts/11/timeline"
              },
              "status_graph": {
                "type": "string",
                "nullable": true,
                "description": "resource status graph endpoint",
                "example": null
              },
              "performance_graph": {
                "type": "string",
                "nullable": true,
                "description": "resource performance graph endpoint",
                "example": null
              },
              "acknowledgement": {
                "type": "string",
                "nullable": true,
                "description": "current resource acknowledgement endpoint",
                "example": "/centreon/api/latest/monitoring/hosts/11/acknowledgements?limit=1"
              },
              "downtime": {
                "type": "string",
                "nullable": true,
                "description": "current resource downtimes endpoint",
                "example": "/centreon/api/latest/monitoring/hosts/11/downtimes?search=%7B%22%24and%22:%5B%7B%22start_time%22:%7B%22%24lt%22:1599655905%7D,%22end_time%22:%7B%22%24gt%22:1599655905%7D,%220%22:%7B%22%24or%22:%7B%22is_cancelled%22:%7B%22%24neq%22:1%7D,%22deletion_time%22:%7B%22%24gt%22:1599655905%7D%7D%7D%7D%5D%7D"
              },
              "notification_policy": {
                "type": "string",
                "nullable": true,
                "description": "current resource notification policy endpoint",
                "example": "/centreon/api/latest/configurations/hosts/11/notification-policy"
              },
              "check": {
                "type": "string",
                "nullable": true,
                "description": "Endpoint dedicated for checks (forced_check payload entry set to false)",
                "example": "/centreon/api/latest/monitoring/hosts/17/services/23/check"
              },
              "forced_check": {
                "type": "string",
                "nullable": true,
                "description": "Endpoint dedicated for checks (forced_check payload entry set to true)",
                "example": "/centreon/api/latest/monitoring/hosts/17/services/23/check"
              },
              "metrics": {
                "type": "string",
                "nullable": true,
                "description": "Endpoint dedicated for service metrics",
                "example": "/centreon/api/latest/monitoring/hosts/17/services/23/metrics"
              }
            }
          },
          "externals": {
            "type": "object",
            "properties": {
              "action_url": {
                "type": "string",
                "nullable": true,
                "description": "URL that can be used to provide more actions to be performed on the resource",
                "example": "http://mediawiki/resource/name"
              },
              "notes": {
                "$ref": "#/components/schemas/Monitoring.Notes"
              }
            }
          }
        }
      },
      "Monitoring.Notes": {
        "type": "object",
        "nullable": true,
        "properties": {
          "url": {
            "type": "string",
            "nullable": true,
            "description": "URL that can be used to provide more information on the resource",
            "example": "http://mediawiki/resource/name"
          },
          "label": {
            "type": "string",
            "nullable": true,
            "description": "Note that can be used to describe the note url",
            "example": "How to turn back on the server"
          }
        }
      },
      "Monitoring.ResourceStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "resource status code\n* `0` - UP or OK\n* `1` - DOWN or WARNING\n* `2` - UNREACHABLE or CRITICAL\n* `3` - UNKNOWN\n* `4` - PENDING\n",
            "example": 0
          },
          "name": {
            "type": "string",
            "description": "resource status name\n* UP\n* DOWN\n* UNREACHABLE\n* PENDING\n* OK\n* WARNING\n* CRITICAL\n* UNKNOWN\n",
            "example": "UP"
          },
          "severity_code": {
            "type": "integer",
            "description": "resource status name\n* `1` - DOWN or CRITICAL\n* `2` - WARNING\n* `3` - UNKNOWN or UNREACHABLE\n* `4` - PENDING\n* `5` - UP or OK\n",
            "example": 1
          }
        }
      },
      "Monitoring.HostGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the host group",
            "example": 28
          },
          "name": {
            "type": "string",
            "description": "Name of the host group",
            "example": "All"
          },
          "host": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Monitoring.HostMin"
              },
              {
                "$ref": "#/components/schemas/Monitoring.HostWithService"
              }
            ]
          }
        }
      },
      "Monitoring.HostMin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the host",
            "example": 12
          },
          "alias": {
            "type": "string",
            "description": "Host alias",
            "example": "Central"
          },
          "display_name": {
            "type": "string",
            "description": "Host display name",
            "example": "Central"
          },
          "name": {
            "type": "string",
            "description": "Host name",
            "example": "Central"
          },
          "state": {
            "type": "integer",
            "description": "Host state\n * `0` - UP\n * `1` - DOWN\n * `2` - UNREACHABLE\n * `4` - PENDING\n",
            "example": 0
          }
        }
      },
      "Monitoring.HostFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Monitoring.HostMain"
          },
          {
            "type": "object",
            "properties": {
              "active_checks": {
                "type": "boolean",
                "description": "Indicates whether active checks are enabled for the host",
                "example": true
              },
              "check_command": {
                "type": "string",
                "description": "Command name used for active checks",
                "example": "base_host_alive"
              },
              "check_interval": {
                "type": "number",
                "format": "float",
                "description": "Interval between two checks",
                "example": 5
              },
              "check_period": {
                "type": "string",
                "description": "Name of the check period",
                "example": "24x7"
              },
              "check_type": {
                "type": "integer",
                "description": "Type of the last check\n  * `0` - Active\n  * `1` - Passive\n",
                "example": 0
              },
              "last_hard_state": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Date of the last hard state (ISO8601)"
              },
              "last_notification": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Date of the last notification (ISO8601)"
              },
              "latency": {
                "type": "number",
                "format": "float",
                "description": "Time difference between scheduled check time and actual check time",
                "example": 0.005
              },
              "next_check": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Scheduled date for the next check (ISO8601)"
              },
              "next_host_notification": {
                "type": "integer",
                "description": "..."
              },
              "notification_interval": {
                "type": "number",
                "format": "float",
                "description": "Interval of periodic notification or `0` if its off",
                "example": 30
              },
              "notification_number": {
                "type": "integer",
                "description": "Current notification number",
                "example": 3
              },
              "notify": {
                "type": "boolean",
                "description": "Indicates whether notifications of the host are enabled",
                "example": true
              },
              "notify_on_down": {
                "type": "boolean",
                "description": "Indicates whether notifications are sent when the host is down",
                "example": true
              },
              "notify_on_downtime": {
                "type": "boolean",
                "description": "Indicates whether a notification is sent when the host is put in a downtime period",
                "example": false
              },
              "notify_on_flapping": {
                "type": "boolean",
                "description": "Indicates whether notifications are sent when the host is flapping",
                "example": false
              },
              "notify_on_recovery": {
                "type": "boolean",
                "description": "Indicates whether notifications are sent when the host has recovered",
                "example": true
              },
              "notify_on_unreachable": {
                "type": "boolean",
                "description": "Indicates whether notifications are sent when the host is unreachable",
                "example": false
              },
              "flapping": {
                "type": "boolean",
                "description": "Is the host flapping or not",
                "example": false
              },
              "percent_state_change": {
                "type": "number",
                "format": "float",
                "description": "Percent state change since last check",
                "example": 3.5
              },
              "downtimes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Downtime.Host"
                }
              },
              "acknowledgement": {
                "type": "object",
                "properties": {
                  "host": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Acknowledgement.Host"
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "Monitoring.HostMain": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Monitoring.HostMin"
          },
          {
            "$ref": "#/components/schemas/Monitoring.HostWithService"
          },
          {
            "type": "object",
            "properties": {
              "poller_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the poller to which the host is linked",
                "example": 1
              },
              "acknowledged": {
                "type": "boolean",
                "description": "Indicates whether the last status was acknowledged",
                "example": false
              },
              "address_ip": {
                "type": "string",
                "format": "ipv4",
                "description": "IP address of the host",
                "example": "127.0.0.1"
              },
              "check_attempt": {
                "type": "integer",
                "description": "Number of the current check attempt",
                "example": 1
              },
              "checked": {
                "type": "boolean",
                "description": "Indicates whether the host is checked",
                "example": true
              },
              "execution_time": {
                "type": "number",
                "format": "float",
                "nullable": true,
                "description": "Time duration to check the host",
                "example": 0.070906
              },
              "icon_image": {
                "type": "string",
                "description": "File of the icon used to represent this host",
                "example": "ppm/operatingsystems-linux-snmp-linux-128.png"
              },
              "icon_image_alt": {
                "type": "string",
                "description": "Alternative text of the icon representing the host",
                "example": ""
              },
              "last_check": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of last check (ISO8601)"
              },
              "last_hard_state_change": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of the last hard state change (ISO8601)"
              },
              "last_state_change": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of the last state change (soft or hard) (ISO8601)"
              },
              "last_time_down": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The last time the host was DOWN (ISO8601)"
              },
              "last_time_unreachable": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The last time the host was UNREACHABLE (ISO8601)"
              },
              "last_time_up": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The last time the host was UP (ISO8601)"
              },
              "last_update": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of last update (ISO8601)"
              },
              "max_check_attempts": {
                "type": "integer",
                "format": "int64",
                "description": "Max check attempts for active host check (before changing the state type to HARD)",
                "example": 3
              },
              "output": {
                "type": "string",
                "description": "Output of the last host check",
                "example": "OK - 127.0.0.1 rta 0.100ms lost 0%\n"
              },
              "passive_checks": {
                "type": "boolean",
                "description": "Indicates whether the check script is passive or not",
                "example": false
              },
              "state_type": {
                "type": "integer",
                "description": "State type\n * `0` - SOFT\n * `1` - HARD\n",
                "example": 0
              },
              "timezone": {
                "type": "string",
                "description": "Timezone used for dates",
                "example": ":Europe/Paris"
              },
              "scheduled_downtime_depth": {
                "type": "integer",
                "description": "Is there scheduled downtime for host or not (1 or 0)",
                "example": 0
              },
              "criticality": {
                "type": "integer",
                "nullable": true,
                "description": "Host criticality level (for display purposes)",
                "example": 10
              }
            }
          }
        ]
      },
      "Monitoring.HostWithService": {
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Monitoring.ServiceMin"
            }
          }
        }
      },
      "Monitoring.ServiceGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the service group",
            "example": 13
          },
          "name": {
            "type": "string",
            "description": "Name of the service group",
            "example": "MySG"
          }
        }
      },
      "Monitoring.Severity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the severity",
            "example": 13
          },
          "name": {
            "type": "string",
            "description": "Name of the severity",
            "example": "severity-name"
          },
          "level": {
            "type": "integer",
            "format": "int64",
            "description": "Level defined for the severity",
            "example": 50
          },
          "type": {
            "type": "string",
            "enum": [
              "host",
              "service"
            ],
            "description": "Type of the severity",
            "example": "host|service"
          },
          "icon": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the icon",
                "example": "i-vertix.png"
              },
              "url": {
                "type": "string",
                "description": "URL of the icon",
                "example": "img/i-vertix.png"
              }
            }
          }
        }
      },
      "Monitoring.ServiceMin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the service",
            "example": 5
          },
          "description": {
            "type": "string",
            "description": "Service description",
            "example": "Ping"
          },
          "display_name": {
            "type": "string",
            "description": "Service display name",
            "example": "Ping"
          },
          "state": {
            "type": "integer",
            "description": "The current state of the service\n  * `0` - OK\n  * `1` - WARNING\n  * `2` - CRITICAL\n  * `3` - UNKNOWN\n  * `4` - PENDING\n",
            "example": 0
          }
        }
      },
      "Monitoring.ServiceMain": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Monitoring.ServiceMin"
          },
          {
            "type": "object",
            "properties": {
              "check_attempt": {
                "type": "string",
                "description": "Number of the current check attempt",
                "example": 1
              },
              "icon_image": {
                "type": "string",
                "description": "File name of the icon representing the service",
                "example": ""
              },
              "icon_image_alt": {
                "type": "string",
                "description": "Alternative text of the icon representing the service",
                "example": ""
              },
              "last_check": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of last check (ISO8601)"
              },
              "last_state_change": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of the last state change (ISO8601)"
              },
              "max_check_attempts": {
                "type": "integer",
                "description": "Max check attempts",
                "example": 3
              },
              "output": {
                "type": "string",
                "description": "Output of the last service check",
                "example": "OK - 127.0.0.1 rta 0.025ms lost 0%\n"
              },
              "state_type": {
                "type": "integer",
                "description": "Type of the current state\n  * `0` - SOFT\n  * `1` - HARD\n",
                "example": 1
              },
              "criticality": {
                "type": "integer",
                "nullable": true,
                "description": "Service criticality level (for display purposes)",
                "example": 10
              },
              "status": {
                "$ref": "#/components/schemas/Monitoring.ResourceStatus"
              },
              "duration": {
                "type": "string",
                "nullable": true,
                "description": "Duration since last status change",
                "example": "2h 3m"
              }
            }
          }
        ]
      },
      "Monitoring.ServiceFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Monitoring.ServiceMain"
          },
          {
            "type": "object",
            "properties": {
              "check_command": {
                "type": "string",
                "description": "Command name used for active checks",
                "example": "check_ivertix_ping"
              },
              "check_interval": {
                "type": "number",
                "format": "float",
                "description": "Interval between two scheduled checks of the service",
                "example": 5
              },
              "check_period": {
                "type": "string",
                "description": "Name of the check period",
                "example": "24x7"
              },
              "check_type": {
                "type": "integer",
                "description": "Type of the last check\n  * `0` - Active\n  * `1` - Passive\n",
                "example": 0
              },
              "command_line": {
                "type": "string",
                "nullable": true,
                "description": "Command used for active checks",
                "example": "/usr/lib64/nagios/plugins/check_icmp -H 127.0.0.1 -n 5 -w 200,20% -c 400,50%"
              },
              "execution_time": {
                "type": "number",
                "format": "float",
                "description": "Time duration to check the service",
                "example": 0.179335
              },
              "is_acknowledged": {
                "type": "boolean",
                "description": "Indicates whether the last status was acknowledged",
                "example": false
              },
              "is_active_check": {
                "type": "boolean",
                "description": "Indicates whether active checks are enabled for the service",
                "example": true
              },
              "is_checked": {
                "type": "boolean",
                "description": "Indicates whether the service has been checked",
                "example": true
              },
              "last_hard_state_change": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of the last hard state change (ISO8601)"
              },
              "last_notification": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of the last notification (ISO8601)"
              },
              "last_time_critical": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The last time the service was CRITICAL (ISO8601)"
              },
              "last_time_ok": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The last time the service was OK (ISO8601)"
              },
              "last_time_unknown": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The last time the service was UNKNOWN (ISO8601)"
              },
              "last_time_warning": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The last time the service was WARNING (ISO8601)"
              },
              "last_update": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of the last update (ISO8601)"
              },
              "latency": {
                "type": "number",
                "format": "float",
                "description": "Time difference between scheduled check time and actual check time",
                "example": 0.031
              },
              "next_check": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Scheduled date for the next check (ISO8601)"
              },
              "performance_data": {
                "type": "string",
                "description": "Performance data of the last check plugin",
                "example": "rta=0.025ms;200.000;400.000;0; rtmax=0.061ms;;;; rtmin=0.015ms;;;; pl=0%;20;50;0;100 "
              },
              "scheduled_downtime_depth": {
                "type": "integer",
                "description": "Number of scheduled downtimes the service is currently in",
                "example": 0
              },
              "downtimes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Downtime.Service"
                }
              },
              "acknowledgement": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Acknowledgement.Service"
                  }
                ],
                "type": "object",
                "nullable": true
              },
              "flapping": {
                "type": "boolean",
                "description": "Is the host flapping or not",
                "example": false
              },
              "notify": {
                "type": "boolean",
                "description": "Indicates whether notifications of the service are enabled",
                "example": true
              }
            }
          }
        ]
      },
      "Monitoring.ServiceWithHost": {
        "type": "object",
        "properties": {
          "hosts": {
            "$ref": "#/components/schemas/Monitoring.HostMin"
          }
        }
      },
      "Bulk.Resource.Id": {
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the resource",
            "example": 12
          },
          "parent_resource_id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "ID of the parent resource (eg: host id)",
            "example": 5
          }
        }
      },
      "Configuration.Proxy": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the proxy",
            "example": "proxy.internal.company.org"
          },
          "port": {
            "type": "integer",
            "description": "Port of the proxy",
            "minimum": 0,
            "maximum": 65535,
            "example": 3128
          },
          "user": {
            "type": "string",
            "nullable": true,
            "description": "Login used to connect to proxy",
            "example": "proxy-user"
          },
          "password": {
            "type": "string",
            "nullable": true,
            "description": "Password used to connect to proxy",
            "example": "proxy-pass"
          }
        },
        "required": [
          "url",
          "port",
          "user",
          "password"
        ]
      },
      "Monitoring.TimelineEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the event (it is not uniq)",
            "example": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "event",
              "notification",
              "downtime",
              "acknowledgement",
              "comment"
            ],
            "description": "Type of event",
            "example": "event"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the event happened (ISO8601)"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date the event started (ISO8601) (start date of downtime)"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date the event ended (ISO8601) (end date of downtime)"
          },
          "content": {
            "type": "string",
            "description": "The content of the event"
          },
          "contact": {
            "type": "object",
            "nullable": true,
            "description": "The contact of the event",
            "properties": {
              "id": {
                "type": "integer",
                "nullable": true,
                "description": "Id of the contact"
              },
              "name": {
                "type": "string",
                "description": "Name of the contact"
              }
            }
          },
          "status": {
            "$ref": "#/components/schemas/Monitoring.ResourceStatus"
          },
          "tries": {
            "type": "integer",
            "nullable": true,
            "description": "The count of retry"
          }
        }
      },
      "Topology.Register": {
        "type": "object",
        "required": [
          "name",
          "type",
          "address"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the server to register in the topology",
            "example": "myPoller"
          },
          "hostname": {
            "type": "string",
            "description": "Platform's 'physical' name",
            "example": "my.poller.physical.hostname"
          },
          "type": {
            "type": "string",
            "enum": [
              "central",
              "poller",
              "remote",
              "map",
              "mbi"
            ],
            "example": "poller",
            "description": "Type of the server from available Server types :\n  * 'Central'\n  * 'Poller'\n  * 'Remote'\n  * 'MAP'\n  * 'MBI'\n"
          },
          "address": {
            "type": "string",
            "description": "Address of the server. IPv4, IPv6 or DNS",
            "example": "1.1.1.2"
          },
          "parent_address": {
            "type": "string",
            "description": "It should not be added to register a Central or other platforms in specific cases: Eg : To register a remote server as top level platform on its own platform.\nMandatory parameter for all other types, to be able to link a platform to its parent Example : - To link a poller to a Central - To link a remote server to a Central - To link a poller to a remote server\n",
            "example": "1.1.1.1"
          }
        }
      },
      "Platform.Full": {
        "type": "object",
        "properties": {
          "platformName": {
            "type": "string",
            "description": "The name of the platform"
          },
          "isRemote": {
            "type": "boolean",
            "example": true,
            "description": "Platform is a remote server"
          },
          "address": {
            "type": "string",
            "example": "10.0.0.1",
            "description": "The address of the platform"
          },
          "centralServerAddress": {
            "type": "string",
            "example": "192.168.0.1",
            "description": "Central linked address"
          },
          "apiUsername": {
            "type": "string",
            "example": "admin",
            "description": "Api Username"
          },
          "apiCredentials": {
            "type": "string",
            "example": "admin",
            "description": "Api Password"
          },
          "apiScheme": {
            "type": "string",
            "example": "http",
            "description": "Protocol"
          },
          "apiPort": {
            "type": "integer",
            "example": "80",
            "description": "Port used by the API"
          },
          "apiPath": {
            "type": "string",
            "example": "centreon",
            "description": "name of your API root folder"
          },
          "peerValidation": {
            "type": "boolean",
            "example": false,
            "description": "Usage of peer validation"
          },
          "proxy": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "nullable": true,
                "example": "example.proxy.com",
                "description": "Host of your proxy"
              },
              "port": {
                "type": "integer",
                "nullable": true,
                "example": 80,
                "description": "Proxy port"
              },
              "user": {
                "type": "string",
                "nullable": true,
                "example": "admin",
                "description": "proxy username"
              },
              "password": {
                "type": "string",
                "nullable": true,
                "example": "changeme",
                "description": "proxy password"
              }
            }
          }
        }
      },
      "Gorgone.Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message returned by Gorgone",
            "example": "Logs found"
          },
          "token": {
            "type": "string",
            "description": "Token used to identify the command"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "creation_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Creation of dataset in ISO Format",
                  "example": "2020-11-24T09:13:04+01:00"
                },
                "event_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Time when event occured in ISO Format",
                  "example": "2020-11-24T09:11:00+01:00"
                },
                "id": {
                  "type": "number",
                  "format": "integer",
                  "description": "Id of the Event",
                  "example": 1
                },
                "token": {
                  "type": "string",
                  "description": "Token used to identify the command"
                },
                "code": {
                  "type": "number",
                  "format": "integer",
                  "description": "Return code of response",
                  "example": 2
                },
                "data": {
                  "type": "string",
                  "description": "Data on JSON Format",
                  "example": "{\"action\":\"getthumbprint\",\"data\":{\"thumbprint\":\"xxxx_xxxxxxxxx\"},\"message\":\"ok\"}"
                }
              }
            }
          }
        }
      },
      "FindAccsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 4
          },
          "name": {
            "type": "string",
            "description": "ACC name",
            "example": "my-acc-name"
          },
          "description": {
            "type": "string",
            "description": "A short ACC description",
            "example": "some description"
          },
          "type": {
            "type": "string",
            "description": "Type of ACC\n\nSupported ACC types:\n  * vmware_v6\n",
            "example": "vmware_v6"
          },
          "created_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Creation contact ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Creation contact name",
                "example": "admin"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Creation date (ISO8601)"
          },
          "updated_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Update contact ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Update contact name",
                "example": "admin"
              }
            }
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Update date (ISO8601)"
          }
        }
      },
      "Meta-2": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the paginated page",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "description": "Number of items per page",
            "example": 10
          },
          "search": {
            "type": "object",
            "description": "Search parameter passed to URL"
          },
          "sort_by": {
            "type": "object",
            "description": "Sort parameter passed to URL"
          },
          "total": {
            "type": "integer",
            "description": "Number of items found",
            "example": 1
          }
        }
      },
      "AddAccRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "pollers",
          "parameters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "ACC name",
            "example": "my-acc-name"
          },
          "description": {
            "type": "string",
            "description": "A short ACC description",
            "example": "some description"
          },
          "type": {
            "type": "string",
            "description": "Type of ACC\n\nSupported ACC types:\n  * vmware_v6\n",
            "example": "vmware_v6"
          },
          "pollers": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Poller ID(s) associated with the ACC",
            "example": [
              1,
              12
            ]
          },
          "parameters": {
            "type": "object",
            "description": "Configuration parameters, varies depending on the ACC type.\n",
            "example": {
              "port": 4242,
              "vcenters": [
                {
                  "name": "my-vcenter",
                  "url": "http://10.10.10.10/sdk",
                  "username": "admin",
                  "password": "my-pwd"
                }
              ]
            }
          }
        }
      },
      "AddAccResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 4
          },
          "name": {
            "type": "string",
            "description": "ACC name",
            "example": "my-acc-name"
          },
          "description": {
            "type": "string",
            "description": "A short ACC description",
            "example": "some description"
          },
          "type": {
            "type": "string",
            "description": "Type of ACC\n\nSupported ACC types:\n  * vmware_v6\n",
            "example": "vmware_v6"
          },
          "pollers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Poller ID",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Poller name",
                  "example": "my-poller-name"
                }
              }
            },
            "description": "Poller(s) associated with the ACC"
          },
          "parameters": {
            "type": "object",
            "description": "Configuration parameters, varies depending on the ACC type.\nCredential values are not readable and will always be null.\n",
            "example": {
              "port": 4242,
              "vcenters": [
                {
                  "name": "my-vcenter",
                  "url": "http://10.10.10.10/sdk",
                  "username": null,
                  "password": null
                }
              ]
            }
          },
          "created_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Creation contact ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Creation contact name",
                "example": "admin"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Creation date (ISO8601)"
          }
        }
      },
      "FindAccResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 4
          },
          "name": {
            "type": "string",
            "description": "ACC name",
            "example": "my-acc-name"
          },
          "description": {
            "type": "string",
            "description": "A short ACC description",
            "example": "some description"
          },
          "type": {
            "type": "string",
            "description": "Type of ACC\n\nSupported ACC types:\n  * vmware_v6\n",
            "example": "vmware_v6"
          },
          "pollers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Poller ID",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Poller name",
                  "example": "my-poller-name"
                }
              }
            },
            "description": "Poller(s) associated with the ACC"
          },
          "parameters": {
            "type": "object",
            "description": "Configuration parameters, varies depending on the ACC type.\nCredential values are not readable and will always be null.\n",
            "example": {
              "port": 4242,
              "vcenters": [
                {
                  "name": "my-vcenter",
                  "url": "http://10.10.10.10/sdk",
                  "username": null,
                  "password": null
                }
              ]
            }
          },
          "created_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Creation contact ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Creation contact name",
                "example": "admin"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Creation date (ISO8601)"
          },
          "updated_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Update contact ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Update contact name",
                "example": "admin"
              }
            }
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Update date (ISO8601)"
          }
        }
      },
      "UpdateAccRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "pollers",
          "parameters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "ACC name",
            "example": "my-acc-name"
          },
          "description": {
            "type": "string",
            "description": "A short ACC description",
            "example": "some description"
          },
          "type": {
            "type": "string",
            "description": "Type of ACC\n\nSupported ACC types:\n  * vmware_v6\n",
            "example": "vmware_v6"
          },
          "pollers": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Poller ID(s) associated with the ACC",
            "example": [
              1,
              12
            ]
          },
          "parameters": {
            "type": "object",
            "description": "Configuration parameters, varies depending on the ACC type.\nIf credential(s) do not change, replace value(s) by null.\n",
            "example": {
              "port": 4242,
              "vcenters": [
                {
                  "name": "my-vcenter B",
                  "url": "http://10.10.10.10/sdk",
                  "username": null,
                  "password": null
                },
                {
                  "name": "my-vcenter B",
                  "url": "http://10.10.10.10/sdk",
                  "username": "admin",
                  "password": "my-pwd B"
                }
              ]
            }
          }
        }
      },
      "FindAcsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 4
          },
          "name": {
            "type": "string",
            "description": "configuration name",
            "example": "my-cfg-name"
          },
          "type": {
            "type": "string",
            "description": "Type of configuration\n\nSupported types:\n  * telegraf\n",
            "example": "telegraf"
          },
          "pollers": {
            "type": "array",
            "description": "List of pollers that are attached to this object",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Poller ID",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Poller name",
                  "example": "my-poller-name"
                }
              }
            }
          }
        }
      },
      "AddAcRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "pollerIds",
          "configuration"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "configuration name",
            "example": "my-cfg-name"
          },
          "type": {
            "type": "string",
            "description": "Type of configuration\n\nSupported types:\n  * telegraf\n  * centreon-agent\n",
            "example": "telegraf"
          },
          "poller_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Poller ID(s) associated with the configuration",
            "example": [
              1,
              12
            ]
          },
          "configuration": {
            "type": "object",
            "description": "Configuration parameters, varies depending on the type.\n",
            "example": {
              "otel_public_certificate": "my-otel-certificate-name",
              "otel_ca_certificate": null,
              "otel_private_key": "my-otel-private-key-name",
              "conf_server_port": 1443,
              "conf_certificate": "my-certificate-name",
              "conf_private_key": "my-private-key-name"
            }
          }
        }
      },
      "AddAcResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 4
          },
          "name": {
            "type": "string",
            "description": "configuration name",
            "example": "my-cfg-name"
          },
          "type": {
            "type": "string",
            "description": "Type of configuration",
            "example": "telegraf"
          },
          "pollers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Poller ID",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Poller name",
                  "example": "my-poller-name"
                }
              }
            },
            "description": "Poller(s) associated with the configuration"
          },
          "configuration": {
            "type": "object",
            "description": "Configuration parameters, varies depending on the configuration type.\n",
            "example": {
              "otel_public_certificate": "my-otel-certificate-name",
              "otel_ca_certificate": null,
              "otel_private_key": "my-otel-private-key-name",
              "conf_server_port": 1443,
              "conf_certificate": "my-certificate-name",
              "conf_private_key": "my-private-key-name"
            }
          }
        }
      },
      "GetAcResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 4
          },
          "name": {
            "type": "string",
            "description": "configuration name",
            "example": "my-cfg-name"
          },
          "type": {
            "type": "string",
            "description": "Type of configuration\n\nSupported types:\n  * telegraf\n",
            "example": "telegraf"
          },
          "pollers": {
            "type": "array",
            "description": "List of pollers that are attached to this object",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Poller ID",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Poller name",
                  "example": "my-poller-name"
                }
              }
            }
          },
          "configuration": {
            "type": "object",
            "description": "Configuration parameters, varies depending on the object type.\n",
            "example": {
              "otel_server_address": "10.10.10.10",
              "otel_server_port": 453,
              "otel_public_certificate": "public_certif",
              "otel_ca_certificate": "ca_certif",
              "otel_private_key": "otel-key",
              "conf_server_port": 454,
              "conf_certificate": "conf-certif",
              "conf_private_key": "conf-key"
            }
          }
        }
      },
      "UpdateAcRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "pollerIds",
          "configuration"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "configuration name",
            "example": "my-cfg-name"
          },
          "type": {
            "type": "string",
            "description": "Type of configuration\n\nSupported types:\n  * telegraf\n  * centreon-agent\n",
            "example": "telegraf"
          },
          "poller_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Poller ID(s) associated with the configuration",
            "example": [
              1,
              12
            ]
          },
          "configuration": {
            "type": "object",
            "description": "Configuration parameters, varies depending on the configuration type.\n",
            "example": {
              "otel_public_certificate": "my-otel-certificate-name",
              "otel_ca_certificate": null,
              "otel_private_key": "my-otel-private-key-name",
              "conf_server_port": 1443,
              "conf_certificate": "my-certificate-name",
              "conf_private_key": "my-private-key-name"
            }
          }
        }
      },
      "AddBrokerInputOutputRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "parameters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "input/output name",
            "example": "central-broker-master-unified-sql"
          },
          "type": {
            "type": "integer",
            "description": "Input/Output type ID\n\nMust be one of the following for outputs:\n  *  3 - IPv4 (ipv4)\n  * 10 - IPv6 (ipv6)\n  * 11 - File (file)\n  * 13 - RRD file generator (rrd)\n  * 14 - Perfdata Generator (Centreon Storage) - DEPRECATED (storage)\n  * 16 - Broker SQL database - DEPRECATED (sql)\n  * 28 - Database configuration reader (db_cfg_reader)\n  * 29 - Database configuration writer (db_cfg_writer)\n  * 30 - Storage - Graphite (graphite)\n  * 31 - Storage - InfluxDB (influxdb)\n  * 33 - Stream connector (lua)\n  * 34 - Unified SQL (unified_sql)\n  * 35 - BBDO Server (bbdo_server)\n  * 36 - BBDO Client (bbdo_client)\n\nMust be one of the following for inputs:\n  *  3 - IPv4 (ipv4)\n  * 10 - IPv6 (ipv6)\n  * 11 - File (file)\n  * 35 - BBDO Server (bbdo_server)\n  * 36 - BBDO Client (bbdo_client)\n",
            "example": 33
          },
          "parameters": {
            "type": "object",
            "description": "Output parameters specific to the output type.\n\nFor multiselect fields the property name is a combination of\nthe group field name and the sub field name as \"{fieldName}_{subfieldName}\" (ex: \"filters_category\")\n\nAll fields must be provided, but can be null/empty if they are optional.\n",
            "example": {
              "path": "some/test/path",
              "filters_category": [
                "storage",
                "neb"
              ],
              "lua_parameter": [
                {
                  "type": "string",
                  "name": "my-lua-param-1",
                  "value": "azerty"
                },
                {
                  "type": "string",
                  "name": "my-lua-param-2",
                  "value": "qwerty"
                }
              ]
            }
          }
        }
      },
      "AddBrokerInputOutputResponse": {
        "type": "object",
        "properties": {
          "brokerId": {
            "type": "integer",
            "description": "Broker configuration ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "input/output name",
            "example": "central-broker-master-unified-sql"
          },
          "type": {
            "type": "object",
            "description": "input/output type",
            "properties": {
              "id": {
                "type": "integer",
                "description": "input/output type ID",
                "example": 33
              },
              "name": {
                "type": "string",
                "description": "input/output type name",
                "example": "lua"
              }
            }
          },
          "parameters": {
            "type": "object",
            "description": "Input/Output parameters specific to its type.\n\nFor multiselect fields, the property name is a combination of the group field name and the sub field name (ex: \"filters_category\")\n",
            "example": {
              "path": "some/test/path",
              "filters_category": [
                "storage",
                "neb"
              ],
              "lua_parameter": [
                {
                  "type": "string",
                  "name": "my-lua-param-1",
                  "value": "azerty"
                },
                {
                  "type": "string",
                  "name": "my-lua-param-2",
                  "value": "qwerty"
                }
              ]
            }
          }
        }
      },
      "FindCommandsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Command ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Command name",
            "example": "check_host_alive"
          },
          "type": {
            "type": "integer",
            "description": "Indicates the type of command\n\n* `1` - NOTIFICATION\n* `2` - CHECK\n* `3` - MISCELLANEOUS\n* `4` - DISCOVERY\n",
            "example": 2
          },
          "command_line": {
            "type": "string",
            "description": "Command line to be executed by the poller"
          },
          "is_shell": {
            "type": "boolean",
            "description": "Is required if your command requires shell features like pipes, redirections, globbing etc..\n\n If you are using the monitoring engine this option cannot be disabled.\n\n Note that commands that require shell features are slowing down the poller server.\n",
            "example": true
          },
          "is_locked": {
            "type": "boolean",
            "description": "Indicates whether the command can be updated or not",
            "example": false
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the command is activated or not",
            "example": true
          }
        }
      },
      "AddCommandRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "command_line"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Command name",
            "example": "check_host_alive"
          },
          "type": {
            "type": "integer",
            "description": "Indicates the type of command\n\n* `1` - NOTIFICATION\n* `2` - CHECK\n* `3` - MISCELLANEOUS\n* `4` - DISCOVERY\n",
            "example": 2
          },
          "command_line": {
            "type": "string",
            "description": "Command line to be executed by the poller"
          },
          "is_shell": {
            "type": "boolean",
            "description": "Is required if your command requires shell features like pipes, redirections, globbing etc.\n\nIf you are using the monitoring engine this option cannot be disabled.\n\nNote that commands that require shell features are slowing down the poller server.\n",
            "example": true
          },
          "argument_example": {
            "type": "string",
            "nullable": true,
            "description": "Example of command argument values",
            "example": "!80!90"
          },
          "arguments": {
            "type": "array",
            "description": "descriptions of arguments used in the command line",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the argument",
                  "example": "argument-name"
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Description of the argument",
                  "example": "argument-description"
                }
              }
            }
          },
          "macros": {
            "type": "array",
            "description": "descriptions of macros used in the command line",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the macro",
                  "example": "macro-name"
                },
                "type": {
                  "type": "integer",
                  "description": "Indicates the type of macro\n\n* `1` - HOST\n* `2` - SERVICE\n",
                  "example": 1
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Description of the macro",
                  "example": "macro-description"
                }
              }
            }
          },
          "connector_id": {
            "type": "integer",
            "nullable": true,
            "description": "A connector is run in the background and executes specific commands without the need to execute a binary.\n"
          },
          "graph_template_id": {
            "type": "integer",
            "nullable": true,
            "description": "Graph template for the command"
          }
        }
      },
      "AddCommandResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Command ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Command name",
            "example": "check_host_alive"
          },
          "type": {
            "type": "integer",
            "description": "Indicates the type of command\n\n* `1` - NOTIFICATION\n* `2` - CHECK\n* `3` - MISCELLANEOUS\n* `4` - DISCOVERY\n",
            "example": 2
          },
          "command_line": {
            "type": "string",
            "description": "Command line to be executed by the poller"
          },
          "is_shell": {
            "type": "boolean",
            "description": "Is required if your command requires shell features like pipes, redirections, globbing etc.\n\nIf you are using the monitoring engine this option cannot be disabled.\n\nNote that commands that require the shell features are slowing down the poller server.\n",
            "example": true
          },
          "is_locked": {
            "type": "boolean",
            "description": "Indicates whether the command can be updated or not",
            "example": false
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the command is activated or not",
            "example": true
          },
          "argument_example": {
            "type": "string",
            "nullable": true,
            "description": "Example of command argument values",
            "example": "!80!90"
          },
          "arguments": {
            "type": "array",
            "description": "descriptions of arguments used in the command line",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the argument",
                  "example": "argument-name"
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Description of the argument",
                  "example": "argument-description"
                }
              }
            }
          },
          "macros": {
            "type": "array",
            "description": "descriptions of macros used in the command line",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the macro",
                  "example": "macro-name"
                },
                "type": {
                  "type": "integer",
                  "description": "Indicates the type of macro\n\n* `1` - HOST\n* `2` - SERVICE\n",
                  "example": 1
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Description of the macro",
                  "example": "macro-description"
                }
              }
            }
          },
          "connector": {
            "type": "object",
            "nullable": true,
            "description": "A connector is run in background and executes specific commands without the need to execute a binary.\n",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Connector ID",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "Connector name",
                "example": "SSH Connector"
              }
            }
          },
          "graph_template": {
            "type": "object",
            "nullable": true,
            "description": "Graph template for the command",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Graph template ID",
                "example": 8
              },
              "name": {
                "type": "string",
                "description": "Graph template name",
                "example": "Default_Graph"
              }
            }
          }
        }
      },
      "FindGraphTemplatesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Graph template ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Graph template name",
            "example": "CPU"
          },
          "vertical_axis_label": {
            "type": "string",
            "description": "Graph vertical axis label",
            "example": "some axis label"
          },
          "width": {
            "type": "integer",
            "description": "OK",
            "example": 120
          },
          "height": {
            "type": "integer",
            "description": "OK",
            "example": 120
          },
          "base": {
            "type": "integer",
            "description": "Indicates the graph base value: 1000 or 1024",
            "example": 1024
          },
          "grid": {
            "type": "object",
            "items": {
              "lower_limit": {
                "type": "number",
                "nullable": true,
                "description": "Lower limit of the grid",
                "example": 115
              },
              "upper_limit": {
                "type": "number",
                "nullable": true,
                "description": "Upper limit of the grid",
                "example": 115
              },
              "is_upper_limit_sized_to_max": {
                "type": "bool",
                "description": "Set the upper limit of the grid to the maximum value",
                "example": false
              }
            }
          },
          "is_graph_scaled": {
            "type": "bool",
            "description": "Enable auto scale of the graph",
            "example": true
          },
          "is_default_centreon_template": {
            "type": "bool",
            "description": "Set template as default template",
            "example": false
          }
        }
      },
      "FindConnectorsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Connector ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Connector name",
            "example": "SSH Connector"
          },
          "command_line": {
            "type": "string",
            "description": "Command line to be executed by the poller"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A short description of the connector",
            "example": "some description"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the connector is activated or not",
            "example": true
          },
          "commands": {
            "type": "array",
            "description": "Commands linked to the connector",
            "items": {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Command ID",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Command name",
                  "example": "check_host_alive"
                },
                "type": {
                  "type": "integer",
                  "description": "Indicates the type of command\n\n* `1` - NOTIFICATION\n* `2` - CHECK\n* `3` - MISCELLANEOUS\n* `4` - DISCOVERY\n",
                  "example": 2
                }
              }
            }
          }
        }
      },
      "PartialUpdateHostRequest": {
        "type": "object",
        "properties": {
          "monitoring_server_id": {
            "type": "integer",
            "description": "ID of the host's monitoring server",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Host name",
            "example": "generic-active-host"
          },
          "address": {
            "type": "string",
            "description": "IP or domain of the host",
            "example": "127.0.0.1"
          },
          "alias": {
            "type": "string",
            "description": "Host alias",
            "example": "generic-active-host"
          },
          "snmp_community": {
            "type": "string",
            "nullable": true,
            "description": "Community of the SNMP agent"
          },
          "snmp_version": {
            "type": "string",
            "nullable": true,
            "enum": [
              1,
              "2c",
              3
            ],
            "description": "Version of the SNMP agent.\n\nThe value can be `1`, `2c` or `3`\n",
            "example": "2c"
          },
          "geo_coords": {
            "type": "string",
            "nullable": true,
            "description": "Geographic coordinates of the host",
            "example": "48.10,12.5"
          },
          "timezone_id": {
            "type": "integer",
            "description": "Timezone ID",
            "example": 1,
            "nullable": true
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID",
            "example": 1,
            "nullable": true
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID. Must be of type 'Check'.",
            "example": 1,
            "nullable": true
          },
          "check_command_args": {
            "type": "array",
            "description": "Check command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Check command timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "max_check_attempts": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of times that the monitoring engine will retry the host check command if it returns any non-OK state"
          },
          "normal_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of 'time units' between regularly scheduled checks of the host.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications for this host are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_options": {
            "type": "integer",
            "description": "Define the states of the host for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - DOWN\n* `2` - UNREACHABLE\n* `4` - RECOVERY\n* `8` - FLAPPING\n* `16` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent, the values used will be: DOWN, UNREACHABLE, RECOVERY, FLAPPING and DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options DOWN and RECOVERY\n",
            "example": 5,
            "nullable": true
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about alerts for this host - only one alert notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "add_inherited_contact_group": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "add_inherited_contact": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first alert notification when this host enters a non-UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a duration of acknowledgement for this host."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "freshness_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the freshness threshold (in seconds) for this host."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "low_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the low state change threshold used in flap detection for this host"
          },
          "high_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the high state change threshold used in flap detection for this host"
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID",
            "example": 1,
            "nullable": true
          },
          "event_handler_command_args": {
            "type": "array",
            "description": "Event handler command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "note_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more information about the host."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional note."
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host."
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the ID of the image that should be associated with this host",
            "example": 1
          },
          "icon_alternative": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Define an optional string that is used as alternative description for the icon"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Host comments"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the host is activated or not"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the host category IDs that should be associated with this host",
            "example": [
              1,
              15,
              8
            ]
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the host group IDs that should be associated with this host",
            "example": [
              1,
              15,
              8
            ]
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the parent host template IDs that should be associated with this host.\nThe order of the IDs determines the inheritance priority order.\n",
            "example": [
              3,
              12
            ]
          },
          "macros": {
            "type": "array",
            "description": "Host macros defined for the host (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
            "items": {
              "type": "object",
              "required": [
                "name",
                "value",
                "is_password",
                "description"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the macro",
                  "example": "MacroName"
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "description": "Value of the macro.\n\nIf macro.is_password property is set to true and macro.value is set to null,\nthen the macro.value will be considered unchanged.\n",
                  "example": "macroValue"
                },
                "is_password": {
                  "type": "boolean",
                  "description": "Indicates whether the macro value is a password or not",
                  "example": false
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Macro description",
                  "example": "Some text to describe the macro"
                }
              }
            }
          }
        }
      },
      "FindHostTemplateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Host template id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Host template name",
            "example": "generic-active-host"
          },
          "alias": {
            "type": "string",
            "description": "Host template alias",
            "example": "generic-active-host"
          },
          "snmp_version": {
            "type": "string",
            "nullable": true,
            "enum": [
              1,
              "2c",
              3
            ],
            "description": "Version of the SNMP agent.\n\nThe value can be `1`, `2c` or `3`\n",
            "example": "2c"
          },
          "timezone_id": {
            "type": "integer",
            "description": "Timezone ID",
            "example": 1,
            "nullable": true
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID",
            "example": 1,
            "nullable": true
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID",
            "example": 1,
            "nullable": true
          },
          "check_command_args": {
            "type": "array",
            "description": "Check command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Check command timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "max_check_attempts": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of times that the monitoring engine will retry the host check command if it returns any non-OK state"
          },
          "normal_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of 'time units' between regularly scheduled checks of the host.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications for this host are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_options": {
            "type": "integer",
            "description": "Define the states of the host for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - DOWN\n* `2` - UNREACHABLE\n* `4` - RECOVERY\n* `8` - FLAPPING\n* `16` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent, the values used will be: DOWN, UNREACHABLE, RECOVERY, FLAPPING and DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options DOWN and RECOVERY\n",
            "example": 5,
            "nullable": true
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this host - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "add_inherited_contact_group": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "add_inherited_contact": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this host enters a non-UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a duration of acknowledgement for this host."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "freshness_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the freshness threshold (in seconds) for this host."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "low_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the low state change threshold used in flap detection for this host"
          },
          "high_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the high state change threshold used in flap detection for this host"
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID",
            "example": 1,
            "nullable": true
          },
          "event_handler_command_args": {
            "type": "array",
            "description": "Event handler command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "note_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more information about the host."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional note."
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host."
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the image ID that should be associated with this host template",
            "example": 1
          },
          "icon_alternative": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Define an optional string that is used in the alternative description of the icon image"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Host template comments"
          },
          "is_locked": {
            "type": "boolean",
            "description": "Indicates whether the configuration is locked for editing or not"
          }
        }
      },
      "AddHostTemplateRequest": {
        "type": "object",
        "required": [
          "name",
          "alias"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Host template name",
            "example": "generic-active-host"
          },
          "alias": {
            "type": "string",
            "description": "Host template alias",
            "example": "generic-active-host"
          },
          "snmp_community": {
            "type": "string",
            "nullable": true,
            "description": "Community of the SNMP agent"
          },
          "snmp_version": {
            "type": "string",
            "nullable": true,
            "enum": [
              1,
              "2c",
              3
            ],
            "description": "Version of the SNMP agent.\n\nThe value can be `1`, `2c` or `3`\n",
            "example": "2c"
          },
          "timezone_id": {
            "type": "integer",
            "description": "Timezone ID",
            "example": 1,
            "nullable": true
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID",
            "example": 1,
            "nullable": true
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID. Must be of type 'Check'.",
            "example": 1,
            "nullable": true
          },
          "check_command_args": {
            "type": "array",
            "description": "Check command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Check command timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "max_check_attempts": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of times that the monitoring engine will retry the host check command if it returns any non-OK state"
          },
          "normal_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of 'time units' between regularly scheduled checks of the host.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether the active checks is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications for this host are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_options": {
            "type": "integer",
            "description": "Define the states of the host for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - DOWN\n* `2` - UNREACHABLE\n* `4` - RECOVERY\n* `8` - FLAPPING\n* `16` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent, the values used will be: DOWN, UNREACHABLE, RECOVERY, FLAPPING and DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options DOWN and RECOVERY\n",
            "example": 5,
            "nullable": true
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this host - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "add_inherited_contact_group": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "add_inherited_contact": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this host enters a non-UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a duration of acknowledgement for this host."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "freshness_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the freshness threshold (in seconds) for this host."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "low_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the low state change threshold used in flap detection for this host"
          },
          "high_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the high state change threshold used in flap detection for this host"
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID",
            "example": 1,
            "nullable": true
          },
          "event_handler_command_args": {
            "type": "array",
            "description": "Event handler command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "note_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more information about the host."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional note."
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host."
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the image ID that should be associated with this host template",
            "example": 1
          },
          "icon_alternative": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Define an optional string that is used as alternative description for the icon"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Host template comments"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the host category IDs that should be associated with this host template",
            "example": [
              1,
              15,
              8
            ]
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the parent host templates IDs that should be associated with this host template.\nThe order of the IDs determine the inheritance priority order.\n",
            "example": [
              3,
              12
            ]
          },
          "macros": {
            "type": "array",
            "description": "Host macros defined for the host (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
            "items": {
              "type": "object",
              "required": [
                "name",
                "value",
                "is_password",
                "description"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the macro",
                  "example": "MacroName"
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "description": "Value of the macro.\n\nIf macro.is_password property is set to true and macro.value is set to null,\nthen the macro.value will be considered unchanged.\n",
                  "example": "macroValue"
                },
                "is_password": {
                  "type": "boolean",
                  "description": "Indicates whether the macro value is a password or not",
                  "example": false
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Macro description",
                  "example": "Some text to describe the macro"
                }
              }
            }
          }
        }
      },
      "AddHostTemplateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Host template ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Host template name",
            "example": "generic-active-host"
          },
          "alias": {
            "type": "string",
            "description": "Host template alias",
            "example": "generic-active-host"
          },
          "snmp_version": {
            "type": "string",
            "nullable": true,
            "enum": [
              1,
              "2c",
              3
            ],
            "description": "Version of the SNMP agent.\n\nThe value can be `1`, `2c` or `3`\n",
            "example": "2c"
          },
          "timezone_id": {
            "type": "integer",
            "description": "Timezone ID",
            "example": 1,
            "nullable": true
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID",
            "example": 1,
            "nullable": true
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID",
            "example": 1,
            "nullable": true
          },
          "check_command_args": {
            "type": "array",
            "description": "Check command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Check command timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "max_check_attempts": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of times that the monitoring engine will retry the host check command if it returns any non-UP state"
          },
          "normal_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of 'time units' between regularly scheduled checks of the host.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications for this host are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_options": {
            "type": "integer",
            "description": "Define the states of the host for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - DOWN\n* `2` - UNREACHABLE\n* `4` - RECOVERY\n* `8` - FLAPPING\n* `16` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent, the values used will be: DOWN, UNREACHABLE, RECOVERY, FLAPPING and DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options DOWN and RECOVERY\n",
            "example": 5,
            "nullable": true
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this host - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "add_inherited_contact_group": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "add_inherited_contact": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this host enters a non-UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a duration of acknowledgement for this host."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "freshness_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the freshness threshold (in seconds) for this host."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "low_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the low state change threshold used in flap detection for this host"
          },
          "high_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the high state change threshold used in flap detection for this host"
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID",
            "example": 1,
            "nullable": true
          },
          "event_handler_command_args": {
            "type": "array",
            "description": "Event handler command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "note_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more information about the host."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional note."
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host."
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the image ID that should be associated with this host template",
            "example": 1
          },
          "icon_alternative": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Define an optional string that is used in the alternative description of the icon image"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Host template comments"
          },
          "is_locked": {
            "type": "boolean",
            "description": "Indicates whether the configuration is locked for editing or not"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Define a host category ID that is associated with this host template",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Define a host category name that is associated with this host template",
                  "example": "host-category-name"
                }
              }
            }
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Define a parent host template ID that is associated with this host template",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Define a parent host template name that is associated with this host template",
                  "example": "parent-template-name"
                }
              }
            }
          },
          "macros": {
            "type": "array",
            "description": "Host macros defined for the host.\nMacros inherited from parent templates or command are not listed.\n",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the macro",
                  "example": "MacroName"
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "description": "Value of the macro.\n\nIf macro.is_password property is set to true and macro.value will be set to null.\n",
                  "example": "macroValue"
                },
                "is_password": {
                  "type": "boolean",
                  "description": "Indicates whether the macro value is a password or not",
                  "example": false
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Macro description",
                  "example": "Some text to describe the macro"
                }
              }
            }
          }
        }
      },
      "PartialUpdateHostTemplateRequest": {
        "type": "object",
        "required": [],
        "properties": {
          "macros": {
            "type": "array",
            "description": "Host macros defined for the host (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
            "items": {
              "type": "object",
              "required": [
                "name",
                "value",
                "is_password",
                "description"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the macro",
                  "example": "MacroName"
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "description": "Value of the macro.\n\nIf macro.is_password property is set to true and macro.value is set to null,\nthen the macro.value will be considered unchanged.\n",
                  "example": "macroValue"
                },
                "is_password": {
                  "type": "boolean",
                  "description": "Indicates whether the macro value is a password or not",
                  "example": false
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Macro description",
                  "example": "Some text to describe the macro"
                }
              }
            }
          },
          "categories": {
            "type": "array",
            "description": "Define the host category IDs that should be associated with this host template\n\nIn the case of non-admin users, only categories the user has access to will be accepted and their association to the host template created or deleted.\n",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              15,
              8
            ]
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the parent host templates IDs that should be associated with this host template.\nThe order of the IDs determine the inheritance priority order.\n",
            "example": [
              3,
              12
            ]
          },
          "name": {
            "type": "string",
            "description": "Host template name",
            "example": "generic-active-host"
          },
          "alias": {
            "type": "string",
            "description": "Host template alias",
            "example": "generic-active-host"
          },
          "snmp_community": {
            "type": "string",
            "nullable": true,
            "description": "Community of the SNMP agent"
          },
          "snmp_version": {
            "type": "string",
            "nullable": true,
            "enum": [
              1,
              "2c",
              3
            ],
            "description": "Version of the SNMP agent.\n\nThe value can be `1`, `2c` or `3`\n",
            "example": "2c"
          },
          "timezone_id": {
            "type": "integer",
            "description": "Timezone ID",
            "example": 1,
            "nullable": true
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID",
            "example": 1,
            "nullable": true
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID. Must be of type 'Check'.",
            "example": 1,
            "nullable": true
          },
          "check_command_args": {
            "type": "array",
            "description": "Check command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Check command timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "max_check_attempts": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of times that the monitoring engine will retry the host check command if it returns any non-OK state"
          },
          "normal_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of 'time units' between regularly scheduled checks of the host.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether the active checks is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications for this host are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_options": {
            "type": "integer",
            "description": "Define the states of the host for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - DOWN\n* `2` - UNREACHABLE\n* `4` - RECOVERY\n* `8` - FLAPPING\n* `16` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent, the values used will be: DOWN, UNREACHABLE, RECOVERY, FLAPPING and DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options DOWN and RECOVERY\n",
            "example": 5,
            "nullable": true
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this host - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "add_inherited_contact_group": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "add_inherited_contact": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this host enters a non-UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a duration of acknowledgement for this host."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "freshness_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the freshness threshold (in seconds) for this host."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "low_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the low state change threshold used in flap detection for this host"
          },
          "high_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the high state change threshold used in flap detection for this host"
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID",
            "example": 1,
            "nullable": true
          },
          "event_handler_command_args": {
            "type": "array",
            "description": "Event handler command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "note_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more information about the host."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional note."
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host."
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the image ID that should be associated with this host template",
            "example": 1
          },
          "icon_alternative": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Define an optional string that is used as alternative description for the icon"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Host template comments"
          }
        }
      },
      "FindHostsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Host ID",
            "example": 1,
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Host name",
            "example": "Centreon-Server",
            "nullable": false
          },
          "alias": {
            "type": "string",
            "description": "Host alias",
            "example": "",
            "nullable": false
          },
          "address": {
            "type": "string",
            "description": "IP or domain of the host",
            "example": "127.0.0.1",
            "nullable": false
          },
          "monitoring_server": {
            "type": "object",
            "nullable": false,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Monitoring server ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Monitoring server name",
                "example": "Central"
              }
            }
          },
          "templates": {
            "type": "array",
            "description": "List of host templates associated with this host",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Host template ID",
                  "example": 2
                },
                "name": {
                  "type": "string",
                  "description": "Host template name",
                  "example": "generic-host"
                }
              }
            }
          },
          "normal_check_interval": {
            "type": "integer",
            "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n",
            "default": 5,
            "nullable": true
          },
          "retry_check_interval": {
            "type": "integer",
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n",
            "default": 1,
            "nullable": true
          },
          "notification_timeperiod": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Notification timeperiod ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Notification timeperiod name",
                "example": "24x7"
              }
            }
          },
          "check_timeperiod": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Check timeperiod ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Check timeperiod name",
                "example": "24x7"
              }
            }
          },
          "severity": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Severity ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Severity name",
                "example": "Priority 1"
              }
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Host category ID",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Host category name",
                  "example": "host-category-name"
                }
              }
            }
          },
          "groups": {
            "type": "array",
            "description": "Host groups associated with this host",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Host group ID",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Host group name",
                  "example": "host-group-name"
                }
              }
            }
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the host is activated or not",
            "nullable": false
          }
        }
      },
      "AddHostRequest": {
        "type": "object",
        "required": [
          "monitoring_server_id",
          "name",
          "address"
        ],
        "properties": {
          "monitoring_server_id": {
            "type": "integer",
            "description": "ID of the host's monitoring server",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Host template name",
            "example": "generic-active-host"
          },
          "address": {
            "type": "string",
            "description": "IP or domain of the host",
            "example": "127.0.0.1"
          },
          "alias": {
            "type": "string",
            "description": "Host template alias",
            "example": "generic-active-host"
          },
          "snmp_community": {
            "type": "string",
            "nullable": true,
            "description": "Community of the SNMP agent"
          },
          "snmp_version": {
            "type": "string",
            "nullable": true,
            "enum": [
              1,
              "2c",
              3
            ],
            "description": "Version of the SNMP agent.\n\nThe value can be `1`, `2c` or `3`\n",
            "example": "2c"
          },
          "geo_coords": {
            "type": "string",
            "nullable": true,
            "description": "Geographic coordinates of the host",
            "example": "48.10,12.5"
          },
          "timezone_id": {
            "type": "integer",
            "description": "Timezone ID",
            "example": 1,
            "nullable": true
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID",
            "example": 1,
            "nullable": true
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID. Must be of type 'Check'.",
            "example": 1,
            "nullable": true
          },
          "check_command_args": {
            "type": "array",
            "description": "Check command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Check command timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "max_check_attempts": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of times that the monitoring engine will retry the host check command if it returns any non-OK state"
          },
          "normal_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of 'time units' between regularly scheduled checks of the host.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications for this host are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_options": {
            "type": "integer",
            "description": "Define the states of the host for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - DOWN\n* `2` - UNREACHABLE\n* `4` - RECOVERY\n* `8` - FLAPPING\n* `16` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent, the values used will be: DOWN, UNREACHABLE, RECOVERY, FLAPPING and DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options DOWN and RECOVERY\n",
            "example": 5,
            "nullable": true
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about alerts for this host - only one alert notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "add_inherited_contact_group": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "add_inherited_contact": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first alert notification when this host enters a non-UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a duration of acknowledgement for this host."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "freshness_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the freshness threshold (in seconds) for this host."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "low_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the low state change threshold used in flap detection for this host"
          },
          "high_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the high state change threshold used in flap detection for this host"
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID",
            "example": 1,
            "nullable": true
          },
          "event_handler_command_args": {
            "type": "array",
            "description": "Event handler command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "note_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more information about the host."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional note."
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host."
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the ID of the image that should be associated with this host",
            "example": 1
          },
          "icon_alternative": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Define an optional string that is used as alternative description for the icon"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Host template comments"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the host template is activated or not"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the host category IDs that should be associated with this host",
            "example": [
              1,
              15,
              8
            ]
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the host group IDs that should be associated with this host",
            "example": [
              1,
              15,
              8
            ]
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Define the parent host template IDs that should be associated with this host.\nThe order of the IDs determines the inheritance priority order.\n",
            "example": [
              3,
              12
            ]
          },
          "macros": {
            "type": "array",
            "description": "Host macros defined for the host (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
            "items": {
              "type": "object",
              "required": [
                "name",
                "value",
                "is_password",
                "description"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the macro",
                  "example": "MacroName"
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "description": "Value of the macro.\n\nIf macro.is_password property is set to true and macro.value is set to null,\nthen the macro.value will be considered unchanged.\n",
                  "example": "macroValue"
                },
                "is_password": {
                  "type": "boolean",
                  "description": "Indicates whether the macro value is a password or not",
                  "example": false
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Macro description",
                  "example": "Some text to describe the macro"
                }
              }
            }
          }
        }
      },
      "AddHostResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Host template ID",
            "example": 1
          },
          "monitoring_server_id": {
            "type": "integer",
            "description": "ID of the host's monitoring server",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Host template name",
            "example": "generic-active-host"
          },
          "address": {
            "type": "string",
            "description": "IP or domain of the host",
            "example": "127.0.0.1"
          },
          "alias": {
            "type": "string",
            "description": "Host template alias",
            "example": "generic-active-host",
            "nullable": true
          },
          "snmp_version": {
            "type": "string",
            "nullable": true,
            "enum": [
              1,
              "2c",
              3
            ],
            "description": "Version of the SNMP agent.\n\nThe value can be `1`, `2c` or `3`\n",
            "example": "2c"
          },
          "geo_coords": {
            "type": "string",
            "description": "Geographic coordinates of the host",
            "example": "48.10,12.5",
            "nullable": true
          },
          "timezone_id": {
            "type": "integer",
            "description": "Timezone ID",
            "example": 1,
            "nullable": true
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID",
            "example": 1,
            "nullable": true
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID",
            "example": 1,
            "nullable": true
          },
          "check_command_args": {
            "type": "array",
            "description": "Check command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Check command timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "max_check_attempts": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of times that the monitoring engine will retry the host check command if it returns any non-UP state"
          },
          "normal_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of 'time units' between regularly scheduled checks of the host.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this host after a non-UP state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the host has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications for this host are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "notification_options": {
            "type": "integer",
            "description": "Define the states of the host for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - DOWN\n* `2` - UNREACHABLE\n* `4` - RECOVERY\n* `8` - FLAPPING\n* `16` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent, the values used will be: DOWN, UNREACHABLE, RECOVERY, FLAPPING and DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options DOWN and RECOVERY\n",
            "example": 5,
            "nullable": true
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this host is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this host - only one alert notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID",
            "example": 1,
            "nullable": true
          },
          "add_inherited_contact_group": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "add_inherited_contact": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first alert notification when this host enters a non-UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this host enters an UP state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "nullable": true,
            "description": "Specify a duration of acknowledgement for this host."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "freshness_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the freshness threshold (in seconds) for this host."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of his parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "low_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the low state change threshold used in flap detection for this host"
          },
          "high_flap_threshold": {
            "type": "integer",
            "nullable": true,
            "description": "Specify the high state change threshold used in flap detection for this host"
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n"
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID",
            "example": 1,
            "nullable": true
          },
          "event_handler_command_args": {
            "type": "array",
            "description": "Event handler command arguments",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "OK"
            ]
          },
          "note_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more information about the host."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional note."
          },
          "action_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Define an optional URL that can be used to provide more actions to be performed on the host."
          },
          "icon_id": {
            "type": "integer",
            "nullable": true,
            "description": "Define the ID of the image that should be associated with this host",
            "example": 1
          },
          "icon_alternative": {
            "type": "string",
            "nullable": true,
            "maxLength": 200,
            "description": "Define an optional string that is used as the alternative description for the icon"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Host template comments"
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the host template is activated or not"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Define a host category ID that is associated with this host",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Define a host category name that is associated with this host",
                  "example": "host-category-name"
                }
              }
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Define a host group ID that is associated with this host",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Define a host group name that is associated with this host",
                  "example": "host-group-name"
                }
              }
            }
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Define a parent host template ID that is associated with this host",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "Define a parent host template name that is associated with this host",
                  "example": "parent-template-name"
                }
              }
            }
          },
          "macros": {
            "type": "array",
            "description": "Host macros defined for the host.\nMacros inherited from parent templates or commands are not listed.\n",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the macro",
                  "example": "MacroName"
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "description": "Value of the macro.\n\nIf the macro.is_password property is set to true, macro.value will be set to null.\n",
                  "example": "macroValue"
                },
                "is_password": {
                  "type": "boolean",
                  "description": "Indicates whether the macro value is a password or not",
                  "example": false
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "Macro description",
                  "example": "Some text to describe the macro"
                }
              }
            }
          }
        }
      },
      "DeployServiceResponse": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Service ID.",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Service name.",
                "example": "generic-service"
              },
              "host_id": {
                "type": "integer",
                "description": "ID of the host linked to this service.",
                "example": 1
              },
              "geo_coords": {
                "type": "string",
                "description": "Geographic coordinates of the service",
                "example": "48.10,12.5"
              },
              "comment": {
                "type": "string",
                "description": "Service comment.",
                "nullable": true
              },
              "service_template_id": {
                "type": "integer",
                "description": "Template ID of the service template.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "check_command_id": {
                "type": "integer",
                "description": "Check command ID.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "check_command_args": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Arguments of the check command."
                },
                "example": [
                  "80",
                  "90"
                ]
              },
              "check_timeperiod_id": {
                "type": "integer",
                "description": "Time period ID of the check command.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "max_check_attempts": {
                "type": "integer",
                "description": "Define the number of times that the monitoring engine will retry the service check command if it returns any non-OK state.",
                "nullable": true
              },
              "normal_check_interval": {
                "type": "integer",
                "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n",
                "nullable": true
              },
              "retry_check_interval": {
                "type": "integer",
                "description": "Define the number of \"time units\" to wait before scheduling a re-check for this service after a non-OK state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the service has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n",
                "nullable": true
              },
              "active_check_enabled": {
                "type": "integer",
                "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "passive_check_enabled": {
                "type": "integer",
                "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "volatility_enabled": {
                "type": "integer",
                "description": "Indicates whether the service is \"volatile\" or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "notification_enabled": {
                "type": "integer",
                "description": "Specify whether notifications are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "is_contact_additive_inheritance": {
                "type": "boolean",
                "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
              },
              "is_contact_group_additive_inheritance": {
                "type": "boolean",
                "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
              },
              "notification_interval": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before re-notifying a contact that this service is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about alerts for this service - only one alert notification will be sent out.\n"
              },
              "notification_timeperiod_id": {
                "type": "integer",
                "description": "Notification timeperiod ID.",
                "minimum": 1,
                "nullable": true,
                "example": 1
              },
              "notification_type": {
                "type": "integer",
                "description": "Define the states of the service for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - WARNING\n* `2` - UNKNOWN\n* `4` - CRITICAL\n* `8` - RECOVERY\n* `16` - FLAPPING\n* `32` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent,\nthe value will be assumed to be: WARNING|UNKNOWN|CRITICAL|RECOVERY|FLAPPING|DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options WARNING and CRITICAL\n",
                "example": 5
              },
              "first_notification_delay": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this service enters a non-OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
              },
              "recovery_notification_delay": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this service enters an OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
              },
              "acknowledgement_timeout": {
                "type": "integer",
                "description": "Specify a duration of acknowledgement for this service.",
                "nullable": true
              },
              "freshness_checked": {
                "type": "integer",
                "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "freshness_threshold": {
                "type": "integer",
                "description": "Specify the freshness threshold (in seconds) for this service.",
                "nullable": true
              },
              "flap_detection_enabled": {
                "type": "integer",
                "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "low_flap_threshold": {
                "type": "integer",
                "description": "Specify the low state change threshold used in flap detection for this service.",
                "nullable": true
              },
              "high_flap_threshold": {
                "type": "integer",
                "description": "Specify the high state change threshold used in flap detection for this service.",
                "nullable": true
              },
              "event_handler_enabled": {
                "type": "integer",
                "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "event_handler_command_id": {
                "type": "integer",
                "description": "Event handler command ID.",
                "minimum": 1,
                "nullable": true,
                "example": 1
              },
              "event_handler_command_args": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Command arguments of the event handler."
                },
                "example": [
                  "80",
                  "90"
                ]
              },
              "graph_template_id": {
                "type": "integer",
                "description": "ID of the default graph template that will be used for this service.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "note": {
                "type": "string",
                "description": "Define an optional note.",
                "nullable": true,
                "maxLength": 65535
              },
              "note_url": {
                "type": "string",
                "description": "Define an optional URL that can be used to provide more information about the service.",
                "maxLength": 65535,
                "nullable": true
              },
              "action_url": {
                "type": "string",
                "description": "Define an optional URL that can be used to specify actions to be performed on the service.",
                "nullable": true,
                "maxLength": 65535
              },
              "icon_id": {
                "type": "integer",
                "description": "Define the image ID that should be associated with this service.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "icon_alternative": {
                "type": "string",
                "description": "Define an optional string that is used as an alternative description for the icon.",
                "nullable": true,
                "maxLength": 200
              },
              "severity_id": {
                "type": "integer",
                "description": "Severity ID.",
                "minimum": 1,
                "nullable": true
              },
              "is_activated": {
                "type": "boolean",
                "description": "Indicates whether the service is activated or not",
                "example": true
              }
            }
          }
        ]
      },
      "macro": {
        "type": "object",
        "required": [
          "name",
          "value",
          "is_password",
          "description"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the macro",
            "example": "MacroName"
          },
          "value": {
            "type": "string",
            "nullable": true,
            "description": "Value of the macro.\n\nIf the is_password property is set to true and value is set to null, then the value will be considered unchanged.\n",
            "example": "macroValue"
          },
          "is_password": {
            "type": "boolean",
            "description": "Indicates whether the macro value is a password or not",
            "example": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Macro description",
            "example": "Some text to describe the macro"
          }
        }
      },
      "NewServiceTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service template name.",
            "example": "generic-service"
          },
          "alias": {
            "type": "string",
            "description": "Service template alias.",
            "example": "generic-service"
          },
          "comment": {
            "type": "string",
            "description": "Service template comment.",
            "nullable": true
          },
          "service_template_id": {
            "type": "integer",
            "description": "Template ID of the service template.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "check_command_args": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Arguments of the check command."
            },
            "example": [
              "80",
              "90"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Time period ID of the check command.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "max_check_attempts": {
            "type": "integer",
            "description": "Define the number of times that the monitoring engine will retry the service check command if it returns any non-OK state.",
            "nullable": true
          },
          "normal_normal_check_interval": {
            "type": "integer",
            "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n",
            "nullable": true
          },
          "retry_check_interval": {
            "type": "integer",
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this service after a non-OK state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the service has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n",
            "nullable": true
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "volatility_enabled": {
            "type": "integer",
            "description": "Indicates whether the service is \"volatile\" or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "is_contact_additive_inheritance": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "is_contact_group_additive_inheritance": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this service is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this service - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID.",
            "minimum": 1,
            "nullable": true,
            "example": 1
          },
          "notification_type": {
            "type": "integer",
            "description": "Define the states of the service for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - WARNING\n* `2` - UNKNOWN\n* `4` - CRITICAL\n* `8` - RECOVERY\n* `16` - FLAPPING\n* `32` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent,\nthe value will be assumed to be: WARNING|UNKNOWN|CRITICAL|RECOVERY|FLAPPING|DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options WARNING and CRITICAL\n",
            "example": 5
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this service enters a non-OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this service enters an OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "description": "Specify a duration of acknowledgement for this service template.",
            "nullable": true
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "freshness_threshold": {
            "type": "integer",
            "description": "Specify the freshness threshold (in seconds) for this service.",
            "nullable": true
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "low_flap_threshold": {
            "type": "integer",
            "description": "Specify the low state change threshold used in flap detection for this service.",
            "nullable": true
          },
          "high_flap_threshold": {
            "type": "integer",
            "description": "Specify the high state change threshold used in flap detection for this service.",
            "nullable": true
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID.",
            "minimum": 1,
            "nullable": true,
            "example": 1
          },
          "event_handler_command_args": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Command arguments of the event handler."
            },
            "example": [
              "80",
              "90"
            ]
          },
          "graph_template_id": {
            "type": "integer",
            "description": "ID of the default graph template that will be used for this service.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "note": {
            "type": "string",
            "description": "Define an optional note.",
            "nullable": true,
            "maxLength": 65535
          },
          "note_url": {
            "type": "string",
            "description": "Define an optional URL that can be used to provide more information about the service.",
            "maxLength": 65535,
            "nullable": true
          },
          "action_url": {
            "type": "string",
            "description": "Define an optional URL that can be used to specify actions to be performed on the service.",
            "nullable": true,
            "maxLength": 65535
          },
          "icon_id": {
            "type": "integer",
            "description": "Define the image ID that should be associated with this service template.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "icon_alternative": {
            "type": "string",
            "description": "Define an optional string that is used as an alternative description for the icon.",
            "nullable": true,
            "maxLength": 200
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID.",
            "minimum": 1,
            "nullable": true
          },
          "host_templates": {
            "type": "array",
            "description": "IDs of host templates linked to this service template.",
            "items": {
              "type": "integer",
              "description": "Host template ID"
            },
            "example": [
              1,
              2
            ]
          },
          "service_categories": {
            "type": "array",
            "description": "IDs of service categories linked to this service template.",
            "items": {
              "type": "integer",
              "description": "Service category ID"
            },
            "example": [
              1,
              2
            ]
          },
          "service_groups": {
            "type": "array",
            "description": "Service group / host template associations to be linked to this service template.",
            "items": {
              "type": "object",
              "properties": {
                "service_group_id": {
                  "type": "integer",
                  "description": "Service group ID",
                  "example": 1
                },
                "host_template_id": {
                  "type": "integer",
                  "description": "Host template ID to be paired with the service template for the service group / template association.\nThe host template ID must be defined in the host_templates list.\n",
                  "example": 2
                }
              }
            }
          },
          "macros": {
            "type": "array",
            "description": "Macros defined for the service (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
            "items": {
              "$ref": "#/components/schemas/macro"
            }
          }
        }
      },
      "ServiceTemplate": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Service template ID.",
                "example": 1
              },
              "is_locked": {
                "type": "boolean",
                "description": "Indicates whether the configuration is locked for editing or not",
                "example": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/NewServiceTemplate"
          }
        ]
      },
      "AddServiceTemplateResponse": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Service template ID.",
                "example": 1
              },
              "is_locked": {
                "type": "boolean",
                "description": "Indicates whether the configuration is locked for editing or not",
                "example": true
              },
              "name": {
                "type": "string",
                "description": "Service template name.",
                "example": "generic-service"
              },
              "alias": {
                "type": "string",
                "description": "Service template alias.",
                "example": "generic-service"
              },
              "comment": {
                "type": "string",
                "description": "Service template comment.",
                "nullable": true
              },
              "service_template_id": {
                "type": "integer",
                "description": "Template ID of the service template.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "check_command_id": {
                "type": "integer",
                "description": "Check command ID.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "check_command_args": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Arguments of the check command."
                },
                "example": [
                  "80",
                  "90"
                ]
              },
              "check_timeperiod_id": {
                "type": "integer",
                "description": "Time period ID of the check command.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "max_check_attempts": {
                "type": "integer",
                "description": "Define the number of times that the monitoring engine will retry the service check command if it returns any non-OK state.",
                "nullable": true
              },
              "normal_check_interval": {
                "type": "integer",
                "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n",
                "nullable": true
              },
              "retry_check_interval": {
                "type": "integer",
                "description": "Define the number of \"time units\" to wait before scheduling a re-check for this service after a non-OK state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the service has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n",
                "nullable": true
              },
              "active_check_enabled": {
                "type": "integer",
                "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "passive_check_enabled": {
                "type": "integer",
                "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "volatility_enabled": {
                "type": "integer",
                "description": "Indicates whether the service is \"volatile\" or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "notification_enabled": {
                "type": "integer",
                "description": "Specify whether notifications are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "is_contact_additive_inheritance": {
                "type": "boolean",
                "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
              },
              "is_contact_group_additive_inheritance": {
                "type": "boolean",
                "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
              },
              "notification_interval": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before re-notifying a contact that this service is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about alerts for this service - only one alert notification will be sent out.\n"
              },
              "notification_timeperiod_id": {
                "type": "integer",
                "description": "Notification timeperiod ID.",
                "minimum": 1,
                "nullable": true,
                "example": 1
              },
              "notification_type": {
                "type": "integer",
                "description": "Define the states of the service for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - WARNING\n* `2` - UNKNOWN\n* `4` - CRITICAL\n* `8` - RECOVERY\n* `16` - FLAPPING\n* `32` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent,\nthe value will be assumed to be: WARNING|UNKNOWN|CRITICAL|RECOVERY|FLAPPING|DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options WARNING and CRITICAL\n",
                "example": 5
              },
              "first_notification_delay": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this service enters a non-OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
              },
              "recovery_notification_delay": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this service enters an OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
              },
              "acknowledgement_timeout": {
                "type": "integer",
                "description": "Specify a duration of acknowledgement for this service template.",
                "nullable": true
              },
              "freshness_checked": {
                "type": "integer",
                "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "freshness_threshold": {
                "type": "integer",
                "description": "Specify the freshness threshold (in seconds) for this service.",
                "nullable": true
              },
              "flap_detection_enabled": {
                "type": "integer",
                "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "low_flap_threshold": {
                "type": "integer",
                "description": "Specify the low state change threshold used in flap detection for this service.",
                "nullable": true
              },
              "high_flap_threshold": {
                "type": "integer",
                "description": "Specify the high state change threshold used in flap detection for this service.",
                "nullable": true
              },
              "event_handler_enabled": {
                "type": "integer",
                "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "event_handler_command_id": {
                "type": "integer",
                "description": "Event handler command ID.",
                "minimum": 1,
                "nullable": true,
                "example": 1
              },
              "event_handler_command_args": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Command arguments of the event handler."
                },
                "example": [
                  "80",
                  "90"
                ]
              },
              "graph_template_id": {
                "type": "integer",
                "description": "ID of the default graph template that will be used for this service.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "note": {
                "type": "string",
                "description": "Define an optional note.",
                "nullable": true,
                "maxLength": 65535
              },
              "note_url": {
                "type": "string",
                "description": "Define an optional URL that can be used to provide more information about the service.",
                "maxLength": 65535,
                "nullable": true
              },
              "action_url": {
                "type": "string",
                "description": "Define an optional URL that can be used to specify actions to be performed on the service.",
                "nullable": true,
                "maxLength": 65535
              },
              "icon_id": {
                "type": "integer",
                "description": "Define the image ID that should be associated with this service template.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "icon_alternative": {
                "type": "string",
                "description": "Define an optional string that is used as an alternative description for the icon.",
                "nullable": true,
                "maxLength": 200
              },
              "severity_id": {
                "type": "integer",
                "description": "Severity ID.",
                "minimum": 1,
                "nullable": true
              },
              "host_templates": {
                "type": "array",
                "description": "IDs of host templates linked to this service template.",
                "items": {
                  "type": "integer",
                  "description": "Host template ID"
                },
                "example": [
                  1,
                  2
                ]
              },
              "categories": {
                "type": "array",
                "description": "Service categories associated with this service template",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Define a service category ID that is associated with this service template",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "Define a service category name that is associated with this service template",
                      "example": "service-category-name"
                    }
                  }
                }
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Service groups associated with this service template",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Define a service group ID that is associated with this service template",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "Define a service group name that is associated with this service template",
                      "example": "host-group-name"
                    },
                    "host_template_id": {
                      "type": "integer",
                      "description": "Define a host template ID that is associated with this service group for this service template",
                      "example": 1
                    },
                    "host_template_name": {
                      "type": "string",
                      "description": "Define a host template name that is associated with this service group for this service template",
                      "example": "host-template-name"
                    }
                  }
                }
              },
              "macros": {
                "type": "array",
                "description": "Macros defined for the service (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
                "items": {
                  "$ref": "#/components/schemas/macro"
                }
              }
            }
          }
        ]
      },
      "PartialUpdateServiceTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service template name.",
            "example": "generic-service"
          },
          "alias": {
            "type": "string",
            "description": "Service template alias.",
            "example": "generic-service"
          },
          "comment": {
            "type": "string",
            "description": "Service template comment.",
            "nullable": true
          },
          "service_template_id": {
            "type": "integer",
            "description": "Template ID of the service template.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "check_command_args": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Arguments of the check command."
            },
            "example": [
              "80",
              "90"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Time period ID of the check command.",
            "minimum": 1,
            "example": 1
          },
          "max_check_attempts": {
            "type": "integer",
            "description": "Define the number of times that the monitoring engine will retry the service check command if it returns any non-OK state."
          },
          "normal_check_interval": {
            "type": "integer",
            "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "retry_check_interval": {
            "type": "integer",
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this service after a non-OK state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the service has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n"
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "volatility_enabled": {
            "type": "integer",
            "description": "Indicates whether the service is \"volatile\" or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "is_contact_additive_inheritance": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "is_contact_group_additive_inheritance": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this service is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this service - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID.",
            "minimum": 1,
            "example": 1
          },
          "notification_type": {
            "type": "integer",
            "description": "Define the states of the service for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - WARNING\n* `2` - UNKNOWN\n* `4` - CRITICAL\n* `8` - RECOVERY\n* `16` - FLAPPING\n* `32` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent,\nthe value will be assumed to be: WARNING|UNKNOWN|CRITICAL|RECOVERY|FLAPPING|DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options WARNING and CRITICAL\n",
            "example": 5
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this service enters a non-OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this service enters an OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "description": "Specify a duration of acknowledgement for this service template."
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "freshness_threshold": {
            "type": "integer",
            "description": "Specify the freshness threshold (in seconds) for this service."
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "low_flap_threshold": {
            "type": "integer",
            "description": "Specify the low state change threshold used in flap detection for this service."
          },
          "high_flap_threshold": {
            "type": "integer",
            "description": "Specify the high state change threshold used in flap detection for this service."
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "event_handler_command_args": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Command arguments of the event handler."
            },
            "example": [
              "80",
              "90"
            ]
          },
          "graph_template_id": {
            "type": "integer",
            "description": "ID of the default graph template that will be used for this service.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "note": {
            "type": "string",
            "description": "Define an optional note.",
            "nullable": true,
            "maxLength": 65535
          },
          "note_url": {
            "type": "string",
            "description": "Define an optional URL that can be used to provide more information about the service.",
            "maxLength": 65535,
            "nullable": true
          },
          "action_url": {
            "type": "string",
            "description": "Define an optional URL that can be used to specify actions to be performed on the service.",
            "nullable": true,
            "maxLength": 65535
          },
          "icon_id": {
            "type": "integer",
            "description": "Define the image ID that should be associated with this service template.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "icon_alternative": {
            "type": "string",
            "description": "Define an optional string that is used as an alternative description for the icon.",
            "nullable": true,
            "maxLength": 200
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID.",
            "minimum": 1,
            "nullable": true
          },
          "host_templates": {
            "type": "array",
            "description": "IDs of host templates linked to this service template.",
            "items": {
              "type": "integer",
              "description": "Host template ID"
            },
            "example": [
              1,
              2
            ]
          },
          "service_categories": {
            "type": "array",
            "description": "IDs of service categories linked to this service template.",
            "items": {
              "type": "integer",
              "description": "Service category ID"
            },
            "example": [
              1,
              2
            ]
          },
          "macros": {
            "type": "array",
            "description": "Macros defined for the service (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
            "items": {
              "$ref": "#/components/schemas/macro"
            }
          },
          "service_groups": {
            "type": "array",
            "description": "Service group / host template associations to be linked to this service template.",
            "items": {
              "type": "object",
              "properties": {
                "service_group_id": {
                  "type": "integer",
                  "description": "Service group ID",
                  "example": 1
                },
                "host_template_id": {
                  "type": "integer",
                  "description": "Host template ID to be paired with the service template for the service group / template association.\nThe host template ID must be defined in the host_templates list.\n",
                  "example": 2
                }
              }
            }
          }
        }
      },
      "PartialUpdateServiceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service name.",
            "example": "generic-service"
          },
          "host_id": {
            "type": "integer",
            "description": "ID of the host linked to this service.",
            "example": 1
          },
          "geo_coords": {
            "type": "string",
            "nullable": true,
            "description": "Geographic coordinates of the service",
            "example": "48.10,12.5"
          },
          "comment": {
            "type": "string",
            "description": "Service comment.",
            "nullable": true
          },
          "service_template_id": {
            "type": "integer",
            "description": "Template ID of the service template.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "check_command_args": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Arguments of the check command."
            },
            "example": [
              "80",
              "90"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Time period ID of the check command.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "max_check_attempts": {
            "type": "integer",
            "description": "Define the number of times that the monitoring engine will retry the service check command if it returns any non-OK state.",
            "nullable": true
          },
          "normal_check_interval": {
            "type": "integer",
            "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n",
            "nullable": true
          },
          "retry_check_interval": {
            "type": "integer",
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this service after a non-OK state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the service has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n",
            "nullable": true
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "volatility_enabled": {
            "type": "integer",
            "description": "Indicates whether the service is \"volatile\" or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "is_contact_additive_inheritance": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "is_contact_group_additive_inheritance": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this service is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this service - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID.",
            "minimum": 1,
            "nullable": true,
            "example": 1
          },
          "notification_type": {
            "type": "integer",
            "description": "Define the states of the service for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - WARNING\n* `2` - UNKNOWN\n* `4` - CRITICAL\n* `8` - RECOVERY\n* `16` - FLAPPING\n* `32` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent,\nthe value will be assumed to be: WARNING|UNKNOWN|CRITICAL|RECOVERY|FLAPPING|DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options WARNING and CRITICAL\n",
            "example": 5
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this service enters a non-OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this service enters an OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "description": "Specify a duration of acknowledgement for this service.",
            "nullable": true
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "freshness_threshold": {
            "type": "integer",
            "description": "Specify the freshness threshold (in seconds) for this service.",
            "nullable": true
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "low_flap_threshold": {
            "type": "integer",
            "description": "Specify the low state change threshold used in flap detection for this service.",
            "nullable": true
          },
          "high_flap_threshold": {
            "type": "integer",
            "description": "Specify the high state change threshold used in flap detection for this service.",
            "nullable": true
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID.",
            "minimum": 1,
            "nullable": true,
            "example": 1
          },
          "event_handler_command_args": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Command arguments of the event handler."
            },
            "example": [
              "80",
              "90"
            ]
          },
          "graph_template_id": {
            "type": "integer",
            "description": "ID of the default graph template that will be used for this service.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "note": {
            "type": "string",
            "description": "Define an optional note.",
            "nullable": true,
            "maxLength": 65535
          },
          "note_url": {
            "type": "string",
            "description": "Define an optional URL that can be used to provide more information about the service.",
            "maxLength": 65535,
            "nullable": true
          },
          "action_url": {
            "type": "string",
            "description": "Define an optional URL that can be used to specify actions to be performed on the service.",
            "nullable": true,
            "maxLength": 65535
          },
          "icon_id": {
            "type": "integer",
            "description": "Define the image ID that should be associated with this service.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "icon_alternative": {
            "type": "string",
            "description": "Define an optional string that is used as an alternative description for the icon.",
            "nullable": true,
            "maxLength": 200
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID.",
            "minimum": 1,
            "nullable": true
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the service is activated or not",
            "example": true
          },
          "service_categories": {
            "type": "array",
            "description": "IDs of service categories linked to this service.",
            "items": {
              "type": "integer",
              "description": "Service category ID"
            },
            "example": [
              1,
              2
            ]
          },
          "service_groups": {
            "type": "array",
            "description": "IDs of service groups linked to this service.",
            "items": {
              "type": "integer",
              "description": "Service group ID"
            },
            "example": [
              1,
              2
            ]
          },
          "macros": {
            "type": "array",
            "description": "Macros defined for the service (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
            "items": {
              "$ref": "#/components/schemas/macro"
            }
          }
        }
      },
      "simpleEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 12
          },
          "name": {
            "type": "string",
            "example": "entity-name"
          }
        }
      },
      "FindServicesResponse": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Service ID.",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Service name.",
                "example": "generic-service"
              },
              "hosts": {
                "type": "array",
                "description": "Hosts linked to this service.",
                "items": {
                  "$ref": "#/components/schemas/simpleEntity"
                }
              },
              "service_template": {
                "description": "Service template linked to this service.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/simpleEntity"
                  }
                ]
              },
              "check_timeperiod": {
                "description": "Time period of the check command.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/simpleEntity"
                  }
                ]
              },
              "notification_timeperiod": {
                "description": "Time period of the notification command.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/simpleEntity"
                  }
                ]
              },
              "severity": {
                "description": "Severity linked to this service.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/simpleEntity"
                  }
                ]
              },
              "categories": {
                "type": "array",
                "description": "Service categories associated with this service.",
                "items": {
                  "$ref": "#/components/schemas/simpleEntity"
                }
              },
              "groups": {
                "type": "array",
                "description": "Service groups associated with this service.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 12
                    },
                    "name": {
                      "type": "string",
                      "example": "sg-name"
                    },
                    "host_id": {
                      "type": "integer",
                      "example": 12
                    },
                    "host_name": {
                      "type": "string",
                      "example": "host-name"
                    }
                  }
                }
              },
              "normal_check_interval": {
                "type": "integer",
                "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n",
                "nullable": true
              },
              "retry_check_interval": {
                "type": "integer",
                "description": "Define the number of \"time units\" to wait before scheduling a re-check for this service after a non-OK state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the service has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n",
                "nullable": true
              },
              "is_activated": {
                "type": "boolean",
                "description": "Indicates whether the service is activated or not",
                "example": true
              }
            }
          }
        ]
      },
      "AddServiceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service name.",
            "example": "generic-service"
          },
          "host_id": {
            "type": "integer",
            "description": "ID of the host linked to this service.",
            "example": 1
          },
          "geo_coords": {
            "type": "string",
            "nullable": true,
            "description": "Geographic coordinates of the service",
            "example": "48.10,12.5"
          },
          "comment": {
            "type": "string",
            "description": "Service comment.",
            "nullable": true
          },
          "service_template_id": {
            "type": "integer",
            "description": "Template ID of the service template.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "check_command_id": {
            "type": "integer",
            "description": "Check command ID.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "check_command_args": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Arguments of the check command."
            },
            "example": [
              "80",
              "90"
            ]
          },
          "check_timeperiod_id": {
            "type": "integer",
            "description": "Time period ID of the check command.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "max_check_attempts": {
            "type": "integer",
            "description": "Define the number of times that the monitoring engine will retry the service check command if it returns any non-OK state.",
            "nullable": true
          },
          "normal_check_interval": {
            "type": "integer",
            "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n",
            "nullable": true
          },
          "retry_check_interval": {
            "type": "integer",
            "description": "Define the number of \"time units\" to wait before scheduling a re-check for this service after a non-OK state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the service has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n",
            "nullable": true
          },
          "active_check_enabled": {
            "type": "integer",
            "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "passive_check_enabled": {
            "type": "integer",
            "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "volatility_enabled": {
            "type": "integer",
            "description": "Indicates whether the service is \"volatile\" or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "notification_enabled": {
            "type": "integer",
            "description": "Specify whether notifications are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "is_contact_additive_inheritance": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "is_contact_group_additive_inheritance": {
            "type": "boolean",
            "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
          },
          "notification_interval": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before re-notifying a contact that this service is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about problems for this service - only one problem notification will be sent out.\n"
          },
          "notification_timeperiod_id": {
            "type": "integer",
            "description": "Notification timeperiod ID.",
            "minimum": 1,
            "nullable": true,
            "example": 1
          },
          "notification_type": {
            "type": "integer",
            "description": "Define the states of the service for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - WARNING\n* `2` - UNKNOWN\n* `4` - CRITICAL\n* `8` - RECOVERY\n* `16` - FLAPPING\n* `32` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent,\nthe value will be assumed to be: WARNING|UNKNOWN|CRITICAL|RECOVERY|FLAPPING|DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options WARNING and CRITICAL\n",
            "example": 5
          },
          "first_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this service enters a non-OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "recovery_notification_delay": {
            "type": "integer",
            "nullable": true,
            "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this service enters an OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "description": "Specify a duration of acknowledgement for this service.",
            "nullable": true
          },
          "freshness_checked": {
            "type": "integer",
            "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "freshness_threshold": {
            "type": "integer",
            "description": "Specify the freshness threshold (in seconds) for this service.",
            "nullable": true
          },
          "flap_detection_enabled": {
            "type": "integer",
            "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "low_flap_threshold": {
            "type": "integer",
            "description": "Specify the low state change threshold used in flap detection for this service.",
            "nullable": true
          },
          "high_flap_threshold": {
            "type": "integer",
            "description": "Specify the high state change threshold used in flap detection for this service.",
            "nullable": true
          },
          "event_handler_enabled": {
            "type": "integer",
            "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
            "example": 2
          },
          "event_handler_command_id": {
            "type": "integer",
            "description": "Event handler command ID.",
            "minimum": 1,
            "nullable": true,
            "example": 1
          },
          "event_handler_command_args": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Command arguments of the event handler."
            },
            "example": [
              "80",
              "90"
            ]
          },
          "graph_template_id": {
            "type": "integer",
            "description": "ID of the default graph template that will be used for this service.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "note": {
            "type": "string",
            "description": "Define an optional note.",
            "nullable": true,
            "maxLength": 65535
          },
          "note_url": {
            "type": "string",
            "description": "Define an optional URL that can be used to provide more information about the service.",
            "maxLength": 65535,
            "nullable": true
          },
          "action_url": {
            "type": "string",
            "description": "Define an optional URL that can be used to specify actions to be performed on the service.",
            "nullable": true,
            "maxLength": 65535
          },
          "icon_id": {
            "type": "integer",
            "description": "Define the image ID that should be associated with this service.",
            "minimum": 1,
            "nullable": true,
            "example": null
          },
          "icon_alternative": {
            "type": "string",
            "description": "Define an optional string that is used as an alternative description for the icon.",
            "nullable": true,
            "maxLength": 200
          },
          "severity_id": {
            "type": "integer",
            "description": "Severity ID.",
            "minimum": 1,
            "nullable": true
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether the service is activated or not",
            "example": true
          },
          "service_categories": {
            "type": "array",
            "description": "IDs of service categories linked to this service.",
            "items": {
              "type": "integer",
              "description": "Service category ID"
            },
            "example": [
              1,
              2
            ]
          },
          "service_groups": {
            "type": "array",
            "description": "IDs of service groups linked to this service.",
            "items": {
              "type": "integer",
              "description": "Service group ID"
            },
            "example": [
              1,
              2
            ]
          },
          "macros": {
            "type": "array",
            "description": "Macros defined for the service (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
            "items": {
              "$ref": "#/components/schemas/macro"
            }
          }
        }
      },
      "AddServiceResponse": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Service ID.",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Service name.",
                "example": "generic-service"
              },
              "host_id": {
                "type": "integer",
                "description": "ID of the host linked to this service.",
                "example": 1
              },
              "geo_coords": {
                "type": "string",
                "description": "Geographic coordinates of the service",
                "example": "48.10,12.5"
              },
              "comment": {
                "type": "string",
                "description": "Service comment.",
                "nullable": true
              },
              "service_template_id": {
                "type": "integer",
                "description": "Template ID of the service template.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "check_command_id": {
                "type": "integer",
                "description": "Check command ID.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "check_command_args": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Arguments of the check command."
                },
                "example": [
                  "80",
                  "90"
                ]
              },
              "check_timeperiod_id": {
                "type": "integer",
                "description": "Time period ID of the check command.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "max_check_attempts": {
                "type": "integer",
                "description": "Define the number of times that the monitoring engine will retry the service check command if it returns any non-OK state.",
                "nullable": true
              },
              "normal_check_interval": {
                "type": "integer",
                "description": "Define the number of 'time units' between regularly scheduled checks of the service.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n",
                "nullable": true
              },
              "retry_check_interval": {
                "type": "integer",
                "description": "Define the number of \"time units\" to wait before scheduling a re-check for this service after a non-OK state was detected.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nOnce the service has been retried max_check_attempts times without a change in its status,\nit will revert to being scheduled at its \"normal\" check interval rate.\n",
                "nullable": true
              },
              "active_check_enabled": {
                "type": "integer",
                "description": "Indicates whether active checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "passive_check_enabled": {
                "type": "integer",
                "description": "Indicates whether passive checks are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "volatility_enabled": {
                "type": "integer",
                "description": "Indicates whether the service is \"volatile\" or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "notification_enabled": {
                "type": "integer",
                "description": "Specify whether notifications are enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "is_contact_additive_inheritance": {
                "type": "boolean",
                "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contactgroup definition will not override the definitions on template levels, it will be appended instead.\n"
              },
              "is_contact_group_additive_inheritance": {
                "type": "boolean",
                "description": "Only used when notification inheritance for hosts and services is set to vertical inheritance only.\n\nWhen enabled, the contact definition will not override the definitions on template levels, it will be appended instead.\n"
              },
              "notification_interval": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before re-notifying a contact that this service is still down or unreachable.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n\nA value of 0 disables re-notifications of contacts about alerts for this service - only one alert notification will be sent out.\n"
              },
              "notification_timeperiod_id": {
                "type": "integer",
                "description": "Notification timeperiod ID.",
                "minimum": 1,
                "nullable": true,
                "example": 1
              },
              "notification_type": {
                "type": "integer",
                "description": "Define the states of the service for which notifications should be sent out.\n\nThe value is the sum of all the values of the selected options.\n\n* `0` - NONE\n* `1` - WARNING\n* `2` - UNKNOWN\n* `4` - CRITICAL\n* `8` - RECOVERY\n* `16` - FLAPPING\n* `32` - DOWNTIME_SCHEDULED\n* NULL - (inheritance of its parent's value. If there is no parent,\nthe value will be assumed to be: WARNING|UNKNOWN|CRITICAL|RECOVERY|FLAPPING|DOWNTIME_SCHEDULED)\n\nexample: A value equal to 5 corresponds to the selected options WARNING and CRITICAL\n",
                "example": 5
              },
              "first_notification_delay": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before sending out the first problem notification when this service enters a non-OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
              },
              "recovery_notification_delay": {
                "type": "integer",
                "nullable": true,
                "description": "Define the number of \"time units\" to wait before sending out the recovery notification when this service enters an OK state.\n\nWith the default time unit of 60s, this number will mean multiples of 1 minute.\n"
              },
              "acknowledgement_timeout": {
                "type": "integer",
                "description": "Specify a duration of acknowledgement for this service.",
                "nullable": true
              },
              "freshness_checked": {
                "type": "integer",
                "description": "Indicates whether freshness is checked or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "freshness_threshold": {
                "type": "integer",
                "description": "Specify the freshness threshold (in seconds) for this service.",
                "nullable": true
              },
              "flap_detection_enabled": {
                "type": "integer",
                "description": "Indicates whether the flap detection is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "low_flap_threshold": {
                "type": "integer",
                "description": "Specify the low state change threshold used in flap detection for this service.",
                "nullable": true
              },
              "high_flap_threshold": {
                "type": "integer",
                "description": "Specify the high state change threshold used in flap detection for this service.",
                "nullable": true
              },
              "event_handler_enabled": {
                "type": "integer",
                "description": "Indicates whether the event handler is enabled or not\n\n* `0` - STATUS_DISABLED\n* `1` - STATUS_ENABLED\n* `2` - STATUS_DEFAULT (inheritance of its parent's value. If there is no parent, the values used will be that of Centreon Engine)\n",
                "example": 2
              },
              "event_handler_command_id": {
                "type": "integer",
                "description": "Event handler command ID.",
                "minimum": 1,
                "nullable": true,
                "example": 1
              },
              "event_handler_command_args": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Command arguments of the event handler."
                },
                "example": [
                  "80",
                  "90"
                ]
              },
              "graph_template_id": {
                "type": "integer",
                "description": "ID of the default graph template that will be used for this service.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "note": {
                "type": "string",
                "description": "Define an optional note.",
                "nullable": true,
                "maxLength": 65535
              },
              "note_url": {
                "type": "string",
                "description": "Define an optional URL that can be used to provide more information about the service.",
                "maxLength": 65535,
                "nullable": true
              },
              "action_url": {
                "type": "string",
                "description": "Define an optional URL that can be used to specify actions to be performed on the service.",
                "nullable": true,
                "maxLength": 65535
              },
              "icon_id": {
                "type": "integer",
                "description": "Define the image ID that should be associated with this service.",
                "minimum": 1,
                "nullable": true,
                "example": null
              },
              "icon_alternative": {
                "type": "string",
                "description": "Define an optional string that is used as an alternative description for the icon.",
                "nullable": true,
                "maxLength": 200
              },
              "severity_id": {
                "type": "integer",
                "description": "Severity ID.",
                "minimum": 1,
                "nullable": true
              },
              "is_activated": {
                "type": "boolean",
                "description": "Indicates whether the service is activated or not",
                "example": true
              },
              "categories": {
                "type": "array",
                "description": "Service categories associated with this service",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Define a service category ID that is associated with this service",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "Define a service category name that is associated with this service",
                      "example": "service-category-name"
                    }
                  }
                }
              },
              "groups": {
                "type": "array",
                "description": "Service groups associated with this service",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Define a service group ID that is associated with this service",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "Define a service group name that is associated with this service",
                      "example": "service-group-name"
                    }
                  }
                }
              },
              "macros": {
                "type": "array",
                "description": "Macros defined for the service (directly or through a template or command inheritance)\n\nIf multiple macros are defined with the same name, only the last one will be saved.\n",
                "items": {
                  "$ref": "#/components/schemas/macro"
                }
              }
            }
          }
        ]
      },
      "SeverityResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Service severity ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Service severity name",
            "example": "service-severity"
          },
          "alias": {
            "type": "string",
            "description": "Service severity alias",
            "example": "service-severity"
          },
          "level": {
            "type": "integer",
            "description": "Service severity priority",
            "example": 2
          },
          "icon_id": {
            "type": "integer",
            "description": "Define the image ID associated with this severity",
            "example": 1
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether this service severity is enabled or not"
          }
        }
      },
      "SeverityRequest": {
        "type": "object",
        "required": [
          "name",
          "alias",
          "level",
          "icon_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Service severity name",
            "example": "service-severity"
          },
          "alias": {
            "type": "string",
            "description": "Service severity alias",
            "example": "service-severity"
          },
          "level": {
            "type": "integer",
            "description": "Service severity priority",
            "example": 2
          },
          "icon_id": {
            "type": "integer",
            "description": "Define the image ID associated with this severity",
            "example": 1
          },
          "is_activated": {
            "type": "boolean",
            "description": "Indicates whether this service severity is enabled or not"
          }
        }
      },
      "FindMediasResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Media ID",
            "example": 1,
            "nullable": false
          },
          "filaname": {
            "type": "string",
            "description": "Media filename",
            "example": "logo.png",
            "nullable": false
          },
          "directory": {
            "type": "string",
            "description": "Media directory",
            "example": "logos",
            "nullable": false
          }
        }
      },
      "AddMediaRequest": {
        "type": "object",
        "required": [
          "directory",
          "data"
        ],
        "properties": {
          "directory": {
            "type": "string",
            "nullable": false,
            "description": "Directory where the file will be created"
          },
          "data": {
            "type": "string",
            "format": "binary",
            "nullable": false,
            "description": "File content"
          }
        }
      },
      "AddMediaResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "nullable": true,
                  "example": 1
                },
                "filename": {
                  "type": "string",
                  "nullable": false,
                  "example": "centreon_logo.jpg"
                },
                "directory": {
                  "type": "string",
                  "nullable": false,
                  "example": "logos"
                },
                "md5": {
                  "type": "string",
                  "nullable": false,
                  "example": "f7d5fc06a33946703054046c7174bbf4"
                }
              }
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "filename": {
                  "type": "string",
                  "description": "file name of the media",
                  "example": "old_logo.jpg",
                  "nullable": false
                },
                "directory": {
                  "type": "string",
                  "description": "Destination directory",
                  "example": "logos",
                  "nullable": false
                },
                "reason": {
                  "type": "string",
                  "description": "Reason for error",
                  "example": "Media already exists",
                  "nullable": false
                }
              }
            }
          }
        }
      },
      "UpdateMediaRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "string",
            "format": "binary",
            "nullable": false,
            "description": "File content"
          }
        }
      },
      "UpdateMediaResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true,
            "example": 1
          },
          "filename": {
            "type": "string",
            "nullable": false,
            "example": "centreon_logo.jpg"
          },
          "directory": {
            "type": "string",
            "nullable": false,
            "example": "logos"
          },
          "md5": {
            "type": "string",
            "nullable": false,
            "example": "f7d5fc06a33946703054046c7174bbf4"
          }
        }
      },
      "NotificationPolicy": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name",
                "alias",
                "email",
                "notifications",
                "configuration_uri"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Id of the contact",
                  "example": 14
                },
                "name": {
                  "type": "string",
                  "description": "Name of the contact",
                  "example": "contact 1"
                },
                "alias": {
                  "type": "string",
                  "description": "Alias of the contact",
                  "example": "contact1"
                },
                "email": {
                  "type": "string",
                  "description": "Email of the contact",
                  "example": "contact1@localhost"
                },
                "notifications": {
                  "type": "object",
                  "description": "Notification settings of the contact",
                  "required": [
                    "host",
                    "service"
                  ],
                  "properties": {
                    "host": {
                      "type": "object",
                      "required": [
                        "events",
                        "time_period"
                      ],
                      "properties": {
                        "events": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "UP",
                              "DOWN",
                              "UNREACHABLE",
                              "PENDING"
                            ]
                          },
                          "example": [
                            "UP",
                            "DOWN"
                          ]
                        },
                        "time_period": {
                          "type": "object",
                          "required": [
                            "id",
                            "name",
                            "alias"
                          ],
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Id of the contact",
                              "example": 14
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the time period",
                              "example": "24/7"
                            },
                            "alias": {
                              "type": "string",
                              "description": "Alias of the time period",
                              "example": "24/24 7/7"
                            }
                          }
                        }
                      }
                    },
                    "service": {
                      "type": "object",
                      "required": [
                        "events",
                        "time_period"
                      ],
                      "properties": {
                        "events": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "OK",
                              "WARNING",
                              "CRITICAL",
                              "UNKNOWN",
                              "PENDING"
                            ]
                          },
                          "example": [
                            "OK",
                            "CRITICAL"
                          ]
                        },
                        "time_period": {
                          "type": "object",
                          "required": [
                            "id",
                            "name",
                            "alias"
                          ],
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Id of the contact",
                              "example": 14
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the time period",
                              "example": "24/7"
                            },
                            "alias": {
                              "type": "string",
                              "description": "Alias of the time period",
                              "example": "24/24 7/7"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "configuration_uri": {
                  "type": "string",
                  "description": "uri to configure the contact",
                  "example": "/centreon/main.php?p=60301&o=c&contact_id=14"
                }
              }
            }
          }
        }
      },
      "Day": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "description": "Number of the day (1=monday)",
            "example": 1,
            "minimum": 1,
            "maximum": 7
          },
          "time_range": {
            "type": "string",
            "description": "Time range for the day",
            "example": "00:00-06:00,07:00-08:00"
          }
        }
      },
      "ExtraTimePeriod": {
        "type": "object",
        "properties": {
          "day_range": {
            "type": "string",
            "description": "Directives, including weekdays, days of the month, and calendar dates\n\n* Calendar date (2008-01-01)\n* Specific month date (January 1st)\n* Generic month date (Day 15)\n* Offset weekday of specific month (2nd Tuesday in December)\n* Offset weekday (3rd Monday)\n* Normal weekday (Tuesday)\n",
            "example": "monday 1"
          },
          "time_range": {
            "type": "string",
            "description": "Time range for the day",
            "example": "00:00-06:00,07:00-08:00"
          }
        }
      },
      "FindTimePeriodResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Time period ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the time period",
            "example": "24x7"
          },
          "alias": {
            "type": "string",
            "description": "Alias of the time period",
            "example": "Always"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Day"
            }
          },
          "templates": {
            "type": "array",
            "description": "IDs of the time periods used as a template",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of the time periods used as a template",
                  "example": 1
                },
                "alias": {
                  "type": "string",
                  "description": "Alias of the time period",
                  "example": "Always"
                }
              }
            }
          },
          "exceptions": {
            "type": "array",
            "description": "List of exceptions to the standard schedule",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID of the extra period.",
                      "example": 1
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/ExtraTimePeriod"
                }
              ]
            }
          }
        }
      },
      "AddTimePeriodRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Time period name.",
            "example": "24x7"
          },
          "alias": {
            "type": "string",
            "description": "Time period alias.",
            "example": "Always"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Day"
            }
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Template ID.",
              "example": 1
            }
          },
          "exceptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtraTimePeriod"
            }
          }
        }
      },
      "User.Listing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe"
          },
          "alias": {
            "type": "string",
            "description": "User alias / login",
            "example": "admin"
          },
          "email": {
            "type": "string",
            "description": "email address",
            "example": "root@localhost"
          },
          "is_admin": {
            "type": "boolean",
            "description": "is admin or not",
            "example": true
          }
        }
      },
      "CurrentParameters.Get": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Contact ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the current user",
            "example": "Administrator"
          },
          "alias": {
            "type": "string",
            "description": "Alias of the current user",
            "example": "admin"
          },
          "email": {
            "type": "string",
            "description": "Email of the current user",
            "example": "admin@localhost"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone for the current user",
            "example": "Europe/Paris"
          },
          "locale": {
            "type": "string",
            "nullable": true,
            "description": "Locale of the current user",
            "example": "en_US"
          },
          "is_admin": {
            "type": "boolean",
            "description": "If the current user is an administrator",
            "example": true
          },
          "can_manage_api_tokens": {
            "type": "boolean",
            "description": "If the current user has ACL action \"Manage API Tokens\"",
            "example": true
          },
          "use_deprecated_pages": {
            "type": "boolean",
            "description": "Indicates if user wants to use deprecated monitoring pages",
            "example": false
          },
          "theme": {
            "type": "string",
            "description": "Selected theme of the current user",
            "example": "light"
          },
          "user_interface_density": {
            "type": "string",
            "description": "Selected user interface density for the current user",
            "example": "extended",
            "default": "compact"
          },
          "default_page": {
            "type": "string",
            "nullable": true,
            "description": "Default page for the current user",
            "example": "/main.php?p=60901"
          },
          "dashboard": {
            "type": "object",
            "nullable": true,
            "properties": {
              "global_user_role": {
                "type": "string",
                "enum": [
                  "viewer",
                  "creator",
                  "administrator"
                ],
                "description": "The current user role as a string."
              },
              "view_dashboards": {
                "type": "boolean",
                "description": "The current user has the Viewer role"
              },
              "create_dashboards": {
                "type": "boolean",
                "description": "The current user has the Creator role"
              },
              "administrate_dashboards": {
                "type": "boolean",
                "description": "The current user has the Administrator role"
              }
            }
          }
        }
      },
      "CurrentParameters.Patch": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "description": "Theme",
            "enum": [
              "light",
              "dark"
            ],
            "example": "light"
          },
          "user_interface_density": {
            "type": "string",
            "description": "User interface view mode",
            "enum": [
              "compact",
              "extended"
            ],
            "example": "extended"
          }
        }
      },
      "FindContactGroupsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Contact group ID",
            "example": 1,
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Contact group name",
            "example": "Contact group",
            "nullable": false
          },
          "alias": {
            "type": "string",
            "description": "Contact group alias",
            "example": "Contact group alias",
            "nullable": false
          },
          "comments": {
            "type": "string",
            "description": "Contact group comments",
            "example": "Contact group comments",
            "nullable": false
          },
          "type": {
            "type": "string",
            "description": "Contact group types",
            "enum": [
              "local",
              "ldap"
            ],
            "example": "local",
            "nullable": false
          },
          "is_activated": {
            "type": "boolean",
            "description": "Contact group activation status",
            "example": true
          }
        }
      },
      "DashboardPanel.WithoutId": {
        "type": "object",
        "required": [
          "name",
          "layout",
          "widget_type",
          "widget_settings"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Dashboard panel name",
            "example": "my panel"
          },
          "layout": {
            "type": "object",
            "required": [
              "x",
              "y",
              "width",
              "height",
              "min_width",
              "min_height"
            ],
            "properties": {
              "x": {
                "type": "integer",
                "description": "X position"
              },
              "y": {
                "type": "integer",
                "description": "Y position"
              },
              "width": {
                "type": "integer",
                "description": "Width"
              },
              "height": {
                "type": "integer",
                "description": "Height"
              },
              "min_width": {
                "type": "integer",
                "description": "Minimum width"
              },
              "min_height": {
                "type": "integer",
                "description": "Minimum height"
              }
            }
          },
          "widget_type": {
            "type": "string",
            "maxLength": 200,
            "description": "Widget type"
          },
          "widget_settings": {
            "type": "object",
            "description": "Widget settings : 100% dynamic structure related to the widget_type"
          }
        }
      },
      "Dashboard.Listing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Dashboard ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Dashboard name",
            "example": "my dashboard"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Description about this dashboard",
            "example": "my description"
          },
          "created_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Creation contact ID"
              },
              "name": {
                "type": "string",
                "description": "Creation contact name"
              }
            }
          },
          "updated_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Last update contact ID"
              },
              "name": {
                "type": "string",
                "description": "Last update contact name"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Creation date (ISO8601)"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last update date (ISO8601)"
          },
          "own_role": {
            "type": "string",
            "enum": [
              "viewer",
              "editor"
            ],
            "description": "The role current user owns on this dashboard."
          },
          "panels": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DashboardPanel.WithoutId"
                }
              ]
            }
          },
          "refresh": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "global",
                  "manual"
                ],
                "example": "manual"
              },
              "interval": {
                "type": "integer",
                "nullable": true,
                "example": 10
              }
            }
          },
          "thumbnail": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "dashboard-1.png"
              },
              "directory": {
                "type": "string",
                "example": "dashboard"
              }
            }
          },
          "is_favorite": {
            "type": "boolean",
            "description": "Indicates if the dashboard is marked as favorite for current user",
            "example": true
          }
        }
      },
      "Dashboard.Add": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Dashboard name",
            "example": "my dashboard"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Description about this dashboard",
            "example": "my description"
          },
          "panels": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DashboardPanel.WithoutId"
                }
              ]
            }
          },
          "refresh": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "global",
                  "manual"
                ],
                "example": "manual"
              },
              "interval": {
                "type": "integer",
                "nullable": true,
                "example": 10
              }
            }
          }
        }
      },
      "Dashboard.Listing.One": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Dashboard ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Dashboard name",
            "example": "my dashboard"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Description about this dashboard",
            "example": "my description"
          },
          "created_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Creation contact ID"
              },
              "name": {
                "type": "string",
                "description": "Creation contact name"
              }
            }
          },
          "updated_by": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Last update contact ID"
              },
              "name": {
                "type": "string",
                "description": "Last update contact name"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Creation date (ISO8601)"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last update date (ISO8601)"
          },
          "own_role": {
            "type": "string",
            "enum": [
              "viewer",
              "editor"
            ],
            "description": "The role current user owns on this dashboard."
          },
          "refresh": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "global",
                  "manual"
                ],
                "example": "manual"
              },
              "interval": {
                "type": "integer",
                "nullable": true,
                "example": 10
              }
            }
          },
          "is_favorite": {
            "type": "boolean",
            "description": "Indicates if the dashboard is marked as favorite for current user",
            "example": true
          }
        }
      },
      "DashboardPanel.IdRequired": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Dashboard panel ID",
            "example": 1
          }
        }
      },
      "Dashboard.Find": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Dashboard.Listing.One"
          },
          {
            "type": "object",
            "required": [
              "panels"
            ],
            "properties": {
              "panels": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DashboardPanel.WithoutId"
                    },
                    {
                      "$ref": "#/components/schemas/DashboardPanel.IdRequired"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "DashboardPanel.IdOptional": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true,
            "description": "Dashboard panel ID",
            "example": 1
          }
        }
      },
      "Dashboard.PartialUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Dashboard name",
            "example": "my dashboard"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535,
            "description": "Description about this dashboard",
            "example": "my description"
          },
          "panels": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DashboardPanel.WithoutId"
                },
                {
                  "$ref": "#/components/schemas/DashboardPanel.IdOptional"
                }
              ]
            }
          },
          "refresh": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "global",
                  "manual"
                ],
                "example": "manual"
              },
              "interval": {
                "type": "integer",
                "nullable": true,
                "example": 10
              }
            }
          },
          "thumbnail": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "nullable": true,
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "cat.png"
              },
              "directory": {
                "type": "string",
                "example": "dashboard"
              }
            }
          },
          "thumbnail_data": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Dashboard.AddAsFavorite": {
        "type": "object",
        "required": [
          "dashboard_id"
        ],
        "properties": {
          "dashboard_id": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "ShareDashboardRequest": {
        "type": "object",
        "required": [
          "contacts",
          "contact_groups"
        ],
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Contact ID",
                  "example": 1
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "viewer",
                    "editor"
                  ],
                  "description": "The role of the contact for this dashboard.",
                  "example": "viewer"
                }
              }
            }
          },
          "contact_groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Contact ID",
                  "example": 1
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "viewer",
                    "editor"
                  ],
                  "description": "The role of the contact for this dashboard.",
                  "example": "viewer"
                }
              }
            }
          }
        }
      },
      "Dashboard.MetricsPerformances": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "service id",
            "example": 26
          },
          "name": {
            "type": "string",
            "description": "name of the resource",
            "example": "Ping"
          },
          "parent_name": {
            "type": "string",
            "description": "name of the resource's parent",
            "example": "Printers"
          },
          "uuid": {
            "type": "string",
            "description": "UUID of the resource",
            "example": "h24-s16"
          },
          "metrics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "id of the metric",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "description": "name of the metric",
                  "example": "rta"
                },
                "unit": {
                  "type": "string",
                  "description": "unit of the metric",
                  "example": "%",
                  "nullable": true
                },
                "warning_high_threshold": {
                  "type": "number",
                  "description": "warning high threshold",
                  "example": 200,
                  "nullable": true
                },
                "critical_high_threshold": {
                  "type": "number",
                  "description": "critical high threshold",
                  "example": 400,
                  "nullable": true
                },
                "warning_low_threshold": {
                  "type": "number",
                  "description": "warning low threshold",
                  "example": 200,
                  "nullable": true
                },
                "critical_low_threshold": {
                  "type": "number",
                  "description": "critical low threshold",
                  "example": 400,
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "Dashboard.MetricsPerformancesData": {
        "type": "object",
        "properties": {
          "base": {
            "type": "number",
            "example": 1000,
            "description": "Base to scale data on graph"
          },
          "metrics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "metric_id": {
                  "type": "number",
                  "description": "metric id in centreon_storage.metrics table",
                  "example": "29"
                },
                "metric": {
                  "type": "string",
                  "description": "name of the metric",
                  "example": "cpu"
                },
                "metric_legend": {
                  "type": "string",
                  "description": "name of the metric in legend",
                  "example": "cpu"
                },
                "unit": {
                  "type": "string",
                  "description": "metric unit",
                  "example": "%"
                },
                "min": {
                  "type": "number",
                  "nullable": true,
                  "description": "min value",
                  "example": "0"
                },
                "max": {
                  "type": "number",
                  "nullable": true,
                  "description": "max value",
                  "example": "100"
                },
                "ds_data": {
                  "type": "object",
                  "description": "metric line properties",
                  "properties": {
                    "ds_color_line": {
                      "type": "string",
                      "description": "color of the line",
                      "example": "#666600"
                    },
                    "ds_color_area": {
                      "type": "string",
                      "description": "color of the area",
                      "example": "#666600",
                      "nullable": true
                    },
                    "ds_filled": {
                      "type": "bool",
                      "description": "enables area filling",
                      "example": true
                    },
                    "ds_invert": {
                      "type": "bool",
                      "description": "indicates if the curve should be inverted",
                      "example": true
                    },
                    "ds_legend": {
                      "type": "string",
                      "description": "legend associated to the curve",
                      "example": "#666600",
                      "nullable": true
                    },
                    "ds_stack": {
                      "type": "bool",
                      "description": "enable graph stacking",
                      "example": false
                    },
                    "ds_order": {
                      "type": "integer",
                      "description": "display order",
                      "example": 2,
                      "nullable": true
                    },
                    "ds_transparency": {
                      "type": "number",
                      "description": "Curve transparency. Used to export the chart",
                      "example": 30,
                      "nullable": true
                    },
                    "ds_color_line_mode": {
                      "type": "integer",
                      "description": "curve line color mode. Random or manual",
                      "example": 1,
                      "nullable": true
                    }
                  }
                },
                "legend": {
                  "type": "string",
                  "description": "metric name in legend",
                  "example": "cpu (%)"
                },
                "stack": {
                  "type": "number",
                  "description": "if the metric is stacked with other metrics",
                  "example": 0
                },
                "warning_high_threshold": {
                  "type": "number",
                  "nullable": true,
                  "description": "warning high threshold",
                  "example": null
                },
                "critical_high_threshold": {
                  "type": "number",
                  "nullable": true,
                  "description": "critical high threshold",
                  "example": null
                },
                "warning_low_threshold": {
                  "type": "number",
                  "nullable": true,
                  "description": "warning low threshold",
                  "example": null
                },
                "critical_low_threshold": {
                  "type": "number",
                  "nullable": true,
                  "description": "critical low threshold",
                  "example": null
                },
                "ds_order": {
                  "type": "integer",
                  "description": "order used for stacking",
                  "example": 0
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "float",
                    "nullable": true,
                    "description": "value of the metric"
                  },
                  "example": [
                    1,
                    null,
                    1
                  ]
                },
                "last_value": {
                  "type": "number",
                  "nullable": true,
                  "description": "last value",
                  "example": 5
                },
                "average_value": {
                  "type": "number",
                  "nullable": true,
                  "description": "average value",
                  "example": 5.64
                },
                "minimum_value": {
                  "type": "number",
                  "format": "float",
                  "nullable": true,
                  "description": "minimum value",
                  "example": 1
                },
                "maximum_value": {
                  "type": "number",
                  "format": "float",
                  "nullable": true,
                  "description": "maximum value",
                  "example": 1
                }
              }
            }
          },
          "times": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time",
              "description": "datetime of the tick"
            },
            "example": [
              "2020-02-19T00:00:00",
              "2020-02-19T00:05:00",
              "2020-02-19T00:10:00"
            ]
          }
        }
      },
      "Dashboard.MetricsTop": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Metric name",
            "example": "rta"
          },
          "unit": {
            "type": "string",
            "description": "Metric unit",
            "example": "%"
          },
          "sort": {
            "type": "string",
            "enum": [
              "top",
              "bottom"
            ],
            "description": "Top or Bottom sorting",
            "example": "top"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of resource"
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "ID of the service",
                  "example": 1
                },
                "uuid": {
                  "type": "string",
                  "description": "UUID of the resource",
                  "example": "h16-s24"
                },
                "name": {
                  "type": "string",
                  "description": "name of the resource",
                  "example": "Ping"
                },
                "parent_name": {
                  "type": "string",
                  "description": "name of the resource's parent",
                  "example": "Printers"
                },
                "current_value": {
                  "type": "number",
                  "description": "Current value of the metrics, use to sort the resources",
                  "example": 1.3
                },
                "warning_high_threshold": {
                  "type": "number",
                  "description": "configured warning threshold",
                  "example": 100,
                  "nullable": true
                },
                "critical_high_threshold": {
                  "type": "number",
                  "description": "configured critical threshold",
                  "example": 300,
                  "nullable": true
                },
                "warning_low_threshold": {
                  "type": "number",
                  "description": "configured warning low threshold",
                  "example": 100,
                  "nullable": true
                },
                "critical_low_threshold": {
                  "type": "number",
                  "description": "configured critical low threshold",
                  "example": 300,
                  "nullable": true
                },
                "max": {
                  "type": "number",
                  "description": "max value of the metric",
                  "example": "100,",
                  "nullable": true
                },
                "min": {
                  "type": "number",
                  "description": "min value of the metric",
                  "example": 0,
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "Notes": {
        "type": "object",
        "nullable": true,
        "properties": {
          "url": {
            "type": "string",
            "nullable": true,
            "description": "URL that can be used to provide more information on the resource",
            "example": "http://mediawiki/resource/name"
          },
          "label": {
            "type": "string",
            "nullable": true,
            "description": "Note that can be used to describe the note url",
            "example": "How to turn back on the server"
          }
        }
      },
      "Links": {
        "type": "object",
        "properties": {
          "uris": {
            "type": "object",
            "properties": {
              "configuration": {
                "type": "string",
                "nullable": true,
                "description": "configuration uri",
                "example": "/centreon/main.php?p=60101&o=c&host_id=11"
              },
              "logs": {
                "type": "string",
                "nullable": true,
                "description": "logs uri",
                "example": "/centreon/main.php?p=20301&h=11"
              },
              "reporting": {
                "type": "string",
                "nullable": true,
                "description": "reporting uri",
                "example": "/centreon/main.php?p=307&host=11"
              }
            }
          },
          "endpoints": {
            "type": "object",
            "properties": {
              "details": {
                "type": "string",
                "nullable": true,
                "description": "resource details endpoint",
                "example": "/centreon/api/latest/monitoring/resources/hosts/11"
              },
              "timeline": {
                "type": "string",
                "nullable": true,
                "description": "resource timeline endpoint",
                "example": "/centreon/api/latest/monitoring/hosts/11/timeline"
              },
              "status_graph": {
                "type": "string",
                "nullable": true,
                "description": "resource status graph endpoint",
                "example": null
              },
              "performance_graph": {
                "type": "string",
                "nullable": true,
                "description": "resource performance graph endpoint",
                "example": null
              },
              "acknowledgement": {
                "type": "string",
                "nullable": true,
                "description": "current resource acknowledgement endpoint",
                "example": "/centreon/api/latest/monitoring/hosts/11/acknowledgements?limit=1"
              },
              "downtime": {
                "type": "string",
                "nullable": true,
                "description": "current resource downtimes endpoint",
                "example": "/centreon/api/latest/monitoring/hosts/11/downtimes?search=%7B%22%24and%22:%5B%7B%22start_time%22:%7B%22%24lt%22:1599655905%7D,%22end_time%22:%7B%22%24gt%22:1599655905%7D,%220%22:%7B%22%24or%22:%7B%22is_cancelled%22:%7B%22%24neq%22:1%7D,%22deletion_time%22:%7B%22%24gt%22:1599655905%7D%7D%7D%7D%5D%7D"
              },
              "notification_policy": {
                "type": "string",
                "nullable": true,
                "description": "current resource notification policy endpoint",
                "example": "/centreon/api/latest/configurations/hosts/11/notification-policy"
              },
              "check": {
                "type": "string",
                "nullable": true,
                "description": "Endpoint dedicated for checks (forced_check payload entry set to false)",
                "example": "/centreon/api/latest/monitoring/hosts/17/services/23/check"
              },
              "forced_check": {
                "type": "string",
                "nullable": true,
                "description": "Endpoint dedicated for checks (forced_check payload entry set to true)",
                "example": "/centreon/api/latest/monitoring/hosts/17/services/23/check"
              }
            }
          },
          "externals": {
            "type": "object",
            "properties": {
              "action_url": {
                "type": "string",
                "nullable": true,
                "description": "URL that can be used to provide more actions to be performed on the resource",
                "example": "http://mediawiki/resource/name"
              },
              "notes": {
                "$ref": "#/components/schemas/Notes"
              }
            }
          }
        }
      },
      "Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "resource status code\n* `0` - UP or OK\n* `1` - DOWN or WARNING\n* `2` - UNREACHABLE or CRITICAL\n* `3` - UNKNOWN\n* `4` - PENDING\n",
            "example": 0
          },
          "name": {
            "type": "string",
            "description": "resource status name\n* UP\n* DOWN\n* UNREACHABLE\n* PENDING\n* OK\n* WARNING\n* CRITICAL\n* UNKNOWN\n",
            "example": "UP"
          },
          "severity_code": {
            "type": "integer",
            "description": "resource status name\n* `1` - DOWN or CRITICAL\n* `2` - WARNING\n* `3` - UNKNOWN or UNREACHABLE\n* `4` - PENDING\n* `5` - UP or OK\n",
            "example": 1
          }
        }
      },
      "ResourceLightened": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Uniq ID of the resource",
            "example": "h13-s21"
          },
          "type": {
            "type": "string",
            "description": "Type of the resource",
            "example": "service|host"
          },
          "short_type": {
            "type": "string",
            "description": "Short name of the resource type",
            "example": "s|h"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the resource",
            "example": 12
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "description": "Resource alias",
            "example": null
          },
          "fqdn": {
            "type": "string",
            "nullable": true,
            "description": "Resource fqdn",
            "example": null
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          },
          "monitoring_server_name": {
            "type": "string",
            "description": "Monitoring Server from which is monitored the Resource",
            "example": "Central"
          },
          "icon": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "description": "ID of the image",
                "example": 12
              },
              "name": {
                "type": "string",
                "description": "Name of the icon",
                "example": "memory"
              },
              "url": {
                "type": "string",
                "description": "Url of the icon",
                "example": "/media/memory.png"
              }
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "is_in_downtime": {
            "type": "boolean",
            "description": "Indicates whether resource is in downtime",
            "example": false
          },
          "is_acknowledged": {
            "type": "boolean",
            "description": "Indicates whether resource is acknowledged",
            "example": false
          },
          "is_in_flapping": {
            "type": "boolean",
            "description": "Indicates whether resource is in flapping",
            "example": false
          },
          "percent_state_change": {
            "type": "number",
            "nullable": true,
            "description": "Percentage of state change",
            "example": "10.4"
          },
          "duration": {
            "type": "string",
            "nullable": true,
            "description": "Duration since last status change",
            "example": "2h 3m"
          },
          "last_status_change": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the last status change (ISO8601)"
          },
          "last_time_with_no_issue": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the last status change (ISO8601)"
          },
          "tries": {
            "type": "string",
            "nullable": true,
            "description": "Number of check tries",
            "example": "3/3 (H)"
          },
          "last_check": {
            "type": "string",
            "nullable": true,
            "description": "Duration since last check",
            "example": "1h 45m"
          },
          "information": {
            "type": "string",
            "nullable": true,
            "description": "Output of the resource",
            "example": "OK - Ping is ok"
          },
          "has_active_checks_enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates whether active checks are enabled",
            "example": true
          },
          "has_passive_checks_enabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates whether passive checks are enabled",
            "example": true
          },
          "performance_data": {
            "type": "string",
            "nullable": true,
            "description": "Performance data result of the check sent",
            "example": "rta=0.025ms;200.000;400.000;0; rtmax=0.061ms;;;; rtmin=0.015ms;;;; pl=0%;20;50;0;100 "
          },
          "is_notification_enabled": {
            "type": "boolean",
            "description": "Indicates if notifications are enabled for the resource",
            "example": false
          },
          "severity": {
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of severity (host or service)",
                "example": "service"
              },
              "id": {
                "type": "integer",
                "description": "ID of the severity",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Name of the severity",
                "example": "Priority 1"
              },
              "icon": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "ID of the icon",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the icon",
                    "example": "applications-monitoring-centreon-central-centreon-128-2.png"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL for the icon",
                    "example": "/centreon/img/media/ppm/applications-monitoring-centreon-central-centreon-128-2.png"
                  }
                }
              }
            }
          }
        }
      },
      "ResourcesByParent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceLightened"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "Parent Resource name",
                "example": "Central"
              },
              "extra": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "children": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "Total number of children",
                    "example": "10"
                  },
                  "status_count": {
                    "type": "object",
                    "properties": {
                      "ok": {
                        "type": "integer",
                        "description": "Number of resources in OK status",
                        "example": 1
                      },
                      "warning": {
                        "type": "integer",
                        "description": "Number of resources in WARNING status",
                        "example": 1
                      },
                      "critical": {
                        "type": "integer",
                        "description": "Number of resources in CRITICAL status",
                        "example": 1
                      },
                      "unknown": {
                        "type": "integer",
                        "description": "Number of resources in UNKNOWN status",
                        "example": 1
                      }
                    }
                  },
                  "resources": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ResourceLightened"
                        },
                        {
                          "properties": {
                            "resource_name": {
                              "type": "string",
                              "description": "Resource name",
                              "example": "Ping"
                            },
                            "host_id": {
                              "type": "integer",
                              "format": "int32",
                              "description": "ID of the host behind the resource",
                              "example": 12
                            },
                            "service_id": {
                              "type": "integer",
                              "format": "int32",
                              "description": "ID of the service behind the resource",
                              "example": 12
                            },
                            "extra": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "parent": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "ID of the parent",
                                  "example": 12
                                },
                                "extra": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ResourceHostDetail": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the Host resource",
            "example": "h14"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the Host resource",
            "example": 14
          },
          "name": {
            "type": "string",
            "description": "Name of the Host resource",
            "example": "Centreon-Central"
          },
          "monitoring_server_name": {
            "type": "string",
            "description": "Name of the monitoring server that monitors the Host resource",
            "example": "Central"
          },
          "type": {
            "type": "string",
            "description": "Type of the Host Resource",
            "example": "host"
          },
          "short_type": {
            "type": "string",
            "description": "Shorter version of the Host Resource type",
            "example": "h"
          },
          "fqdn": {
            "type": "string",
            "description": "FQDN of the Host Resource",
            "example": "localhost|127.0.0.1"
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "description": "Alias given to the Host Resource",
            "example": "central"
          },
          "status": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "Host resource status code\n* `0` - UP\n* `1` - DOWN\n* `2` - UNREACHABLE\n",
                "example": 0
              },
              "name": {
                "type": "string",
                "description": "Host resource status name\n* UP\n* DOWN\n* UNREACHABLE\n",
                "example": "UP"
              },
              "severity_code": {
                "type": "integer",
                "description": "Host resource status severity code\n* `1` - DOWN\n* `3` - UNREACHABLE\n* `4` - PENDING\n* `5` - UP\n",
                "example": 1
              },
              "type": {
                "type": "integer",
                "description": "Host resource status type\n* `0` - Soft\n* `1` - Hard\n",
                "example": 1
              }
            }
          },
          "in_downtime": {
            "type": "boolean",
            "description": "Indicates if the Host resource is currently in downtime",
            "example": true
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Indicates if the Host resource is currently acknowledged",
            "example": false
          },
          "flapping": {
            "type": "boolean",
            "description": "Indicates if the Host resource is currently flapping",
            "example": false
          },
          "performance_data": {
            "type": "string",
            "description": "Performance data of the last plugin check",
            "example": "rta=0.025ms;200.000;400.000;0; rtmax=0.061ms;;;; rtmin=0.015ms;;;; pl=0%;20;50;0;100"
          },
          "information": {
            "type": "string",
            "description": "Output of the last plugin check",
            "example": "OK - 127.0.0.1 rta 0.284ms lost 0%\n"
          },
          "command_line": {
            "type": "string",
            "description": "Command used for active checks",
            "example": "/usr/lib64/nagios/plugins/check_icmp -H 127.0.0.1 -n 5 -w 200,20% -c 400,50%"
          },
          "notification_number": {
            "type": "integer",
            "description": "Number of notifications sent since last status change",
            "example": 3
          },
          "latency": {
            "type": "number",
            "format": "float",
            "description": "Time difference between scheduled check time and actual check time",
            "example": 0.031
          },
          "percent_state_change": {
            "type": "number",
            "format": "float",
            "description": "Percent state change since last check",
            "example": 3.5
          },
          "passive_checks": {
            "type": "boolean",
            "description": "Indicates whether the check script is passive or not",
            "example": false
          },
          "execution_time": {
            "type": "number",
            "format": "float",
            "description": "Time duration to check the service",
            "example": 0.179335
          },
          "active_checks": {
            "type": "boolean",
            "description": "Indicates whether the check script is active or not",
            "example": true
          },
          "parent": {
            "type": "null"
          },
          "icon": {
            "type": "object",
            "nullable": true,
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the icon",
                "example": "memory"
              },
              "url": {
                "type": "string",
                "description": "Url of the icon",
                "example": "/media/memory.png"
              }
            }
          },
          "groups": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the host group",
                "example": 28
              },
              "name": {
                "type": "string",
                "description": "Name of the host group",
                "example": "Linux-Servers"
              }
            }
          },
          "categories": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the host category",
                "example": 28
              },
              "name": {
                "type": "string",
                "description": "Name of the host category",
                "example": "All-Cpu-Services"
              },
              "configuration_uri": {
                "type": "string",
                "nullable": true,
                "description": "Internal URI to reach category configuration"
              }
            }
          },
          "severity": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the severity",
                "example": 28
              },
              "name": {
                "type": "string",
                "description": "Name of the severity",
                "example": "High"
              },
              "type": {
                "type": "string",
                "description": "Type of the severity",
                "enum": [
                  "host",
                  "service"
                ]
              },
              "level": {
                "type": "integer",
                "description": "Level of the severity",
                "minimum": 0,
                "maximum": 100,
                "example": 50
              },
              "icon": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "ID of the icon",
                    "example": 10
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the icon",
                    "example": "dog.png"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the icon",
                    "example": "baseUri/ppm/dog.png"
                  }
                }
              }
            }
          },
          "acknowledgement": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the acknowledgement",
                "example": 34
              },
              "poller_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the poller",
                "example": 1
              },
              "host_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the host",
                "example": 12
              },
              "service_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the service",
                "example": 55
              },
              "author_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the contact who submitted an acknowledgement",
                "example": 3
              },
              "author_name": {
                "type": "string",
                "description": "Name of the contact who submitted an acknowledgement",
                "example": "admin"
              },
              "comment": {
                "type": "string",
                "description": "Short description of the acknowledgement",
                "example": "Acknowledged by admin"
              },
              "deletion_time": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of the request for cancellation of the acknowledgement (ISO8601)"
              },
              "entry_time": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the request for acknowledgement (ISO8601)"
              },
              "is_notify_contacts": {
                "type": "boolean",
                "description": "Indicates whether notification is sent to the contacts linked to the host",
                "example": false
              },
              "is_persistent_comment": {
                "type": "boolean",
                "description": "Indicates whether acknowledgement is maintained in the case of a restart of the scheduler",
                "example": true
              },
              "is_sticky": {
                "type": "boolean",
                "description": "Indicates whether acknowledgement is maintained in the case of a change of status",
                "example": true
              },
              "state": {
                "type": "integer",
                "description": "State type\n* `1` - WARNING\n* `2` - CRITICAL\n* `3` - UNKNOWN\n",
                "example": 1
              },
              "type": {
                "type": "integer",
                "description": "Acknowledegement type seen by the scheduler",
                "example": 1
              },
              "with_services": {
                "type": "boolean",
                "description": "Indicates whether services linked to the Host resource will also be acknowledged"
              }
            }
          },
          "downtimes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start_time": {
                  "type": "string",
                  "nullable": true,
                  "format": "date-time",
                  "description": "Scheduled start date of the downtime (ISO8601)"
                },
                "end_time": {
                  "type": "string",
                  "nullable": true,
                  "format": "date-time",
                  "description": "Scheduled end date of the downtime (ISO8601)"
                },
                "actual_start_time": {
                  "type": "string",
                  "nullable": true,
                  "format": "date-time",
                  "description": "Actual start date of the downtime (ISO8601)"
                },
                "id": {
                  "type": "integer",
                  "description": "ID of the downtime",
                  "example": 329
                },
                "entry_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of the request to create the downtime (ISO8601)"
                },
                "author_id": {
                  "type": "integer",
                  "nullable": true,
                  "description": "ID of the contact who requested the downtime",
                  "example": 3
                },
                "author_name": {
                  "type": "string",
                  "nullable": true,
                  "description": "Name of the contact who requested the downtime",
                  "example": "admin"
                },
                "host_id": {
                  "type": "integer",
                  "description": "ID of the host on which the downtime is set",
                  "example": 12
                },
                "service_id": {
                  "type": "integer",
                  "description": "ID of the service on which the downtime is set",
                  "example": 12
                },
                "is_cancelled": {
                  "type": "boolean",
                  "description": "Indicates whether the downtime has been cancelled or not",
                  "example": false
                },
                "comment": {
                  "type": "string",
                  "nullable": true,
                  "description": "Comment of set on the downtime",
                  "example": "Downtime set by admin"
                },
                "deletion_time": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Date of cancellation of downtime (ISO8601)",
                  "example": null
                },
                "duration": {
                  "type": "integer",
                  "nullable": true,
                  "description": "Downtime duration in seconds",
                  "example": 7200
                },
                "internal_id": {
                  "type": "integer",
                  "description": "ID of the downtime seen by the scheduler",
                  "example": 42
                },
                "is_fixed": {
                  "type": "boolean",
                  "description": "Indicates whether the downtime is fixed",
                  "example": true
                },
                "is_started": {
                  "type": "boolean",
                  "description": "Indicates whether the downtime has started",
                  "example": true
                }
              }
            }
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "description": "Timezone configured on the Host resource",
            "example": "Europe/Paris"
          },
          "duration": {
            "type": "string",
            "nullable": true,
            "description": "Duration since last status change",
            "example": "2h 3m"
          },
          "next_check": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Scheduled date for the next check (ISO8601)"
          },
          "last_check": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date of the last check (ISO8601)"
          },
          "last_time_with_no_issue": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date of the last time Host Resource was UP (ISO8601)"
          },
          "last_status_change": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date of the last status change (ISO8601)"
          },
          "last_notification": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date of the last notification sent (ISO8601)"
          },
          "tries": {
            "type": "string",
            "description": "Indicates the current number of check attempts",
            "example": "(1/3) (S)"
          },
          "links": {
            "type": "object",
            "properties": {
              "uris": {
                "type": "object",
                "properties": {
                  "configuration": {
                    "type": "string",
                    "nullable": true,
                    "description": "configuration uri",
                    "example": "/centreon/main.php?p=60101&o=c&host_id=11"
                  },
                  "logs": {
                    "type": "string",
                    "nullable": true,
                    "description": "logs uri",
                    "example": "/centreon/main.php?p=20301&h=11"
                  },
                  "reporting": {
                    "type": "string",
                    "nullable": true,
                    "description": "reporting uri",
                    "example": "/centreon/main.php?p=307&host=11"
                  }
                }
              },
              "endpoints": {
                "type": "object",
                "properties": {
                  "notification_policy": {
                    "type": "string",
                    "nullable": true,
                    "description": "Host resource notification policy endpoint",
                    "example": "/centreon/api/v22.04/monitoring/hosts/202/notification-policy"
                  },
                  "timeline": {
                    "type": "string",
                    "nullable": true,
                    "description": "resource timeline endpoint",
                    "example": "/centreon/api/latest/monitoring/hosts/11/timeline"
                  }
                }
              }
            }
          }
        }
      },
      "ResourceServiceDetail": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the Service resource",
            "example": "h14"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the Service resource",
            "example": 14
          },
          "name": {
            "type": "string",
            "description": "Name of the Service resource",
            "example": "Ping"
          },
          "monitoring_server_name": {
            "type": "string",
            "description": "Name of the monitoring server that monitors the Service resource",
            "example": "Central"
          },
          "type": {
            "type": "string",
            "description": "Type of the Service Resource",
            "example": "service"
          },
          "short_type": {
            "type": "string",
            "description": "Shorter version of the Service Resource type",
            "example": "s"
          },
          "status": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "Service resource status code\n* `0` - OK\n* `1` - WARNING\n* `2` - CRITICAL\n* `3` - UNKNOWN\n* `4` - PENDING\n",
                "example": 0
              },
              "name": {
                "type": "string",
                "enum": [
                  "OK",
                  "WARNING",
                  "CRITICAL",
                  "UNKNOWN",
                  "PENDING"
                ],
                "description": "Service resource status name\n* OK\n* WARNING\n* CRITICAL\n* UNKNOWN\n* PENDING\n",
                "example": "OK"
              },
              "severity_code": {
                "type": "integer",
                "description": "Service resource status severity code\n* `1` - CRITICAL\n* `2` - WARNING\n* `3` - UNKNOWN\n* `4` - PENDING\n* `5` - OK\n",
                "example": 1
              },
              "type": {
                "type": "integer",
                "description": "Service resource status type\n* `0` - Soft\n* `1` - Hard\n",
                "example": 1
              }
            }
          },
          "in_downtime": {
            "type": "boolean",
            "description": "Indicates if the Service resource is currently in downtime",
            "example": true
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Indicates if the Service resource is currently acknowledged",
            "example": false
          },
          "flapping": {
            "type": "boolean",
            "description": "Indicates if the Service resource is currently flapping",
            "example": false
          },
          "performance_data": {
            "type": "string",
            "description": "Performance data of the last plugin check",
            "example": "rta=0.025ms;200.000;400.000;0; rtmax=0.061ms;;;; rtmin=0.015ms;;;; pl=0%;20;50;0;100"
          },
          "information": {
            "type": "string",
            "description": "Output of the last plugin check",
            "example": "OK - 127.0.0.1 rta 0.284ms lost 0%\n"
          },
          "command_line": {
            "type": "string",
            "description": "Command used for active checks",
            "example": "/usr/lib64/nagios/plugins/check_icmp -H 127.0.0.1 -n 5 -w 200,20% -c 400,50%"
          },
          "notification_number": {
            "type": "integer",
            "description": "Number of notifications sent since last status change",
            "example": 3
          },
          "latency": {
            "type": "number",
            "format": "float",
            "description": "Time difference between scheduled check time and actual check time",
            "example": 0.031
          },
          "percent_state_change": {
            "type": "number",
            "format": "float",
            "description": "Percent state change since last check",
            "example": 3.5
          },
          "passive_checks": {
            "type": "boolean",
            "description": "Indicates whether the check script is passive or not",
            "example": false
          },
          "execution_time": {
            "type": "number",
            "format": "float",
            "description": "Time duration to check the service",
            "example": 0.179335
          },
          "active_checks": {
            "type": "boolean",
            "description": "Indicates whether the check script is active or not",
            "example": true
          },
          "parent": {
            "$ref": "#/components/schemas/ResourceHostDetail"
          },
          "icon": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the icon",
                "example": "memory"
              },
              "url": {
                "type": "string",
                "description": "Url of the icon",
                "example": "/media/memory.png"
              }
            }
          },
          "groups": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the service group",
                "example": 28
              },
              "name": {
                "type": "string",
                "description": "Name of the service group",
                "example": "All-Cpu-Services"
              },
              "configuration_uri": {
                "type": "string",
                "nullable": true,
                "description": "Internal URI to reach group configuration"
              }
            }
          },
          "categories": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the service category",
                "example": 28
              },
              "name": {
                "type": "string",
                "description": "Name of the service category",
                "example": "All-Cpu-Services"
              },
              "configuration_uri": {
                "type": "string",
                "nullable": true,
                "description": "Internal URI to reach category configuration"
              }
            }
          },
          "severity": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the severity",
                "example": 28
              },
              "name": {
                "type": "string",
                "description": "Name of the severity",
                "example": "High"
              },
              "type": {
                "type": "string",
                "description": "Type of the severity",
                "enum": [
                  "host",
                  "service"
                ]
              },
              "level": {
                "type": "integer",
                "description": "Level of the severity",
                "minimum": 0,
                "maximum": 100,
                "example": 50
              },
              "icon": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "ID of the icon",
                    "example": 10
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the icon",
                    "example": "dog.png"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the icon",
                    "example": "baseUri/ppm/dog.png"
                  }
                }
              }
            }
          },
          "acknowledgement": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the acknowledgement",
                "example": 34
              },
              "poller_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the poller",
                "example": 1
              },
              "host_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the host",
                "example": 12
              },
              "service_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the service",
                "example": 55
              },
              "author_id": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the contact who submitted an acknowledgement",
                "example": 3
              },
              "author_name": {
                "type": "string",
                "description": "Name of the contact who submitted an acknowledgement",
                "example": "admin"
              },
              "comment": {
                "type": "string",
                "description": "Short description of the acknowledgement",
                "example": "Acknowledged by admin"
              },
              "deletion_time": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Date of the request for cancellation of the acknowledgement (ISO8601)"
              },
              "entry_time": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the request for acknowledgement (ISO8601)"
              },
              "is_notify_contacts": {
                "type": "boolean",
                "description": "Indicates whether notification is sent to the contacts linked to the host",
                "example": false
              },
              "is_persistent_comment": {
                "type": "boolean",
                "description": "Indicates whether acknowledgement is maintained in the case of a restart of the scheduler",
                "example": true
              },
              "is_sticky": {
                "type": "boolean",
                "description": "Indicates whether acknowledgement is maintained in the case of a change of status",
                "example": true
              },
              "state": {
                "type": "integer",
                "description": "State type\n* `1` - WARNING\n* `2` - CRITICAL\n* `3` - UNKNOWN\n",
                "example": 1
              },
              "type": {
                "type": "integer",
                "description": "Acknowledegement type seen by the scheduler",
                "example": 1
              },
              "with_services": {
                "type": "boolean",
                "description": "Indicates whether services linked to the Host resource will also be acknowledged"
              }
            }
          },
          "downtimes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start_time": {
                  "type": "string",
                  "nullable": true,
                  "format": "date-time",
                  "description": "Scheduled start date of the downtime (ISO8601)"
                },
                "end_time": {
                  "type": "string",
                  "nullable": true,
                  "format": "date-time",
                  "description": "Scheduled end date of the downtime (ISO8601)"
                },
                "actual_start_time": {
                  "type": "string",
                  "nullable": true,
                  "format": "date-time",
                  "description": "Actual start date of the downtime (ISO8601)"
                },
                "id": {
                  "type": "integer",
                  "description": "ID of the downtime",
                  "example": 329
                },
                "entry_time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of the request to create the downtime (ISO8601)"
                },
                "author_id": {
                  "type": "integer",
                  "nullable": true,
                  "description": "ID of the contact who requested the downtime",
                  "example": 3
                },
                "author_name": {
                  "type": "string",
                  "nullable": true,
                  "description": "Name of the contact who requested the downtime",
                  "example": "admin"
                },
                "host_id": {
                  "type": "integer",
                  "description": "ID of the host on which the downtime is set",
                  "example": 12
                },
                "service_id": {
                  "type": "integer",
                  "description": "ID of the service on which the downtime is set",
                  "example": 12
                },
                "is_cancelled": {
                  "type": "boolean",
                  "description": "Indicates whether the downtime has been cancelled or not",
                  "example": false
                },
                "comment": {
                  "type": "string",
                  "nullable": true,
                  "description": "Comment of set on the downtime",
                  "example": "Downtime set by admin"
                },
                "deletion_time": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Date of cancellation of downtime (ISO8601)",
                  "example": null
                },
                "duration": {
                  "type": "integer",
                  "nullable": true,
                  "description": "Downtime duration in seconds",
                  "example": 7200
                },
                "internal_id": {
                  "type": "integer",
                  "description": "ID of the downtime seen by the scheduler",
                  "example": 42
                },
                "is_fixed": {
                  "type": "boolean",
                  "description": "Indicates whether the downtime is fixed",
                  "example": true
                },
                "is_started": {
                  "type": "boolean",
                  "description": "Indicates whether the downtime has started",
                  "example": true
                }
              }
            }
          },
          "duration": {
            "type": "string",
            "nullable": true,
            "description": "Duration since last status change",
            "example": "2h 3m"
          },
          "next_check": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Scheduled date for the next check (ISO8601)"
          },
          "last_check": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date of the last check (ISO8601)"
          },
          "last_time_with_no_issue": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date of the last time Host Resource was UP (ISO8601)"
          },
          "last_status_change": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date of the last status change (ISO8601)"
          },
          "last_notification": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date of the last notification sent (ISO8601)"
          },
          "tries": {
            "type": "string",
            "description": "Indicates the current number of check attempts",
            "example": "(1/3) (S)"
          },
          "links": {
            "type": "object",
            "properties": {
              "uris": {
                "type": "object",
                "properties": {
                  "configuration": {
                    "type": "string",
                    "nullable": true,
                    "description": "Redirection link to Service resource configuration page",
                    "example": "/centreon/main.php?p=60201&o=c&service_id=1533"
                  },
                  "logs": {
                    "type": "string",
                    "nullable": true,
                    "description": "Redirection link to Service resource logs pre-filtered page",
                    "example": "centreon/main.php?p=20301&svc=202_1533"
                  },
                  "reporting": {
                    "type": "string",
                    "nullable": true,
                    "description": "Redirection link to Service resource reporting pre-filtered page",
                    "example": "/centreon/main.php?p=30702&period=yesterday&start=&end=&host_id=202&item=1533"
                  }
                }
              },
              "endpoints": {
                "type": "object",
                "properties": {
                  "notification_policy": {
                    "type": "string",
                    "nullable": true,
                    "description": "Service resource notification policy endpoint",
                    "example": "/centreon/api/v22.04/monitoring/hosts/202/services/1533/notification-policy"
                  },
                  "timeline": {
                    "type": "string",
                    "nullable": true,
                    "description": "Service resource timeline endpoint",
                    "example": "/centreon/api/v22.04/monitoring/hosts/202/services/1533/timeline"
                  },
                  "status_graph": {
                    "type": "string",
                    "nullable": true,
                    "description": "Service resource status graph endpoint",
                    "example": "/centreon/api/v22.04/monitoring/hosts/14/services/26/metrics/status"
                  },
                  "performance_graph": {
                    "type": "string",
                    "nullable": true,
                    "description": "Service resource performance graph endpoint",
                    "example": "/centreon/api/v22.04/monitoring/hosts/14/services/26/metrics/performance"
                  }
                }
              }
            }
          }
        }
      },
      "HostsStatus": {
        "type": "object",
        "properties": {
          "up": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "down": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "unreachable": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "pending": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "ServicesStatus": {
        "type": "object",
        "properties": {
          "critical": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "unknown": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "ok": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "down": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "pending": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "Metric": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "current_value": {
            "type": "number",
            "nullable": true
          },
          "warning_high_threshold": {
            "type": "number",
            "nullable": true
          },
          "warning_low_threshold": {
            "type": "number",
            "nullable": true
          },
          "critical_high_threshold": {
            "type": "number",
            "nullable": true
          },
          "critical_low_threshold": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "Version": {
        "type": "object",
        "description": "version",
        "properties": {
          "version": {
            "type": "string",
            "description": "Full Version",
            "example": "22.04.0"
          },
          "major": {
            "type": "string",
            "description": "Major version",
            "example": "22"
          },
          "minor": {
            "type": "string",
            "description": "Minor version",
            "example": "04"
          },
          "fix": {
            "type": "string",
            "description": "Fix version",
            "example": "0"
          }
        }
      },
      "ReadAuthenticationOpenIdProvider": {
        "type": "object",
        "required": [
          "is_active",
          "is_forced",
          "base_url",
          "authorization_endpoint",
          "token_endpoint",
          "introspection_token_endpoint",
          "userinfo_endpoint",
          "endsession_endpoint",
          "connection_scopes",
          "login_claim",
          "client_id",
          "client_secret",
          "authentication_type",
          "verify_peer",
          "auto_import",
          "contact_template",
          "email_bind_attribute",
          "fullname_bind_attribute",
          "redirect_url"
        ],
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the provider is active or not",
            "example": true
          },
          "is_forced": {
            "type": "boolean",
            "description": "Indicates whether the provider is forced or not",
            "example": false
          },
          "base_url": {
            "type": "string",
            "description": "Base URL of the provider",
            "example": "https://localhost:8080",
            "nullable": true
          },
          "authorization_endpoint": {
            "type": "string",
            "description": "Authorization endpoint of the provider",
            "example": "/authorize",
            "nullable": true
          },
          "token_endpoint": {
            "type": "string",
            "description": "Token endpoint of the provider",
            "example": "/token",
            "nullable": true
          },
          "introspection_token_endpoint": {
            "type": "string",
            "description": "Introspection token endpoint of the provider",
            "example": "/introspect",
            "nullable": true
          },
          "userinfo_endpoint": {
            "type": "string",
            "description": "Userinfo endpoint of the provider",
            "example": "/userinfo",
            "nullable": true
          },
          "endsession_endpoint": {
            "type": "string",
            "description": "Endsession endpoint of the provider",
            "example": "/logout",
            "nullable": true
          },
          "connection_scopes": {
            "type": "array",
            "description": "List of scopes to request",
            "items": {
              "type": "string",
              "description": "Scope",
              "example": "openid"
            }
          },
          "login_claim": {
            "type": "string",
            "description": "Claim used to login",
            "example": "sub",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "Client ID",
            "example": "client_id",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret",
            "example": "client_secret",
            "nullable": true
          },
          "authentication_type": {
            "type": "string",
            "description": "Authentication type",
            "example": "client_secret_post",
            "nullable": true,
            "enum": [
              "client_secret_post",
              "client_secret_basic"
            ]
          },
          "verify_peer": {
            "type": "boolean",
            "description": "Verify peer",
            "example": true
          },
          "auto_import": {
            "type": "boolean",
            "description": "Auto import user from external provider",
            "example": true
          },
          "contact_template": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Contact template ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Contact template name",
                "example": "Default"
              }
            }
          },
          "email_bind_attribute": {
            "type": "string",
            "description": "Email bind attribute",
            "example": "email",
            "nullable": true
          },
          "fullname_bind_attribute": {
            "type": "string",
            "description": "Fullname bind attribute",
            "example": "name",
            "nullable": true
          },
          "redirect_url": {
            "type": "string",
            "description": "custom redirect url",
            "example": "https://my_custom_domain.com",
            "nullable": true
          },
          "authentication_conditions": {
            "type": "object",
            "required": [
              "trusted_client_addresses",
              "blacklist_client_addresses",
              "is_enabled",
              "attribute_path",
              "endpoint",
              "authorized_values"
            ],
            "properties": {
              "trusted_client_addresses": {
                "type": "array",
                "description": "List of trusted client addresses",
                "items": {
                  "type": "string",
                  "description": "IP address",
                  "example": "127.0.0.1"
                }
              },
              "blacklist_client_addresses": {
                "type": "array",
                "description": "List of blacklisted client addresses",
                "items": {
                  "type": "string",
                  "description": "IP address",
                  "example": "127.0.0.1"
                }
              },
              "is_enabled": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "example": "info.items.prop1"
              },
              "endpoint": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "authorized_values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "groups_mapping": {
            "type": "object",
            "required": [
              "is_enabled",
              "attribute_path",
              "endpoint",
              "relations"
            ],
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "nullable": false,
                "example": "info.items.groups"
              },
              "endpoint": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "group_value": {
                      "type": "string",
                      "description": "Attribute group value",
                      "example": "group1"
                    },
                    "contact_group": {
                      "type": "object",
                      "description": "Contact group",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Contact group ID",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "description": "Contact group name",
                          "example": "cg1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "roles_mapping": {
            "type": "object",
            "required": [
              "is_enabled",
              "apply_only_first_role",
              "attribute_path",
              "endpoint",
              "relations"
            ],
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "apply_only_first_role": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "example": "info.items.role"
              },
              "endpoint": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "claim_value": {
                      "type": "string",
                      "description": "Authorization claim value",
                      "example": "scope"
                    },
                    "access_group": {
                      "type": "object",
                      "description": "Access group",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Access group ID",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "description": "Access group name",
                          "example": "Default"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UpdateAuthenticationOpenIdProvider": {
        "type": "object",
        "required": [
          "is_active",
          "is_forced",
          "base_url",
          "authorization_endpoint",
          "token_endpoint",
          "introspection_token_endpoint",
          "userinfo_endpoint",
          "endsession_endpoint",
          "connection_scopes",
          "login_claim",
          "client_id",
          "client_secret",
          "authentication_type",
          "verify_peer",
          "auto_import",
          "contact_template",
          "email_bind_attribute",
          "fullname_bind_attribute",
          "redirect_url"
        ],
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the provider is active or not",
            "example": true
          },
          "is_forced": {
            "type": "boolean",
            "description": "Indicates whether the provider is forced or not",
            "example": false
          },
          "base_url": {
            "type": "string",
            "description": "Base URL of the provider",
            "example": "https://localhost:8080",
            "nullable": true
          },
          "authorization_endpoint": {
            "type": "string",
            "description": "Authorization endpoint of the provider",
            "example": "/authorize",
            "nullable": true
          },
          "token_endpoint": {
            "type": "string",
            "description": "Token endpoint of the provider",
            "example": "/token",
            "nullable": true
          },
          "introspection_token_endpoint": {
            "type": "string",
            "description": "Introspection token endpoint of the provider",
            "example": "/introspect",
            "nullable": true
          },
          "userinfo_endpoint": {
            "type": "string",
            "description": "Userinfo endpoint of the provider",
            "example": "/userinfo",
            "nullable": true
          },
          "endsession_endpoint": {
            "type": "string",
            "description": "Endsession endpoint of the provider",
            "example": "/logout",
            "nullable": true
          },
          "connection_scopes": {
            "type": "array",
            "description": "List of scopes to request",
            "items": {
              "type": "string",
              "description": "Scope",
              "example": "openid"
            }
          },
          "login_claim": {
            "type": "string",
            "description": "Claim used to login",
            "example": "sub",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "Client ID",
            "example": "client_id",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret",
            "example": "client_secret",
            "nullable": true
          },
          "authentication_type": {
            "type": "string",
            "description": "Authentication type",
            "example": "client_secret_post",
            "nullable": true,
            "enum": [
              "client_secret_post",
              "client_secret_basic"
            ]
          },
          "verify_peer": {
            "type": "boolean",
            "description": "Verify peer",
            "example": true
          },
          "auto_import": {
            "type": "boolean",
            "description": "Auto import user from external provider",
            "example": true
          },
          "contact_template": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Contact template ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Contact template name",
                "example": "Default"
              }
            }
          },
          "email_bind_attribute": {
            "type": "string",
            "description": "Email bind attribute",
            "example": "email",
            "nullable": true
          },
          "fullname_bind_attribute": {
            "type": "string",
            "description": "Fullname bind attribute",
            "example": "name",
            "nullable": true
          },
          "redirect_url": {
            "type": "string",
            "description": "custom redirect url",
            "example": "https://my_custom_domain.com",
            "nullable": true
          },
          "authentication_conditions": {
            "type": "object",
            "required": [
              "trusted_client_addresses",
              "blacklist_client_addresses",
              "is_enabled",
              "attribute_path",
              "endpoint",
              "authorized_values"
            ],
            "properties": {
              "trusted_client_addresses": {
                "type": "array",
                "description": "List of trusted client addresses",
                "items": {
                  "type": "string",
                  "description": "IP address",
                  "example": "127.0.0.1"
                }
              },
              "blacklist_client_addresses": {
                "type": "array",
                "description": "List of blacklisted client addresses",
                "items": {
                  "type": "string",
                  "description": "IP address",
                  "example": "127.0.0.1"
                }
              },
              "is_enabled": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "example": "info.items.prop1"
              },
              "endpoint": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "authorized_values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "groups_mapping": {
            "type": "object",
            "required": [
              "is_enabled",
              "attribute_path",
              "endpoint",
              "relations"
            ],
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "nullable": false,
                "example": "info.items.groups"
              },
              "endpoint": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "group_value": {
                      "type": "string",
                      "description": "Attribute group value",
                      "example": "group1"
                    },
                    "contact_group_id": {
                      "type": "integer",
                      "description": "Contact group id",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "roles_mapping": {
            "type": "object",
            "required": [
              "is_enabled",
              "apply_only_first_role",
              "attribute_path",
              "endpoint",
              "relations"
            ],
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "apply_only_first_role": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "example": "info.items.role"
              },
              "endpoint": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_group_id": {
                      "type": "integer",
                      "description": "Access group id",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PartialUpdateAuthenticationOpenIdProvider": {
        "type": "object",
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the provider is active or not",
            "example": true
          },
          "is_forced": {
            "type": "boolean",
            "description": "Indicates whether the provider is forced or not",
            "example": false
          },
          "base_url": {
            "type": "string",
            "description": "Base URL of the provider",
            "example": "https://localhost:8080",
            "nullable": true
          },
          "authorization_endpoint": {
            "type": "string",
            "description": "Authorization endpoint of the provider",
            "example": "/authorize",
            "nullable": true
          },
          "token_endpoint": {
            "type": "string",
            "description": "Token endpoint of the provider",
            "example": "/token",
            "nullable": true
          },
          "introspection_token_endpoint": {
            "type": "string",
            "description": "Introspection token endpoint of the provider",
            "example": "/introspect",
            "nullable": true
          },
          "userinfo_endpoint": {
            "type": "string",
            "description": "Userinfo endpoint of the provider",
            "example": "/userinfo",
            "nullable": true
          },
          "endsession_endpoint": {
            "type": "string",
            "description": "Endsession endpoint of the provider",
            "example": "/logout",
            "nullable": true
          },
          "connection_scopes": {
            "type": "array",
            "description": "List of scopes to request",
            "items": {
              "type": "string",
              "description": "Scope",
              "example": "openid"
            }
          },
          "login_claim": {
            "type": "string",
            "description": "Claim used to login",
            "example": "sub",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "Client ID",
            "example": "client_id",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret",
            "example": "client_secret",
            "nullable": true
          },
          "authentication_type": {
            "type": "string",
            "description": "Authentication type",
            "example": "client_secret_post",
            "nullable": true,
            "enum": [
              "client_secret_post",
              "client_secret_basic"
            ]
          },
          "verify_peer": {
            "type": "boolean",
            "description": "Verify peer",
            "example": true
          },
          "auto_import": {
            "type": "boolean",
            "description": "Auto import user from external provider",
            "example": true
          },
          "contact_template": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Contact template ID",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "Contact template name",
                "example": "Default"
              }
            }
          },
          "email_bind_attribute": {
            "type": "string",
            "description": "Email bind attribute",
            "example": "email",
            "nullable": true
          },
          "fullname_bind_attribute": {
            "type": "string",
            "description": "Fullname bind attribute",
            "example": "name",
            "nullable": true
          },
          "redirect_url": {
            "type": "string",
            "description": "custom redirect url",
            "example": "https://my_custom_domain.com",
            "nullable": true
          },
          "authentication_conditions": {
            "type": "object",
            "properties": {
              "trusted_client_addresses": {
                "type": "array",
                "description": "List of trusted client addresses",
                "items": {
                  "type": "string",
                  "description": "IP address",
                  "example": "127.0.0.1"
                }
              },
              "blacklist_client_addresses": {
                "type": "array",
                "description": "List of blacklisted client addresses",
                "items": {
                  "type": "string",
                  "description": "IP address",
                  "example": "127.0.0.1"
                }
              },
              "is_enabled": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "example": "info.items.prop1"
              },
              "endpoint": {
                "type": "object",
                "required": [
                  "type",
                  "custom_endpoint"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "authorized_values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "groups_mapping": {
            "type": "object",
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "nullable": false,
                "example": "info.items.groups"
              },
              "endpoint": {
                "type": "object",
                "required": [
                  "type",
                  "custom_endpoint"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "group_value",
                    "contact_group_id"
                  ],
                  "properties": {
                    "group_value": {
                      "type": "string",
                      "description": "Attribute group value",
                      "example": "group1"
                    },
                    "contact_group_id": {
                      "type": "integer",
                      "description": "Contact group id",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "roles_mapping": {
            "type": "object",
            "properties": {
              "is_enabled": {
                "type": "boolean"
              },
              "apply_only_first_role": {
                "type": "boolean"
              },
              "attribute_path": {
                "type": "string",
                "example": "info.items.role"
              },
              "endpoint": {
                "type": "object",
                "required": [
                  "type",
                  "custom_endpoint"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "introspection_endpoint",
                      "user_information_endpoint",
                      "custom_endpoint"
                    ]
                  },
                  "custom_endpoint": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "access_group_id"
                  ],
                  "properties": {
                    "access_group_id": {
                      "type": "integer",
                      "description": "Access group id",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Token name.",
            "example": "my-api-token"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Linked user ID",
                "example": 23
              },
              "name": {
                "type": "string",
                "description": "Linked user name",
                "example": "Jane Doe"
              }
            }
          },
          "creator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Token creator ID",
                "example": 23,
                "nullable": true
              },
              "name": {
                "type": "string",
                "description": "Token creator name",
                "example": "Jane Doe"
              }
            }
          },
          "creation_date": {
            "type": "string",
            "description": "Creation date of the API authentication token",
            "format": "date-time",
            "example": "2023-08-31T15:46:00+02:00"
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date of the API authentication token",
            "format": "date-time",
            "example": "2024-08-31T00:00:00+00:00"
          },
          "is_revoked": {
            "type": "boolean",
            "description": "Indicate if the token has been revoked",
            "example": false
          }
        }
      },
      "NewToken": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Token name",
            "example": "my-api-token"
          },
          "user_id": {
            "type": "integer",
            "description": "User ID linked to the API authentication token",
            "example": 23
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date of the API authentication token",
            "format": "date-time",
            "example": "2023-08-31T15:46:00+02:00"
          }
        }
      },
      "NewTokenResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Token name.",
            "example": "my-api-token"
          },
          "token": {
            "type": "string",
            "description": "Authentication token",
            "example": "xxxxxxx"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Linked user ID",
                "example": 23
              },
              "name": {
                "type": "string",
                "description": "Linked user name",
                "example": "Jane Doe"
              }
            }
          },
          "creator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Token creator ID",
                "example": 23,
                "nullable": true
              },
              "name": {
                "type": "string",
                "description": "Token creator name",
                "example": "Jane Doe"
              }
            }
          },
          "creation_date": {
            "type": "string",
            "description": "Creation date of the API authentication token",
            "format": "date-time",
            "example": "2023-08-31T15:46:00+02:00"
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date of the API authentication token",
            "format": "date-time",
            "example": "2024-08-31T00:00:00+00:00"
          },
          "is_revoked": {
            "type": "boolean",
            "description": "Indicate if the token has been revoked",
            "example": false
          }
        }
      },
      "RevokeToken": {
        "type": "object",
        "properties": {
          "is_revoked": {
            "type": "boolean",
            "description": "Indicate if the token has been revoked",
            "example": false
          }
        }
      },
      "GetVaultConfiguration": {
        "type": "object",
        "description": "Vault configuration",
        "properties": {
          "address": {
            "type": "string",
            "description": "Vault URL or IP",
            "example": "127.0.0.1"
          },
          "port": {
            "type": "integer",
            "description": "Vault Port",
            "example": 8200
          },
          "root_path": {
            "type": "string",
            "description": "Vault root storage path",
            "example": "centreon"
          }
        }
      },
      "UpdateVaultConfiguration": {
        "type": "object",
        "required": [
          "address",
          "port",
          "root_path",
          "role_id",
          "secret_id"
        ],
        "description": "Vault configuration",
        "properties": {
          "address": {
            "type": "string",
            "description": "Vault URL or IP",
            "example": "127.0.0.1"
          },
          "port": {
            "type": "integer",
            "description": "Vault Port",
            "example": 8200
          },
          "root_path": {
            "type": "string",
            "description": "Vault root storage path",
            "example": "centreon"
          },
          "role_id": {
            "type": "string",
            "description": "Vault role id"
          },
          "secret_id": {
            "type": "string",
            "description": "Vault secret id"
          }
        }
      }
    }
  }
}